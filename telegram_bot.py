import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from mex_api import MexAPI
from neural_analyzer import NeuralAnalyzer
from market_analyzer import MarketAnalyzer
from config import TELEGRAM_BOT_TOKEN, DEFAULT_TRADE_AMOUNT
import json

class TradingBot:
    def __init__(self):
        self.mex_api = MexAPI()
        self.analyzer = NeuralAnalyzer()
        self.market_analyzer = MarketAnalyzer()
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("balance", self.get_balance))
        self.app.add_handler(CommandHandler("price", self.get_price))
        self.app.add_handler(CommandHandler("analyze", self.analyze_symbol))
        self.app.add_handler(CommandHandler("orders", self.get_orders))
        self.app.add_handler(CommandHandler("—Å–∏–º—É–ª—è—Ü–∏—è", self.run_simulation))
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑", callback_data="analyze_menu")],
            [InlineKeyboardButton("üìã –û—Ä–¥–µ—Ä–∞", callback_data="orders")],
            [InlineKeyboardButton("üéØ –°–∏–º—É–ª—è—Ü–∏—è", callback_data="simulation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ MEX Trading Bot –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/balance - –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "/price SYMBOL - —Ü–µ–Ω–∞ —Å–∏–º–≤–æ–ª–∞\n"
            "/analyze SYMBOL - –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞\n"
            "/orders - –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞\n"
            "/—Å–∏–º—É–ª—è—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
            reply_markup=reply_markup
        )
    
    async def get_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_info = self.mex_api.get_account_info()
            
            if 'balances' in account_info:
                balances = [b for b in account_info['balances'] if float(b['free']) > 0]
                
                message = "üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n"
                for balance in balances[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                    free = float(balance['free'])
                    locked = float(balance['locked'])
                    if free > 0 or locked > 0:
                        message += f"{balance['asset']}: {free:.8f} (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.8f})\n"
                
                await update.message.reply_text(message)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {account_info}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}")
    
    async def get_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /price BTCUSDT")
            return
        
        symbol = context.args[0].upper()
        
        try:
            price_data = self.mex_api.get_ticker_price(symbol)
            
            if 'price' in price_data:
                price = float(price_data['price'])
                await update.message.reply_text(f"üíπ {symbol}: ${price:.8f}")
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {price_data}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {str(e)}")
    
    async def analyze_symbol(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò"""
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª: /analyze BTCUSDT")
            return
        
        symbol = context.args[0].upper()
        
        try:
            await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            klines = self.mex_api.get_klines(symbol, '1h', 100)
            
            if isinstance(klines, list) and len(klines) > 0:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
                analysis = self.analyzer.analyze_market_data(klines, symbol)
                
                message = f"ü§ñ –ê–Ω–∞–ª–∏–∑ {symbol}:\n\n"
                message += f"üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}\n"
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']:.1%}\n"
                message += f"üìâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: ${analysis['support_level']:.8f}\n"
                message += f"üìà –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${analysis['resistance_level']:.8f}\n\n"
                message += f"üí≠ –ê–Ω–∞–ª–∏–∑: {analysis['analysis']}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                keyboard = []
                if analysis['recommendation'] == 'BUY':
                    keyboard.append([InlineKeyboardButton("üü¢ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{symbol}")])
                elif analysis['recommendation'] == 'SELL':
                    keyboard.append([InlineKeyboardButton("üî¥ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{symbol}")])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    async def get_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞"""
        try:
            orders = self.mex_api.get_open_orders()
            
            if isinstance(orders, list):
                if len(orders) == 0:
                    await update.message.reply_text("üìã –û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ—Ç")
                else:
                    message = "üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞:\n\n"
                    for order in orders:
                        message += f"üî∏ {order['symbol']}: {order['side']} {order['origQty']} @ {order['price']}\n"
                    await update.message.reply_text(message)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {orders}")
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {str(e)}")
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "balance":
            await self.get_balance(update, context)
        elif data == "orders":
            await self.get_orders(update, context)
        elif data == "simulation":
            await self.run_simulation(update, context)
        elif data.startswith("buy_") or data.startswith("sell_"):
            action, symbol = data.split("_", 1)
            await query.edit_message_text(f"‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏\n{action.upper()} {symbol}")
    
    async def run_simulation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.market_analyzer.get_market_data()
            await update.message.reply_text(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            if len(market_data) == 0:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await update.message.reply_text("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            candidates = self.market_analyzer.filter_trading_candidates(market_data[:50])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            
            if len(candidates) == 0:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                return
            
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-3
            recommendations = []
            for i, candidate in enumerate(candidates[:3]):
                await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑ {candidate['symbol']} ({i+1}/3)...")
                
                # –ò–ò –∞–Ω–∞–ª–∏–∑
                ai_analysis = self.market_analyzer.analyze_with_ai(candidate)
                
                # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                quantity = self.market_analyzer.calculate_position_size(
                    candidate['symbol'], 
                    candidate['current_price'], 
                    candidate['score']
                )
                
                recommendation = {
                    'symbol': candidate['symbol'],
                    'action': ai_analysis['recommendation'],
                    'confidence': ai_analysis['confidence'],
                    'quantity': quantity,
                    'price': candidate['current_price'],
                    'score': candidate['score'],
                    'reasons': candidate['reasons'],
                    'ai_analysis': ai_analysis['analysis'],
                    'position_size_usdt': quantity * candidate['current_price']
                }
                
                recommendations.append(recommendation)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await update.message.reply_text("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            
            for i, rec in enumerate(recommendations, 1):
                action_emoji = "üü¢" if rec['action'] == 'BUY' else "üî¥" if rec['action'] == 'SELL' else "üü°"
                
                message = f"{action_emoji} {i}. {rec['symbol']}\n"
                message += f"‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {rec['action']}\n"
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.1%}\n"
                message += f"üí∞ –¶–µ–Ω–∞: ${rec['price']:.6f}\n"
                message += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rec['quantity']}\n"
                message += f"üíµ –†–∞–∑–º–µ—Ä: ${rec['position_size_usdt']:.2f}\n"
                message += f"‚≠ê –°–∫–æ—Ä: {rec['score']}\n"
                message += f"üìÑ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(rec['reasons'])}\n\n"
                message += f"ü§ñ –ê–Ω–∞–ª–∏–∑: {rec['ai_analysis'][:200]}..."
                
                await update.message.reply_text(message)
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_usdt = sum(rec['position_size_usdt'] for rec in recommendations)
            buy_count = sum(1 for rec in recommendations if rec['action'] == 'BUY')
            
            summary = f"üìä –ò–¢–û–ì–û:\n"
            summary += f"üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(recommendations)} –º–æ–Ω–µ—Ç\n"
            summary += f"üü¢ –ö –ø–æ–∫—É–ø–∫–µ: {buy_count}\n"
            summary += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${total_usdt:.2f}"
            
            await update.message.reply_text(summary)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling()