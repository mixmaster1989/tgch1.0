from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import logging
from bitget_api import BitgetAPI
from profiles import (
    get_profile_by_symbol, get_all_profiles, upsert_profile, delete_profile
)
from config import load_config
import threading
import time
import json

bot_instance = None

DEFAULT_MONITOR_INTERVAL = 300  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç
monitored_symbols = set()
monitored_symbols_lock = threading.Lock()

# –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å)
NOTIFY_TEMPLATES = {
    'order_opened': '‚úÖ –û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä {side} –ø–æ {symbol} (—Ä–∞–∑–º–µ—Ä: {size})',
    'order_error': '‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}: {error}',
    'risk_limit': '‚ùóÔ∏è–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞: {msg} (—Å–∏–≥–Ω–∞–ª –ø–æ {symbol} –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω)',
    'order_partial': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ {symbol}: –∏—Å–ø–æ–ª–Ω–µ–Ω–æ {filled}/{size}',
    'balance_change': 'üí∞ –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω: {coin} {old} ‚Üí {new}',
}

def send_group_message(config, text):
    global bot_instance
    if not bot_instance:
        bot_instance = Bot(token=config['TELEGRAM_TOKEN'])
    bot_instance.send_message(chat_id=config['TELEGRAM_GROUP_ID'], text=text)

def monitor_position_for_symbol(config, bitget, symbol):
    profile = get_profile_by_symbol(symbol, config['DB_PATH'])
    interval = profile.get('monitor_interval', DEFAULT_MONITOR_INTERVAL) if profile else DEFAULT_MONITOR_INTERVAL
    tp1 = profile.get('tp1')
    tp2 = profile.get('tp2')
    sl = profile.get('sl')
    trailing = profile.get('trailing')
    tp1_close_percent = profile.get('tp1_close_percent', 50)
    trailing_active = False
    trailing_level = None
    tp1_hit = False
    side = None
    entry_price = None
    while True:
        try:
            positions = bitget.get_positions()
            pos = next((p for p in positions if p.get('symbol') == symbol), None)
            if not pos:
                send_group_message(config, f'–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
                break
            size = float(pos.get('total', 0))
            side = pos.get('holdSide', '-')
            pnl = pos.get('unrealizedPL', '-')
            mark_price = float(pos.get('marketPrice', 0))
            if not entry_price:
                entry_price = float(pos.get('openPrice', mark_price))
            # TP1
            if tp1 and not tp1_hit:
                if (side == 'long' and mark_price >= tp1) or (side == 'short' and mark_price <= tp1):
                    tp1_hit = True
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                    close_size = round(size * tp1_close_percent / 100, 6)
                    if close_size > 0:
                        bitget.close_order(symbol, side, size=close_size)
                        send_group_message(config, f'üéØ TP1 –ø–æ {symbol} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({mark_price}). –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {tp1_close_percent}% –ø–æ–∑–∏—Ü–∏–∏ ({close_size}). –í–∫–ª—é—á—ë–Ω —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø.')
                    else:
                        send_group_message(config, f'üéØ TP1 –ø–æ {symbol} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({mark_price}). –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è.')
                    if trailing:
                        trailing_active = True
                        trailing_level = mark_price - trailing if side == 'long' else mark_price + trailing
            # Trailing
            if trailing_active and trailing:
                if side == 'long':
                    if mark_price - trailing > trailing_level:
                        trailing_level = mark_price - trailing
                    if mark_price <= trailing_level:
                        bitget.close_order(symbol, side)
                        send_group_message(config, f'üö® –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ {symbol} —Å—Ä–∞–±–æ—Ç–∞–ª ({mark_price}). –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.')
                        break
                    if tp2 and mark_price >= tp2:
                        bitget.close_order(symbol, side)
                        send_group_message(config, f'üèÅ TP2 –ø–æ {symbol} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({mark_price}). –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.')
                        break
                elif side == 'short':
                    if mark_price + trailing < trailing_level:
                        trailing_level = mark_price + trailing
                    if mark_price >= trailing_level:
                        bitget.close_order(symbol, side)
                        send_group_message(config, f'üö® –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –ø–æ {symbol} —Å—Ä–∞–±–æ—Ç–∞–ª ({mark_price}). –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.')
                        break
                    if tp2 and mark_price <= tp2:
                        bitget.close_order(symbol, side)
                        send_group_message(config, f'üèÅ TP2 –ø–æ {symbol} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({mark_price}). –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.')
                        break
            # SL
            if sl:
                if (side == 'long' and mark_price <= sl) or (side == 'short' and mark_price >= sl):
                    bitget.close_order(symbol, side)
                    send_group_message(config, f'üõë SL –ø–æ {symbol} —Å—Ä–∞–±–æ—Ç–∞–ª ({mark_price}). –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞.')
                    break
            # –û–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            text = f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol}: {side} {size} PnL: {pnl} –¶–µ–Ω–∞: {mark_price}'
            send_group_message(config, text)
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {symbol}: {e}')
        time.sleep(interval)
    with monitored_symbols_lock:
        monitored_symbols.discard(symbol)

def monitor_new_positions_loop(config, bitget):
    while True:
        try:
            positions = bitget.get_positions()
            symbols = set(p.get('symbol') for p in positions if p.get('symbol'))
            with monitored_symbols_lock:
                new_symbols = symbols - monitored_symbols
                for symbol in new_symbols:
                    t = threading.Thread(target=monitor_position_for_symbol, args=(config, bitget, symbol), daemon=True)
                    t.start()
                    monitored_symbols.add(symbol)
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}')
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

def start_telegram_bot(config):
    global bot_instance
    bot_instance = Bot(token=config['TELEGRAM_TOKEN'])
    updater = Updater(token=config['TELEGRAM_TOKEN'], use_context=True)
    dispatcher = updater.dispatcher
    bitget = BitgetAPI(
        config['BITGET_API_KEY'],
        config['BITGET_API_SECRET'],
        config['BITGET_API_PASSPHRASE']
    )

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    monitor_new_thread = threading.Thread(target=monitor_new_positions_loop, args=(config, bitget), daemon=True)
    monitor_new_thread.start()

    def start(update: Update, context: CallbackContext):
        update.message.reply_text('–ë–æ—Ç –∞–≤—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä–∞ Bitget –∑–∞–ø—É—â–µ–Ω!')

    def status(update: Update, context: CallbackContext):
        positions = bitget.get_positions()
        balance = bitget.get_balance()
        text = '–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n'
        for pos in positions:
            symbol = pos.get('symbol', '-')
            size = pos.get('total', '-')
            side = pos.get('holdSide', '-')
            text += f"{symbol} {side} {size}\n"
        text += '\n–ë–∞–ª–∞–Ω—Å:\n'
        for acc in balance:
            coin = acc.get('marginCoin', '-')
            avail = acc.get('available', '-')
            text += f"{coin}: {avail}\n"
        update.message.reply_text(text)

    def close(update: Update, context: CallbackContext):
        if len(context.args) < 1:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /close <–º–æ–Ω–µ—Ç–∞> [long|short]')
            return
        symbol = context.args[0]
        side = 'all'
        if len(context.args) > 1:
            arg_side = context.args[1].lower()
            if arg_side in ['long', 'buy']:
                side = 'open_long'
            elif arg_side in ['short', 'sell']:
                side = 'open_short'
        try:
            result = bitget.close_order(symbol, side)
            if result and result.get('code') == '00000':
                msg = f'–ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} ({side}) –∑–∞–∫—Ä—ã—Ç–∞.'
                update.message.reply_text(msg)
                send_group_message(config, msg)
            else:
                err = result.get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if result else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
                update.message.reply_text(f'–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {err}')
                send_group_message(config, f'–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {symbol}: {err}')
        except Exception as e:
            update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')
            send_group_message(config, f'–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {symbol}: {e}')

    def profiles_cmd(update: Update, context: CallbackContext):
        profiles = get_all_profiles(config['DB_PATH'])
        if not profiles:
            update.message.reply_text('–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return
        text = '–ü—Ä–æ—Ñ–∏–ª–∏:\n'
        for name, prof in profiles:
            text += f'- {name}\n'
        update.message.reply_text(text)

    def profile_cmd(update: Update, context: CallbackContext):
        if len(context.args) < 1:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile <symbol>')
            return
        symbol = context.args[0]
        profile = get_profile_by_symbol(symbol, config['DB_PATH'])
        if profile:
            update.message.reply_text(f'–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {symbol}:\n{json.dumps(profile, ensure_ascii=False, indent=2)}')
        else:
            update.message.reply_text(f'–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω')

    def addprofile_cmd(update: Update, context: CallbackContext):
        if len(context.args) < 2:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addprofile <symbol> <json>')
            return
        symbol = context.args[0]
        try:
            settings = json.loads(' '.join(context.args[1:]))
            upsert_profile(symbol, settings, config['DB_PATH'])
            update.message.reply_text(f'–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {symbol} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω.')
        except Exception as e:
            update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

    def editprofile_cmd(update: Update, context: CallbackContext):
        if len(context.args) < 2:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editprofile <symbol> <json>')
            return
        symbol = context.args[0]
        try:
            settings = json.loads(' '.join(context.args[1:]))
            upsert_profile(symbol, settings, config['DB_PATH'])
            update.message.reply_text(f'–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {symbol} –æ–±–Ω–æ–≤–ª—ë–Ω.')
        except Exception as e:
            update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

    def delprofile_cmd(update: Update, context: CallbackContext):
        if len(context.args) < 1:
            update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delprofile <symbol>')
            return
        symbol = context.args[0]
        delete_profile(symbol, config['DB_PATH'])
        update.message.reply_text(f'–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è {symbol} —É–¥–∞–ª—ë–Ω.')

    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('status', status))
    dispatcher.add_handler(CommandHandler('close', close))
    dispatcher.add_handler(CommandHandler('profiles', profiles_cmd))
    dispatcher.add_handler(CommandHandler('profile', profile_cmd))
    dispatcher.add_handler(CommandHandler('addprofile', addprofile_cmd))
    dispatcher.add_handler(CommandHandler('editprofile', editprofile_cmd))
    dispatcher.add_handler(CommandHandler('delprofile', delprofile_cmd))

    logging.info('Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    updater.start_polling()
    updater.idle()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:
def notify_order_opened(config, symbol, side, size):
    msg = NOTIFY_TEMPLATES['order_opened'].format(symbol=symbol, side=side, size=size)
    send_group_message(config, msg)

def notify_order_error(config, symbol, error):
    msg = NOTIFY_TEMPLATES['order_error'].format(symbol=symbol, error=error)
    send_group_message(config, msg)

def notify_risk_limit(config, symbol, msg_text):
    msg = NOTIFY_TEMPLATES['risk_limit'].format(symbol=symbol, msg=msg_text)
    send_group_message(config, msg)

def notify_order_partial(config, symbol, filled, size):
    msg = NOTIFY_TEMPLATES['order_partial'].format(symbol=symbol, filled=filled, size=size)
    send_group_message(config, msg)

def notify_balance_change(config, coin, old, new):
    msg = NOTIFY_TEMPLATES['balance_change'].format(coin=coin, old=old, new=new)
    send_group_message(config, msg) 