#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from comprehensive_data_manager import ComprehensiveDataManager

class TestLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    
    def __init__(self, filename="test_results.txt"):
        self.filename = filename
        self.log_buffer = []
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        print(formatted_message)
        self.log_buffer.append(formatted_message)
    
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                f.write("=" * 80 + "\n")
                f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê\n")
                f.write("=" * 80 + "\n")
                f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 80 + "\n\n")
                
                for log_entry in self.log_buffer:
                    f.write(log_entry + "\n")
                
                f.write("\n" + "=" * 80 + "\n")
                f.write("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù\n")
                f.write("=" * 80 + "\n")
            
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {self.filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")

async def test_account_scanning(logger):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∏–º–≤–æ–ª—ã"""
    try:
        logger.log("üß™ –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã")
        logger.log("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.log("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data_manager = ComprehensiveDataManager()
        logger.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω")
        
        logger.log("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        try:
            symbols = data_manager._get_account_symbols()
            logger.log(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {symbols}")
            logger.log(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        logger.log("")
        
        logger.log("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        try:
            portfolio = data_manager.get_portfolio_summary()
            if portfolio:
                logger.log(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio.get('total_usdt', 0):.2f}")
                logger.log(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(portfolio.get('active_symbols', []))}")
                
                if portfolio.get('asset_values'):
                    logger.log("   üíé –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤:")
                    for asset, value in portfolio['asset_values'].items():
                        if value > 0:
                            logger.log(f"      {asset}: ${value:.2f}")
                
                if portfolio.get('positions'):
                    logger.log(f"   üìà –§—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(portfolio['positions'])}")
                
                if portfolio.get('open_orders'):
                    logger.log(f"   üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(portfolio['open_orders'])}")
            else:
                logger.log("   ‚ö†Ô∏è –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        logger.log("")
        
        logger.log("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫...")
        try:
            await data_manager.refresh_account_subscriptions()
            logger.log("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        logger.log("")
        
        logger.log("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
        try:
            if hasattr(data_manager, '_last_account_symbols'):
                current_symbols = data_manager._last_account_symbols
                logger.log(f"   –¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {', '.join(sorted(current_symbols))}")
                logger.log(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(current_symbols)}")
            else:
                logger.log("   –ü–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        logger.log("")
        
        logger.log("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        try:
            methods = [method for method in dir(data_manager) if not method.startswith('_')]
            logger.log(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {len(methods)}")
            logger.log(f"   –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {', '.join(methods[:20])}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤: {e}")
        logger.log("")
        
        logger.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        error_trace = traceback.format_exc()
        logger.log(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{error_trace}")

async def test_full_startup(logger):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.log("üöÄ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        logger.log("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        logger.log("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data_manager = ComprehensiveDataManager()
        logger.log("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω")
        
        logger.log("1Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        try:
            await data_manager.start()
            logger.log("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return
        
        logger.log("2Ô∏è‚É£ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        await asyncio.sleep(10)
        logger.log("   ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        logger.log("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...")
        try:
            if hasattr(data_manager, '_last_account_symbols'):
                symbols = data_manager._last_account_symbols
                logger.log(f"   –ü–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: {', '.join(sorted(symbols))}")
                logger.log(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(symbols)}")
            else:
                logger.log("   –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        logger.log("4Ô∏è‚É£ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
        try:
            await data_manager.stop()
            logger.log("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        
        logger.log("‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        error_trace = traceback.format_exc()
        logger.log(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{error_trace}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = TestLogger("test_results.txt")
    
    logger.log("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ê–ö–ö–ê–£–ù–¢–ê")
    logger.log("=" * 70)
    
    logger.log("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:")
    logger.log("1. –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    logger.log("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        logger.log("–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        await test_account_scanning(logger)
    elif choice == "2":
        logger.log("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        await test_full_startup(logger)
    else:
        logger.log("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞—é –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç...")
        await test_account_scanning(logger)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    logger.save_to_file()
    
    logger.log("=" * 70)
    logger.log("üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª test_results.txt")
    logger.log("üìñ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 