#!/usr/bin/env python3
"""
–ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ 50/50 –ê–ª—å—Ç—ã vs BTC/ETH
- –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —Å–≤–æ–±–æ–¥–Ω—ã–µ USDC
- –ï—Å–ª–∏ –±–æ–ª—å—à–µ $10 - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
- –ü–æ–∫—É–ø–∞–µ—Ç –∞–ª—å—Ç—ã –∑–∞ USDC –µ—Å–ª–∏ –æ—Ç—Å—Ç–∞—é—Ç
- –ü–æ–∫—É–ø–∞–µ—Ç BTC/ETH –∑–∞ USDC –µ—Å–ª–∏ –æ—Ç—Å—Ç–∞—é—Ç
- –ó–ê–©–ò–¢–ê: –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDC –º–µ–Ω—å—à–µ $10!
- –†–∞–±–æ—Ç–∞–µ—Ç –ë–´–°–¢–†–ï–ï —á–µ–º market_scanner.py
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional
from decimal import Decimal

from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from portfolio_balancer import PortfolioBalancer

import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Active5050Balancer:
    """–ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ 50/50 –ê–ª—å—Ç—ã vs BTC/ETH –∑–∞ USDC"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –ü–ï–†–ï–í–û–î –ù–ê USDC!
        self.scan_interval = 60  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞)
        self.min_balance_threshold = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ ($10 USDC)
        self.max_balance_threshold = 100.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ($100 USDC)
        
        # –ó–ê–©–ò–¢–ê –ë–ê–õ–ê–ù–°–ê USDC - –ö–†–ò–¢–ò–ß–ù–û!
        self.min_usdc_balance_after_operation = 20.0  # –ú–∏–Ω–∏–º—É–º $20 USDC –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤)
        
        # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        self.target_alts_ratio = 0.50  # 50% –∞–ª—å—Ç—ã
        self.target_btceth_ratio = 0.50  # 50% BTC/ETH
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ (10%)
        self.min_deviation_threshold = 0.10  # 10% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.last_balance_time = None
        self.min_balance_cooldown = 60  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_balances = 0
        self.total_converted = 0.0
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ—Ç—á–µ—Ç–æ–≤ (—É–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –≤ 2 —Ä–∞–∑–∞)
        self.report_counter = 0
        self.btc_eth_balancer = PortfolioBalancer()
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT (–¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USDC)"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0
    
    def ensure_usdc_for_trade(self, required_usdc: float) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å USDC –¥–ª—è —Å–¥–µ–ª–∫–∏; –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—É–ø–∏—Ç—å –∑–∞ USDT"""
        try:
            buffer = 0.02  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
            need = required_usdc + buffer
            usdc_free = self.get_usdc_balance()
            
            if usdc_free >= need:
                return True

            # –ü–æ–∫—É–ø–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC –∑–∞ USDT
            shortfall = max(0.0, need - usdc_free)
            usdt_free = self.get_usdt_balance()
            
            if usdt_free < shortfall:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC: –Ω—É–∂–Ω–æ ${shortfall:.2f}, –µ—Å—Ç—å ${usdt_free:.2f}")
                return False

            qty = round(shortfall, 2)
            if qty < 1.0:
                qty = 1.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—É–º–Ω—ã–π —à–∞–≥

            # –ü–æ–∫—É–ø–∞–µ–º USDC –∑–∞ USDT —á–µ—Ä–µ–∑ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol='USDCUSDT', 
                side='BUY', 
                quantity=qty
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT: ${qty:.2f}")
                try:
                    self.send_telegram_message(f"üí± –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT –Ω–∞ ${qty:.2f} –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
                except Exception:
                    pass
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å USDC: {order}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ensure_usdc_for_trade: {e}")
            return False
    
    def can_make_operation(self, operation_amount: float) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
        –ó–ê–©–ò–¢–ê: –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDC –º–µ–Ω—å—à–µ $10!
        """
        try:
            current_usdc = self.get_usdc_balance()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞—â–∏—Ç—É –±–∞–ª–∞–Ω—Å–∞
            if current_usdc < self.min_usdc_balance_after_operation + operation_amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${operation_amount:.2f}, –Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_operation:.2f}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC
            remaining_after_operation = current_usdc - operation_amount
            if remaining_after_operation < self.min_usdc_balance_after_operation:
                return False, f"–ü–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ${remaining_after_operation:.2f} USDC, —á—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ ${self.min_usdc_balance_after_operation:.2f}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            if (self.last_balance_time and 
                time.time() - self.last_balance_time < self.min_balance_cooldown):
                remaining_cooldown = self.min_balance_cooldown - (time.time() - self.last_balance_time)
                return False, f"–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_cooldown:.0f} —Å–µ–∫"
            
            return True, "OK"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
    
    def calculate_safe_operation_amount(self, available_usdc: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º $10 USDC
        """
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å
            max_safe_amount = available_usdc - self.min_usdc_balance_after_operation
            
            if max_safe_amount <= 0:
                return 0.0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            safe_amount = min(max_safe_amount, self.max_balance_threshold)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return round(safe_amount, 2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            return 0.0
    
    def get_portfolio_values(self) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –∞–ª—å—Ç—ã vs BTC/ETH"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return {'alts_value': 0.0, 'btceth_value': 0.0, 'total_value': 0.0}
            
            alts_value = 0.0
            btceth_value = 0.0
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            btc_price = self.mex_api.get_ticker_price('BTCUSDC')
            eth_price = self.mex_api.get_ticker_price('ETHUSDC')
            usdc_usdt_price = self.mex_api.get_ticker_price('USDCUSDT')
            
            btc_price_value = float(btc_price['price']) if btc_price else 0.0
            eth_price_value = float(eth_price['price']) if eth_price else 0.0
            usdc_usdt_value = float(usdc_usdt_price['price']) if usdc_usdt_price else 1.0
            
            for balance in account_info['balances']:
                asset = balance['asset']
                total_amount = float(balance['free']) + float(balance['locked'])
                
                if total_amount <= 0:
                    continue
                
                # BTC/ETH —Å—á–∏—Ç–∞–µ–º –≤ USDC
                if asset == 'BTC':
                    btceth_value += total_amount * btc_price_value
                elif asset == 'ETH':
                    btceth_value += total_amount * eth_price_value
                # –ê–ª—å—Ç—ã (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫—Ä–æ–º–µ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤) —Å—á–∏—Ç–∞–µ–º –≤ USDT
                elif asset not in ['USDT', 'USDC']:
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ USDT
                    symbol = f"{asset}USDT"
                    try:
                        price_info = self.mex_api.get_ticker_price(symbol)
                        if price_info and 'price' in price_info:
                            price = float(price_info['price'])
                            alts_value += total_amount * price
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BTC/ETH –≤ USDT –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            btceth_value_usdt = btceth_value * usdc_usdt_value
            total_value = alts_value + btceth_value_usdt
            
            return {
                'alts_value': alts_value,
                'btceth_value': btceth_value,
                'btceth_value_usdt': btceth_value_usdt,
                'total_value': total_value,
                'usdc_usdt_rate': usdc_usdt_value
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {'alts_value': 0.0, 'btceth_value': 0.0, 'total_value': 0.0}
    
    def calculate_balance_needed(self) -> Optional[Dict]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –∑–∞ USDC"""
        try:
            usdc_balance = self.get_usdc_balance()
            
            if usdc_balance < self.min_balance_threshold:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = self.get_portfolio_values()
            
            if portfolio['total_value'] <= 0:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            alts_ratio = portfolio['alts_value'] / portfolio['total_value']
            btceth_ratio = portfolio['btceth_value_usdt'] / portfolio['total_value']
            
            # –¶–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            target_alts_value = portfolio['total_value'] * self.target_alts_ratio
            target_btceth_value = portfolio['total_value'] * self.target_btceth_ratio
            
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            alts_deviation = portfolio['alts_value'] - target_alts_value
            btceth_deviation = portfolio['btceth_value_usdt'] - target_btceth_value
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            safe_operation_amount = self.calculate_safe_operation_amount(usdc_balance)
            
            if safe_operation_amount < 5.0:  # –ú–∏–Ω–∏–º—É–º $5 –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (10%)
            alts_deviation_percent = abs(alts_ratio - self.target_alts_ratio) / self.target_alts_ratio
            btceth_deviation_percent = abs(btceth_ratio - self.target_btceth_ratio) / self.target_btceth_ratio
            
            # –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
            if alts_deviation_percent < self.min_deviation_threshold and btceth_deviation_percent < self.min_deviation_threshold:
                logger.info(f"üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: –ê–ª—å—Ç—ã {alts_deviation_percent*100:.1f}%, BTC/ETH {btceth_deviation_percent*100:.1f}% < {self.min_deviation_threshold*100}%")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å
            if alts_deviation > 0 and btceth_deviation < 0:
                # –ê–ª—å—Ç–æ–≤ –±–æ–ª—å—à–µ, BTC/ETH –º–µ–Ω—å—à–µ - –ø–æ–∫—É–ø–∞–µ–º BTC/ETH –∑–∞ USDC
                amount_to_spend = min(safe_operation_amount, abs(btceth_deviation) * 0.5)
                if amount_to_spend >= 5.0:  # –ú–∏–Ω–∏–º—É–º $5
                    return {
                        'action': 'BUY_BTCETH_USDC',
                        'amount': amount_to_spend,
                        'reason': f'–ê–ª—å—Ç—ã {alts_ratio*100:.1f}% > 50%, BTC/ETH {btceth_ratio*100:.1f}% < 50% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {alts_deviation_percent*100:.1f}%)'
                    }
            
            elif btceth_deviation > 0 and alts_deviation < 0:
                # BTC/ETH –±–æ–ª—å—à–µ, –∞–ª—å—Ç–æ–≤ –º–µ–Ω—å—à–µ - –ø–æ–∫—É–ø–∞–µ–º –∞–ª—å—Ç—ã –∑–∞ USDC
                amount_to_spend = min(safe_operation_amount, abs(alts_deviation) * 0.5)
                if amount_to_spend >= 5.0:  # –ú–∏–Ω–∏–º—É–º $5
                    return {
                        'action': 'BUY_ALTS_USDC',
                        'amount': amount_to_spend,
                        'reason': f'BTC/ETH {btceth_ratio*100:.1f}% > 50%, –ê–ª—å—Ç—ã {alts_ratio*100:.1f}% < 50% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {btceth_deviation_percent*100:.1f}%)'
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return None
    
    def check_purchase_permission(self, purchase_amount: float, purchase_type: str = "ALTS") -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤ —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = self.get_portfolio_values()
            
            if portfolio['total_value'] <= 0:
                result = {
                    'allowed': False,
                    'reason': '–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    'current_alts_ratio': 0.0,
                    'current_btceth_ratio': 0.0
                }
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                alts_ratio = portfolio['alts_value'] / portfolio['total_value']
                btceth_ratio = portfolio['btceth_value_usdt'] / portfolio['total_value']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                alts_deviation_percent = abs(alts_ratio - self.target_alts_ratio) / self.target_alts_ratio
                btceth_deviation_percent = abs(btceth_ratio - self.target_btceth_ratio) / self.target_btceth_ratio
                
                # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 10% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
                if alts_deviation_percent < self.min_deviation_threshold and btceth_deviation_percent < self.min_deviation_threshold:
                    result = {
                        'allowed': True,
                        'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ï—Å–ª–∏ –∞–ª—å—Ç–æ–≤ –±–æ–ª—å—à–µ 50% - –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
                elif alts_ratio > self.target_alts_ratio and purchase_type == "ALTS":
                    result = {
                        'allowed': False,
                        'reason': f'–ê–ª—å—Ç–æ–≤ —É–∂–µ {alts_ratio*100:.1f}% > 50% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {alts_deviation_percent*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ï—Å–ª–∏ BTC/ETH –±–æ–ª—å—à–µ 50% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
                elif btceth_ratio > self.target_btceth_ratio and purchase_type == "ALTS":
                    result = {
                        'allowed': True,
                        'reason': f'BTC/ETH {btceth_ratio*100:.1f}% > 50%, –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∞–ª—å—Ç—ã',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
                else:
                    result = {
                        'allowed': True,
                        'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
            
            # üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
            status_icon = "‚úÖ" if result['allowed'] else "üö´"
            status_text = "–†–ê–ó–†–ï–®–ï–ù–û" if result['allowed'] else "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
            
            response_message = (
                f"{status_icon} <b>–û–¢–í–ï–¢ –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê: {status_text}</b>\n\n"
                f"üí∞ –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: ${purchase_amount:.2f}\n"
                f"üìä –¢–∏–ø: {purchase_type}\n\n"
                f"üìà <b>–¢–ï–ö–£–©–ò–ï –ü–†–û–ü–û–†–¶–ò–ò:</b>\n"
                f"–ê–ª—å—Ç—ã: {result['current_alts_ratio']*100:.1f}%\n"
                f"BTC/ETH: {result['current_btceth_ratio']*100:.1f}%\n\n"
                f"üìù <b>–ü–†–ò–ß–ò–ù–ê:</b>\n"
                f"{result['reason']}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            try:
                self.send_telegram_message(response_message)
                logger.info(f"üì± –û—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {status_text}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
            error_result = {
                'allowed': False,
                'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}',
                'current_alts_ratio': 0.0,
                'current_btceth_ratio': 0.0
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = (
                f"‚ùå <b>–û–®–ò–ë–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê</b>\n\n"
                f"üí∞ –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: ${purchase_amount:.2f}\n"
                f"üìä –¢–∏–ø: {purchase_type}\n\n"
                f"üö´ <b>–û–®–ò–ë–ö–ê:</b>\n"
                f"{e}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            try:
                self.send_telegram_message(error_message)
            except Exception:
                pass
            
            return error_result
    
    async def execute_balance_operation(self, balance_plan: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∑–∞ USDC"""
        try:
            action = balance_plan['action']
            amount = balance_plan['amount']
            reason = balance_plan['reason']
            
            logger.info(f"‚öñÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É: {action} –Ω–∞ ${amount:.2f} USDC")
            logger.info(f"üìä –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ó–ê–©–ò–¢–û–ô –ë–ê–õ–ê–ù–°–ê
            can_operate, reason_block = self.can_make_operation(amount)
            
            if not can_operate:
                logger.warning(f"‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {reason_block}")
                return False
            
            if action == 'BUY_BTCETH_USDC':
                # –ü–æ–∫—É–ø–∞–µ–º BTC/ETH –∑–∞ USDC
                success = await self.buy_btceth_with_usdc(amount)
            elif action == 'BUY_ALTS_USDC':
                # –ü–æ–∫—É–ø–∞–µ–º –∞–ª—å—Ç—ã –∑–∞ USDC
                success = await self.buy_alts_with_usdc(amount)
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                return False
            
            if success:
                self.last_balance_time = time.time()
                self.total_balances += 1
                self.total_converted += amount
                
                logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.total_balances} –æ–ø–µ—Ä–∞—Ü–∏–π, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ ${self.total_converted:.2f} USDC")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = self.format_balance_report(balance_plan, True)
                self.send_telegram_message(message)
                
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def buy_btceth_with_usdc(self, amount: float) -> bool:
        """–ö—É–ø–∏—Ç—å BTC/ETH –∑–∞ USDC"""
        try:
            # üî• –ù–û–í–û–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC/ETH –Ω–∞ ${amount:.2f}")
            
            if not self.ensure_usdc_for_trade(amount):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC/ETH")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = (
                    f"‚ùå <b>–û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò USDT ‚Üí USDC</b>\n\n"
                    f"üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount:.2f} USDC\n"
                    f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT ‚Üí USDC\n"
                    f"üìä –¶–µ–ª—å: –ü–æ–∫—É–ø–∫–∞ BTC/ETH –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(error_message)
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            success_message = (
                f"‚úÖ <b>USDC –ü–û–î–ì–û–¢–û–í–õ–ï–ù –î–õ–Ø –ü–û–ö–£–ü–ö–ò BTC/ETH</b>\n\n"
                f"üí∞ –°—É–º–º–∞: ${amount:.2f} USDC\n"
                f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: USDT ‚Üí USDC (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
                f"üìä –¶–µ–ª—å: –ü–æ–∫—É–ø–∫–∞ BTC/ETH –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            self.send_telegram_message(success_message)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É BTC –∏ ETH
            btc_amount = amount * 0.6  # 60% –Ω–∞ BTC
            eth_amount = amount * 0.4  # 40% –Ω–∞ ETH
            
            success_count = 0
            
            # –ü–æ–∫—É–ø–∞–µ–º BTC
            if btc_amount >= 5.0:
                btc_order = self.mex_api.place_order(
                    symbol='BTCUSDC',
                    side='BUY',
                    quantity=btc_amount
                )
                if btc_order and 'orderId' in btc_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω BTC –Ω–∞ ${btc_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC")
            
            # –ü–æ–∫—É–ø–∞–µ–º ETH
            if eth_amount >= 5.0:
                eth_order = self.mex_api.place_order(
                    symbol='ETHUSDC',
                    side='BUY',
                    quantity=eth_amount
                )
                if eth_order and 'orderId' in eth_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω ETH –Ω–∞ ${eth_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ ETH")
            
            # üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            if success_count > 0:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π...")
                try:
                    btc_eth_result = self.btc_eth_balancer.execute_portfolio_rebalance_sync()
                    if btc_eth_result.get('success'):
                        logger.info("‚úÖ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
                        btc_eth_message = (
                            f"‚öñÔ∏è <b>BTC-ETH –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n"
                            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {btc_eth_result.get('message', '–£—Å–ø–µ—à–Ω–æ')}\n"
                            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${btc_eth_result.get('total_spent', 0):.2f}\n"
                            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏–π: {btc_eth_result.get('trades_executed', 0)}\n\n"
                            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                        )
                        self.send_telegram_message(btc_eth_message)
                    else:
                        logger.warning(f"‚ö†Ô∏è BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {btc_eth_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC/ETH: {e}")
            return False
    
    async def buy_alts_with_usdc(self, amount: float) -> bool:
        """–ö—É–ø–∏—Ç—å –∞–ª—å—Ç—ã –∑–∞ USDC"""
        try:
            # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–ª—å—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            alt_symbols = ['ADAUSDC', 'DOTUSDC', 'LINKUSDC', 'MATICUSDC', 'AVAXUSDC']
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –º–µ–∂–¥—É –∞–ª—å—Ç–∞–º–∏
            amount_per_alt = amount / len(alt_symbols)
            
            if amount_per_alt < 5.0:
                # –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –∞–ª—å—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π
                alt_symbols = alt_symbols[:1]
                amount_per_alt = amount
            
            success_count = 0
            
            for symbol in alt_symbols:
                try:
                    order = self.mex_api.place_order(
                        symbol=symbol,
                        side='BUY',
                        quantity=amount_per_alt
                    )
                    
                    if order and 'orderId' in order:
                        logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω {symbol} –Ω–∞ ${amount_per_alt:.2f} USDC")
                        success_count += 1
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}")
                    continue
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–ª—å—Ç–æ–≤: {e}")
            return False
    
    def format_balance_report(self, balance_plan: Dict, success: bool) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ"""
        try:
            action = balance_plan['action']
            amount = balance_plan['amount']
            reason = balance_plan['reason']
            
            if success:
                message = "<b>‚úÖ –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n"
            else:
                message = "<b>‚ùå –û–®–ò–ë–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò</b>\n"
            
            message += "=" * 40 + "\n\n"
            message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"‚öñÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
            message += f"üí∞ –°—É–º–º–∞: ${amount:.2f} USDC\n"
            message += f"üìä –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            
            if success:
                message += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.total_balances} –æ–ø–µ—Ä–∞—Ü–∏–π\n"
                message += f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${self.total_converted:.2f} USDC\n"
                message += f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: –º–∏–Ω–∏–º—É–º $10 USDC\n"
            else:
                message += "‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
            
            message += "\n" + "=" * 40 + "\n"
            message += "<b>‚öñÔ∏è –ê–ö–¢–ò–í–ù–ê–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê</b>"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}"
    
    async def balance_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if (self.last_balance_time and 
                time.time() - self.last_balance_time < self.min_balance_cooldown):
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDC (–æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π)
            usdc_balance = self.get_usdc_balance()
            
            if usdc_balance < self.min_balance_threshold:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = self.get_portfolio_values()
            
            if portfolio['total_value'] <= 0:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            balance_plan = self.calculate_balance_needed()
            
            if not balance_plan:
                return
            
            logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {balance_plan['action']} ${balance_plan['amount']:.2f}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            success = await self.execute_balance_operation(balance_plan)
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç (–∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 10)
                self.report_counter += 1
                if self.report_counter % 2 == 0:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –æ—Ç—á–µ—Ç
                    report = self.format_balance_report(balance_plan, True)
                    self.send_telegram_message(report)
                else:
                    logger.info("üìä –û—Ç—á–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ø–∞–º–∞)")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ (–≤—Å–µ–≥–¥–∞)
                report = self.format_balance_report(balance_plan, False)
                self.send_telegram_message(report)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50 –ê–ª—å—Ç—ã vs BTC/ETH –∑–∞ USDC")
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_balance_threshold} USDC")
        logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${self.max_balance_threshold} USDC")
        logger.info(f"   –ó–ê–©–ò–¢–ê: –ú–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_operation} USDC –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.scan_interval} —Å–µ–∫ (1 –º–∏–Ω—É—Ç–∞)")
        logger.info(f"   –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏: {self.min_balance_cooldown} —Å–µ–∫")
        logger.info(f"   –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –ê–ª—å—Ç—ã {self.target_alts_ratio*100}% | BTC/ETH {self.target_btceth_ratio*100}%")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {self.min_deviation_threshold*100}%")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            "<b>‚öñÔ∏è –ê–ö–¢–ò–í–ù–´–ô –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö 50/50 –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_balance_threshold} USDC\n"
            f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${self.max_balance_threshold} USDC\n"
            f"üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ú–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_operation} USDC –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
            f"‚è∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {self.scan_interval} —Å–µ–∫ (1 –º–∏–Ω—É—Ç–∞)\n"
            f"üìà –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –ê–ª—å—Ç—ã {self.target_alts_ratio*100}% | BTC/ETH {self.target_btceth_ratio*100}%\n"
            f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {self.min_deviation_threshold*100}%\n\n"
            "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω...\n"
            "üí± –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ USDC (—Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π)"
        )
        self.send_telegram_message(startup_message)
        
        self.is_running = True
        
        while self.is_running:
            try:
                await self.balance_cycle()
                await asyncio.sleep(self.scan_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        self.is_running = False
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50")
        self.is_running = False
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'total_balances': self.total_balances,
            'total_converted': self.total_converted,
            'last_balance_time': self.last_balance_time,
            'scan_interval': self.scan_interval,
            'min_balance_threshold': self.min_balance_threshold
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_active_balancer():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    balancer = Active5050Balancer()
    asyncio.run(balancer.start_monitoring())

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    balancer = Active5050Balancer()
    asyncio.run(balancer.start_monitoring())
