#!/usr/bin/env python3
"""
–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
"""

import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RealPnLCalculator:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ USD)
        self.min_profit_usd = 0.01  # $0.01 - –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        
        # –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        self.analysis_days = 30
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.info(f"Telegram: {message}")
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_order_history_for_symbol(self, symbol: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            end_time = int(time.time() * 1000)
            start_time = end_time - (self.analysis_days * 24 * 60 * 60 * 1000)
            
            orders = self.mex_api.get_order_history(symbol=symbol, limit=1000)
            
            if not isinstance(orders, list):
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –Ω—É–∂–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            filtered_orders = []
            for order in orders:
                if order.get('status') == 'FILLED':
                    order_time = int(order.get('time', 0))
                    if start_time <= order_time <= end_time:
                        filtered_orders.append(order)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(filtered_orders)} –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
            return filtered_orders
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return []
    
    def calculate_symbol_pnl(self, symbol: str, current_balance: float) -> Optional[Dict]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            orders = self.get_order_history_for_symbol(symbol)
            if not orders:
                return None
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            buys = []
            sells = []
            
            for order in orders:
                side = order.get('side', '').upper()
                price = float(order.get('price', 0))
                quantity = float(order.get('executedQty', 0))
                time_ms = int(order.get('time', 0))
                
                if side == 'BUY' and quantity > 0:
                    buys.append({
                        'price': price,
                        'quantity': quantity,
                        'time': time_ms,
                        'value': price * quantity
                    })
                elif side == 'SELL' and quantity > 0:
                    sells.append({
                        'price': price,
                        'quantity': quantity,
                        'time': time_ms,
                        'value': price * quantity
                    })
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
            total_buy_quantity = sum(buy['quantity'] for buy in buys)
            total_buy_value = sum(buy['value'] for buy in buys)
            
            if total_buy_quantity == 0:
                return None
            
            avg_buy_price = total_buy_value / total_buy_quantity
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.get_current_price(symbol)
            if not current_price:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            current_value = current_balance * current_price
            total_invested = current_balance * avg_buy_price
            
            pnl_usd = current_value - total_invested
            pnl_percent = (pnl_usd / total_invested * 100) if total_invested > 0 else 0
            
            return {
                'symbol': symbol,
                'current_balance': current_balance,
                'current_price': current_price,
                'avg_buy_price': avg_buy_price,
                'current_value': current_value,
                'total_invested': total_invested,
                'pnl_usd': pnl_usd,
                'pnl_percent': pnl_percent,
                'is_profitable': pnl_usd >= self.min_profit_usd,
                'buy_orders': len(buys),
                'sell_orders': len(sells)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {symbol}: {e}")
            return None
    
    def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.mex_api.get_ticker_price(symbol)
            if 'price' in ticker:
                return float(ticker['price'])
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None
    
    def get_account_balances(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return {}
            
            balances = {}
            for balance in account_info['balances']:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total > 0:  # –¢–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
                    balances[asset] = total
            
            return balances
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    def find_profitable_positions(self) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–ª—é—Å–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–ª—é—Å–µ (—Ä–µ–∞–ª—å–Ω—ã–π PnL)...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_account_balances()
            if not balances:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return []
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(balances)} –∞–∫—Ç–∏–≤–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º")
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
            excluded_assets = {'USDT', 'USDC', 'BUSD', 'TUSD', 'DAI', 'FRAX'}
            
            profitable_positions = []
            total_profit_usd = 0.0
            
            for asset, balance in balances.items():
                if asset in excluded_assets:
                    continue
                
                if balance < 0.0001:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –º–µ–ª–∫–∏–µ –±–∞–ª–∞–Ω—Å—ã
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                if asset == 'BTC':
                    symbol = 'BTCUSDT'
                elif asset == 'ETH':
                    symbol = 'ETHUSDC'
                else:
                    symbol = f'{asset}USDT'
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
                pnl_data = self.calculate_symbol_pnl(symbol, balance)
                
                if pnl_data and pnl_data['is_profitable']:
                    profitable_positions.append(pnl_data)
                    total_profit_usd += pnl_data['pnl_usd']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
            profitable_positions.sort(key=lambda x: x['pnl_usd'], reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(profitable_positions)} –ø–æ–∑–∏—Ü–∏–π –≤ –ø–ª—é—Å–µ")
            logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit_usd:.2f}")
            
            return profitable_positions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def format_profitable_positions_report(self, positions: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        if not positions:
            return "üìä <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å"
        
        total_profit = sum(pos['pnl_usd'] for pos in positions)
        total_value = sum(pos['current_value'] for pos in positions)
        total_invested = sum(pos['total_invested'] for pos in positions)
        
        report = f"üìà <b>–ü–†–ò–ë–´–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò (–†–ï–ê–õ–¨–ù–´–ô PnL)</b>\n\n"
        report += f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${total_profit:.2f}</b>\n"
        report += f"üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>${total_value:.2f}</b>\n"
        report += f"üíº –í–ª–æ–∂–µ–Ω–æ: <b>${total_invested:.2f}</b>\n"
        report += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <b>{len(positions)}</b>\n\n"
        
        report += "üîç <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
        report += "‚îÄ" * 50 + "\n"
        
        for i, pos in enumerate(positions[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            report += f"{i}. <b>{pos['symbol']}</b>\n"
            report += f"   üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${pos['current_value']:.2f}\n"
            report += f"   üìà –ü—Ä–∏–±—ã–ª—å: ${pos['pnl_usd']:.2f} ({pos['pnl_percent']:.1f}%)\n"
            report += f"   üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${pos['avg_buy_price']:.4f}\n"
            report += f"   üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${pos['current_price']:.4f}\n"
            report += f"   üî¢ –ë–∞–ª–∞–Ω—Å: {pos['current_balance']:.6f}\n"
            report += f"   üìã –û—Ä–¥–µ—Ä–∞: {pos['buy_orders']} –ø–æ–∫—É–ø–æ–∫, {pos['sell_orders']} –ø—Ä–æ–¥–∞–∂\n\n"
        
        if len(positions) > 10:
            report += f"... –∏ –µ—â–µ {len(positions) - 10} –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        report += f"‚è∞ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_days} –¥–Ω–µ–π\n"
        report += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        
        return report
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.find_profitable_positions()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.format_profitable_positions_report(positions)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            self.send_telegram_message(report)
            
            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print("\n" + "="*60)
            print("üìä –û–¢–ß–ï–¢ –û –ü–†–ò–ë–´–õ–¨–ù–´–• –ü–û–ó–ò–¶–ò–Ø–• (–†–ï–ê–õ–¨–ù–´–ô PnL)")
            print("="*60)
            print(report.replace('<b>', '').replace('</b>', ''))
            print("="*60)
            
            return positions
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            logger.error(error_msg)
            self.send_telegram_message(error_msg)
            return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    calculator = RealPnLCalculator()
    calculator.run_analysis()

if __name__ == "__main__":
    main()







