#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API
"""

from datetime import datetime
from mex_api import MexAPI
import json

def get_bot_history():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    api = MexAPI()
    
    print("ü§ñ –ü–û–õ–ù–ê–Ø –ò–°–¢–û–†–ò–Ø –†–ê–ë–û–¢–´ –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤...")
        
        # –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        symbols = [
            'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'ADAUSDT', 'XRPUSDT', 'DOGEUSDT', 'BNBUSDT', 'LTCUSDT', 'TRXUSDT', 'LINKUSDT',
            'AVAXUSDT', 'DOTUSDT', 'MATICUSDT', 'UNIUSDT', 'ATOMUSDT', 'NEARUSDT', 'FTMUSDT', 'ALGOUSDT', 'VETUSDT', 'ICPUSDT',
            'FILUSDT', 'THETAUSDT', 'XLMUSDT', 'HBARUSDT', 'MANAUSDT', 'SANDUSDT', 'AXSUSDT', 'GALAUSDT', 'ENJUSDT', 'CHZUSDT',
            'HOTUSDT', 'BTTUSDT', 'WINUSDT', 'CAKEUSDT', 'RUNEUSDT', 'EGLDUSDT', 'ONEUSDT', 'ZILUSDT', 'IOTAUSDT', 'NEOUSDT',
            'QTUMUSDT', 'ONTUSDT', 'ZECUSDT', 'DASHUSDT', 'XMRUSDT', 'BCHUSDT', 'ETCUSDT', 'LTCUSDT', 'BTGUSDT', 'BTSUSDT'
        ]
        
        all_orders = []
        
        for symbol in symbols:
            try:
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}...")
                # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –æ—Ä–¥–µ—Ä–æ–≤ –∏ —Å –Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
                orders = api.get_order_history(symbol=symbol, limit=1000)
                
                if isinstance(orders, list):
                    all_orders.extend(orders)
                    print(f"   ‚úÖ {symbol}: {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
                else:
                    print(f"   ‚ùå {symbol}: –æ—à–∏–±–∫–∞ API")
                    
            except Exception as e:
                print(f"   ‚ùå {symbol}: {e}")
                continue
        
        print(f"üìä –û—Ç–≤–µ—Ç API: {type(all_orders)}")
        if isinstance(all_orders, dict):
            print(f"üìä –ö–ª—é—á–∏: {list(all_orders.keys())}")
            if 'msg' in all_orders:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {all_orders['msg']}")
                return
        
        if not all_orders or not isinstance(all_orders, list):
            print("‚ùå –û—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(all_orders)}")
        
        # 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞
        buy_orders = []
        sell_orders = []
        total_buy_value = 0
        total_sell_value = 0
        
        print("\nüìä –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í:")
        print("-" * 30)
        
        for order in all_orders:
            order_time = datetime.fromtimestamp(order['time'] / 1000)
            side = order['side']
            status = order['status']
            symbol = order['symbol']
            
            if status == 'FILLED':
                quantity = float(order['executedQty'])
                price = float(order['price'])
                value = quantity * price
                
                print(f"üìã {order_time.strftime('%d.%m %H:%M:%S')} | {symbol} | {side}")
                print(f"   üí∞ –¶–µ–Ω–∞: ${price:.4f} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}")
                print(f"   üíµ –°—É–º–º–∞: ${value:.2f}")
                print()
                
                if side == 'BUY':
                    buy_orders.append({
                        'time': order_time,
                        'symbol': symbol,
                        'price': price,
                        'quantity': quantity,
                        'value': value
                    })
                    total_buy_value += value
                elif side == 'SELL':
                    sell_orders.append({
                        'time': order_time,
                        'symbol': symbol,
                        'price': price,
                        'quantity': quantity,
                        'value': value
                    })
                    total_sell_value += value
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
        print("üí∞ –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:")
        print("-" * 30)
        
        account_info = api.get_account_info()
        balances = account_info.get('balances', [])
        
        current_portfolio = {}
        total_portfolio_value = 0
        
        for balance in balances:
            free = float(balance['free'])
            locked = float(balance['locked'])
            total = free + locked
            
            if total > 0:
                asset = balance['asset']
                current_portfolio[asset] = total
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                if asset != 'USDT':
                    try:
                        ticker = api.get_ticker_price(f"{asset}USDT")
                        if ticker and 'price' in ticker:
                            price = float(ticker['price'])
                            value = total * price
                            total_portfolio_value += value
                            print(f"üìä {asset}: {total:.6f} @ ${price:.4f} = ${value:.2f}")
                        else:
                            print(f"üìä {asset}: {total:.6f} (—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)")
                    except:
                        print(f"üìä {asset}: {total:.6f} (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã)")
                else:
                    total_portfolio_value += total
                    print(f"üìä {asset}: {total:.2f}")
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 30)
        print(f"üü¢ –ü–æ–∫—É–ø–æ–∫: {len(buy_orders)}")
        print(f"üî¥ –ü—Ä–æ–¥–∞–∂: {len(sell_orders)}")
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${total_buy_value:.2f}")
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: ${total_sell_value:.2f}")
        print(f"üíº –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_portfolio_value:.2f}")
        
        # 5. –†–∞—Å—á–µ—Ç PnL
        realized_pnl = total_sell_value - total_buy_value
        unrealized_pnl = total_portfolio_value - total_buy_value
        total_pnl = realized_pnl + unrealized_pnl
        
        print(f"üìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${realized_pnl:.2f}")
        print(f"üìä –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: ${unrealized_pnl:.2f}")
        print(f"üìä –û–±—â–∏–π PnL: ${total_pnl:.2f}")
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        history_data = {
            'orders': {
                'buy': [order for order in buy_orders],
                'sell': [order for order in sell_orders]
            },
            'statistics': {
                'total_buy_value': total_buy_value,
                'total_sell_value': total_sell_value,
                'current_portfolio_value': total_portfolio_value,
                'realized_pnl': realized_pnl,
                'unrealized_pnl': unrealized_pnl,
                'total_pnl': total_pnl
            },
            'current_portfolio': current_portfolio,
            'generated_at': datetime.now().isoformat()
        }
        
        with open('bot_history.json', 'w', encoding='utf-8') as f:
            json.dump(history_data, f, indent=2, default=str)
        
        print(f"\nüíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: bot_history.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

if __name__ == "__main__":
    get_bot_history()
