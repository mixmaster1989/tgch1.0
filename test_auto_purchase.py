#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ BTC/ETH
"""

import asyncio
from balance_monitor import BalanceMonitor
from auto_purchase_config import get_config

def test_balance_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    print("üß™ –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ê –ë–ê–õ–ê–ù–°–ê")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = BalanceMonitor()
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = monitor.get_usdt_balance()
        print(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT: ${balance:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã BTC/ETH
        btc_price = monitor.get_current_price('BTCUSDT')
        eth_price = monitor.get_current_price('ETHUSDT')
        
        if btc_price:
            print(f"üìà –¶–µ–Ω–∞ BTC: ${btc_price:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC")
            
        if eth_price:
            print(f"üìà –¶–µ–Ω–∞ ETH: ${eth_price:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏
        if balance >= monitor.min_balance_threshold:
            print(f"\nüìä –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ ${balance:.2f}:")
            purchase_plan = monitor.calculate_purchase_amounts(balance)
            
            if purchase_plan:
                for symbol, data in purchase_plan.items():
                    print(f"   {symbol}:")
                    print(f"     üí∞ –°—É–º–º–∞: ${data['usdt_amount']:.2f}")
                    print(f"     üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']:.6f}")
                    print(f"     üíµ –¶–µ–Ω–∞: ${data['price']:.4f}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏")
        else:
            print(f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (${balance:.2f} < ${monitor.min_balance_threshold})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–∫—É–ø–∫–∏:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${monitor.min_balance_threshold}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${monitor.max_purchase_amount}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {monitor.balance_check_interval} —Å–µ–∫")
        print(f"   –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∫—É–ø–æ–∫: {monitor.min_purchase_interval} —Å–µ–∫")
        print(f"   BTC: {monitor.btc_allocation*100}% | ETH: {monitor.eth_allocation*100}%")
        
        can_purchase = monitor.can_make_purchase()
        print(f"   –ú–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å: {'‚úÖ' if can_purchase else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        config = get_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        sections = ['balance_monitor', 'allocation', 'orders', 'safety', 'notifications']
        for section in sections:
            if section in config:
                print(f"‚úÖ {section}: OK")
            else:
                print(f"‚ùå {section}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        balance_config = config['balance_monitor']
        allocation_config = config['allocation']
        
        print(f"\nüìä –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_config['min_balance_threshold']}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance_config['max_purchase_amount']}")
        print(f"   BTC: {allocation_config['btc_allocation']*100}%")
        print(f"   ETH: {allocation_config['eth_allocation']*100}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_purchase_simulation():
    """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏"""
    print("\nüß™ –¢–ï–°–¢ –°–ò–ú–£–õ–Ø–¶–ò–ò –ü–û–ö–£–ü–ö–ò")
    print("=" * 50)
    
    try:
        monitor = BalanceMonitor()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        test_balance = 50.0  # $50
        print(f"üí∞ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${test_balance}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏
        purchase_plan = monitor.calculate_purchase_amounts(test_balance)
        
        if purchase_plan:
            print("üìã –ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏:")
            total_spent = 0
            
            for symbol, data in purchase_plan.items():
                print(f"   {symbol}:")
                print(f"     üí∞ –°—É–º–º–∞: ${data['usdt_amount']:.2f}")
                print(f"     üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']:.6f}")
                print(f"     üíµ –¶–µ–Ω–∞: ${data['price']:.4f}")
                total_spent += data['usdt_amount']
            
            print(f"\nüí∏ –û–±—â–∞—è —Å—É–º–º–∞: ${total_spent:.2f}")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–∏–º—É–ª—è—Ü–∏–∏
            response = input("\n‚ùì –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É? (y/n): ")
            if response.lower() == 'y':
                print("üîÑ –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏...")
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)
                results = {
                    'success': True,
                    'timestamp': asyncio.get_event_loop().time(),
                    'available_usdt': test_balance,
                    'purchases': [],
                    'total_spent': total_spent
                }
                
                for symbol, data in purchase_plan.items():
                    results['purchases'].append({
                        'symbol': symbol,
                        'quantity': data['quantity'],
                        'usdt_amount': data['usdt_amount'],
                        'price': data['price'],
                        'order_id': f'SIM_{symbol}_{int(asyncio.get_event_loop().time())}'
                    })
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = monitor.format_purchase_report(results)
                print("\nüìã –û–¢–ß–ï–¢ –û –ü–û–ö–£–ü–ö–ï:")
                print("-" * 50)
                print(report)
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram
                telegram_response = input("\n‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Telegram? (y/n): ")
                if telegram_response.lower() == 'y':
                    result = monitor.send_telegram_message(report)
                    if result and result.get('ok'):
                        print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            else:
                print("‚è≠Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ü–û–ö–£–ü–û–ö")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config_ok = test_configuration()
    
    # –¢–µ—Å—Ç 2: –ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞
    monitor_ok = test_balance_monitor()
    
    # –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
    simulation_ok = await test_purchase_simulation()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if config_ok else '‚ùå'}")
    print(f"–ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞: {'‚úÖ' if monitor_ok else '‚ùå'}")
    print(f"–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∫—É–ø–∫–∏: {'‚úÖ' if simulation_ok else '‚ùå'}")
    
    if all([config_ok, monitor_ok, simulation_ok]):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python3 run_auto_purchase.py start")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    asyncio.run(main()) 