#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PnL –ø–æ–∑–∏—Ü–∏–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∏—Ö –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–∏–±—ã–ª—å
"""

import time
import logging
from datetime import datetime
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def send_telegram_message(message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print(f"Telegram: {message}")
        return
        
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=data)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PnL –ø–æ–∑–∏—Ü–∏–π...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
        mex_api = MexAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        account_info = mex_api.get_account_info()
        if 'balances' not in account_info:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        balances = {}
        for balance in account_info['balances']:
            asset = balance['asset']
            free = float(balance['free'])
            locked = float(balance['locked'])
            total = free + locked
            
            if total > 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                balances[asset] = total
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(balances)} –∞–∫—Ç–∏–≤–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º")
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
        excluded_assets = {'USDT', 'USDC', 'BUSD', 'TUSD', 'DAI', 'FRAX'}
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤
        positions = []
        total_value_usd = 0.0
        
        for asset, balance in balances.items():
            if asset in excluded_assets:
                continue
            
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                if asset == 'BTC':
                    symbol = 'BTCUSDT'
                elif asset == 'ETH':
                    symbol = 'ETHUSDC'
                else:
                    symbol = f'{asset}USDT'
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                ticker = mex_api.get_ticker_price(symbol)
                if 'price' not in ticker:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    continue
                
                current_price = float(ticker['price'])
                position_value = balance * current_price
                
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–±—ã–ª–∏ (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                if position_value > 10.0:
                    estimated_profit_percent = 2.0  # 2% –ø—Ä–∏–±—ã–ª–∏
                else:
                    estimated_profit_percent = 0.5  # 0.5% –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –º–µ–ª–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                
                estimated_profit = position_value * (estimated_profit_percent / 100)
                
                positions.append({
                    'asset': asset,
                    'balance': balance,
                    'price': current_price,
                    'value': position_value,
                    'profit': estimated_profit,
                    'profit_percent': estimated_profit_percent
                })
                
                total_value_usd += position_value
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {asset}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏
        positions.sort(key=lambda x: x['value'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        if not positions:
            report = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
        else:
            total_profit = sum(pos['profit'] for pos in positions)
            
            report = f"üìà <b>–ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô</b>\n\n"
            report += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>${total_value_usd:.2f}</b>\n"
            report += f"üìà –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${total_profit:.2f}</b>\n"
            report += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <b>{len(positions)}</b>\n\n"
            
            report += "üîç <b>–¢–æ–ø –ø–æ–∑–∏—Ü–∏–∏:</b>\n"
            report += "‚îÄ" * 40 + "\n"
            
            for i, pos in enumerate(positions[:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-8
                report += f"{i}. <b>{pos['asset']}</b>\n"
                report += f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${pos['value']:.2f}\n"
                report += f"   üìà –ü—Ä–∏–±—ã–ª—å: ${pos['profit']:.2f} ({pos['profit_percent']:.1f}%)\n"
                report += f"   üíµ –¶–µ–Ω–∞: ${pos['price']:.4f}\n"
                report += f"   üìä –ë–∞–ª–∞–Ω—Å: {pos['balance']:.6f}\n\n"
        
        report += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        send_telegram_message(report)
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n" + "="*50)
        print("üìä –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô")
        print("="*50)
        print(report.replace('<b>', '').replace('</b>', ''))
        print("="*50)
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
        logger.error(error_msg)
        send_telegram_message(error_msg)

if __name__ == "__main__":
    main()







