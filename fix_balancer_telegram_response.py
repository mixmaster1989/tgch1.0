#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
"""

def fix_balancer_telegram_response():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('active_50_50_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ check_purchase_permission
    old_method = '''    def check_purchase_permission(self, purchase_amount: float, purchase_type: str = "ALTS") -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤ —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = self.get_portfolio_values()
            
            if portfolio['total_value'] <= 0:
                return {
                    'allowed': False,
                    'reason': '–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    'current_alts_ratio': 0.0,
                    'current_btceth_ratio': 0.0
                }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            alts_ratio = portfolio['alts_value'] / portfolio['total_value']
            btceth_ratio = portfolio['btceth_value_usdt'] / portfolio['total_value']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            alts_deviation_percent = abs(alts_ratio - self.target_alts_ratio) / self.target_alts_ratio
            btceth_deviation_percent = abs(btceth_ratio - self.target_btceth_ratio) / self.target_btceth_ratio
            
            # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 10% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
            if alts_deviation_percent < self.min_deviation_threshold and btceth_deviation_percent < self.min_deviation_threshold:
                return {
                    'allowed': True,
                    'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                    'current_alts_ratio': alts_ratio,
                    'current_btceth_ratio': btceth_ratio
                }
            
            # –ï—Å–ª–∏ –∞–ª—å—Ç–æ–≤ –±–æ–ª—å—à–µ 50% - –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
            if alts_ratio > self.target_alts_ratio and purchase_type == "ALTS":
                return {
                    'allowed': False,
                    'reason': f'–ê–ª—å—Ç–æ–≤ —É–∂–µ {alts_ratio*100:.1f}% > 50% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {alts_deviation_percent*100:.1f}%)',
                    'current_alts_ratio': alts_ratio,
                    'current_btceth_ratio': btceth_ratio
                }
            
            # –ï—Å–ª–∏ BTC/ETH –±–æ–ª—å—à–µ 50% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
            if btceth_ratio > self.target_btceth_ratio and purchase_type == "ALTS":
                return {
                    'allowed': True,
                    'reason': f'BTC/ETH {btceth_ratio*100:.1f}% > 50%, –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∞–ª—å—Ç—ã',
                    'current_alts_ratio': alts_ratio,
                    'current_btceth_ratio': btceth_ratio
                }
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
            return {
                'allowed': True,
                'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                'current_alts_ratio': alts_ratio,
                'current_btceth_ratio': btceth_ratio
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
            return {
                'allowed': False,
                'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}',
                'current_alts_ratio': 0.0,
                'current_btceth_ratio': 0.0
            }'''
    
    new_method = '''    def check_purchase_permission(self, purchase_amount: float, purchase_type: str = "ALTS") -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤ —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio = self.get_portfolio_values()
            
            if portfolio['total_value'] <= 0:
                result = {
                    'allowed': False,
                    'reason': '–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    'current_alts_ratio': 0.0,
                    'current_btceth_ratio': 0.0
                }
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                alts_ratio = portfolio['alts_value'] / portfolio['total_value']
                btceth_ratio = portfolio['btceth_value_usdt'] / portfolio['total_value']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                alts_deviation_percent = abs(alts_ratio - self.target_alts_ratio) / self.target_alts_ratio
                btceth_deviation_percent = abs(btceth_ratio - self.target_btceth_ratio) / self.target_btceth_ratio
                
                # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 10% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
                if alts_deviation_percent < self.min_deviation_threshold and btceth_deviation_percent < self.min_deviation_threshold:
                    result = {
                        'allowed': True,
                        'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ï—Å–ª–∏ –∞–ª—å—Ç–æ–≤ –±–æ–ª—å—à–µ 50% - –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
                elif alts_ratio > self.target_alts_ratio and purchase_type == "ALTS":
                    result = {
                        'allowed': False,
                        'reason': f'–ê–ª—å—Ç–æ–≤ —É–∂–µ {alts_ratio*100:.1f}% > 50% (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {alts_deviation_percent*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ï—Å–ª–∏ BTC/ETH –±–æ–ª—å—à–µ 50% - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
                elif btceth_ratio > self.target_btceth_ratio and purchase_type == "ALTS":
                    result = {
                        'allowed': True,
                        'reason': f'BTC/ETH {btceth_ratio*100:.1f}% > 50%, –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∞–ª—å—Ç—ã',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
                
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º
                else:
                    result = {
                        'allowed': True,
                        'reason': f'–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ (–ê–ª—å—Ç—ã: {alts_ratio*100:.1f}%, BTC/ETH: {btceth_ratio*100:.1f}%)',
                        'current_alts_ratio': alts_ratio,
                        'current_btceth_ratio': btceth_ratio
                    }
            
            # üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
            status_icon = "‚úÖ" if result['allowed'] else "üö´"
            status_text = "–†–ê–ó–†–ï–®–ï–ù–û" if result['allowed'] else "–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
            
            response_message = (
                f"{status_icon} <b>–û–¢–í–ï–¢ –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê: {status_text}</b>\\n\\n"
                f"üí∞ –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: ${purchase_amount:.2f}\\n"
                f"üìä –¢–∏–ø: {purchase_type}\\n\\n"
                f"üìà <b>–¢–ï–ö–£–©–ò–ï –ü–†–û–ü–û–†–¶–ò–ò:</b>\\n"
                f"–ê–ª—å—Ç—ã: {result['current_alts_ratio']*100:.1f}%\\n"
                f"BTC/ETH: {result['current_btceth_ratio']*100:.1f}%\\n\\n"
                f"üìù <b>–ü–†–ò–ß–ò–ù–ê:</b>\\n"
                f"{result['reason']}\\n\\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            try:
                self.send_telegram_message(response_message)
                logger.info(f"üì± –û—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {status_text}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: {e}")
            error_result = {
                'allowed': False,
                'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}',
                'current_alts_ratio': 0.0,
                'current_btceth_ratio': 0.0
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = (
                f"‚ùå <b>–û–®–ò–ë–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê</b>\\n\\n"
                f"üí∞ –°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞: ${purchase_amount:.2f}\\n"
                f"üìä –¢–∏–ø: {purchase_type}\\n\\n"
                f"üö´ <b>–û–®–ò–ë–ö–ê:</b>\\n"
                f"{e}\\n\\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            try:
                self.send_telegram_message(error_message)
            except Exception:
                pass
            
            return error_result'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    content = content.replace(old_method, new_method)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('active_50_50_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ active_50_50_balancer.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")

if __name__ == "__main__":
    fix_balancer_telegram_response()
