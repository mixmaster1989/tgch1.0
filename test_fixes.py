#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ balance_monitor –∏ pnl_monitor
"""

import asyncio
import logging
from balance_monitor import BalanceMonitor
from pnl_monitor import PnLMonitor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_balance_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    print("üîç –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ê –ë–ê–õ–ê–ù–°–ê")
    print("=" * 40)
    
    monitor = BalanceMonitor()
    
    # –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–æ–≤
    usdt = monitor.get_usdt_balance()
    usdc = monitor.get_usdc_balance()
    
    print(f"üí∞ USDT –±–∞–ª–∞–Ω—Å: ${usdt:.2f}")
    print(f"üí∞ USDC –±–∞–ª–∞–Ω—Å: ${usdc:.2f}")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–π –∏–∑ –±–∞–ª–∞–Ω—Å–æ–≤)
    test_amount = max(usdt, usdc)
    print(f"\nüßÆ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ ${test_amount:.2f}:")
    purchase_plan = monitor.calculate_purchase_amounts(test_amount)
    
    for symbol, data in purchase_plan.items():
        print(f"   {symbol}:")
        print(f"      –°—É–º–º–∞: ${data['usdc_amount']:.2f}")
        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']:.6f}")
        print(f"      –¶–µ–Ω–∞: ${data['price']:.4f}")
    
    return purchase_plan

def test_pnl_monitor():
    """–¢–µ—Å—Ç PnL –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    print("\nüîç –¢–ï–°–¢ PnL –ú–û–ù–ò–¢–û–†–ê")
    print("=" * 40)
    
    monitor = PnLMonitor()
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    status = monitor.get_current_status()
    
    print(f"üìä –û–±—â–∏–π PnL: ${status['total_pnl']:.4f}")
    print(f"üéØ –ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏: ${status['profit_threshold']}")
    print(f"‚ö° –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if status['auto_sell_enabled'] else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
    balances = monitor.get_balances()
    print(f"\nüíº –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(balances)}")
    
    for asset in ['BTC', 'ETH']:
        if asset in balances:
            quantity = balances[asset]['total']
            symbol = 'BTCUSDC' if asset == 'BTC' else 'ETHUSDC'
            price = monitor.get_current_price(symbol)
            pnl = monitor.calculate_pnl(asset, quantity, price) if price else 0
            
            print(f"   {asset}: {quantity:.6f} | PnL: ${pnl:.4f}")
            
            if pnl > monitor.profit_threshold:
                print(f"      üéØ –ì–û–¢–û–í –ö –ü–†–û–î–ê–ñ–ï! (PnL > ${monitor.profit_threshold})")
    
    return status

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
        purchase_plan = await test_balance_monitor()
        
        # –¢–µ—Å—Ç PnL –º–æ–Ω–∏—Ç–æ—Ä–∞
        pnl_status = test_pnl_monitor()
        
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if purchase_plan:
            total_purchase = sum(data['usdc_amount'] for data in purchase_plan.values())
            print(f"üí∞ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ –Ω–∞: ${total_purchase:.2f}")
            print(f"üìä –¢–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(purchase_plan)}")
        
        if pnl_status['total_pnl'] > pnl_status['profit_threshold']:
            print(f"üéØ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∂–µ! PnL ${pnl_status['total_pnl']:.4f} > ${pnl_status['profit_threshold']}")
        
        print("\nüéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 