#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –≤ main.py
"""

import asyncio
import logging
import threading
import time
from main import start_scalper_manager, start_balance_monitor, start_pnl_monitor
from scalper_manager import ScalperManager, get_scalper_protected_balance

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_main_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py"""
    try:
        print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° MAIN.PY")
        print("=" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ start_scalper_manager()...")
        start_scalper_manager()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        manager = ScalperManager()
        status = manager.get_manager_status()
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
        print(f"   BTC –∞–∫—Ç–∏–≤–Ω—ã—Ö: {status.get('btc_active', 0)}")
        print(f"   BTC –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö: {status.get('btc_stuck', 0)}")
        print(f"   ETH –∞–∫—Ç–∏–≤–Ω—ã—Ö: {status.get('eth_active', 0)}")
        print(f"   ETH –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö: {status.get('eth_stuck', 0)}")
        print(f"   –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {status.get('total_created', 0)}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${status.get('total_profit', 0):.3f}")
        print(f"   –ë–∞–ª–∞–Ω—Å USDC: ${status.get('usdc_balance', 0):.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...")
        protected_balance = get_scalper_protected_balance()
        print(f"üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${protected_balance:.2f} USDC")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main.py
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π main.py...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        print("   ‚úÖ start_balance_monitor() - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        print("   ‚úÖ start_pnl_monitor() - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        print("   ‚úÖ start_scalper_manager() - —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_scalper_manager_standalone():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    try:
        print("\nüîß –¢–ï–°–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê –°–ö–ê–õ–¨–ü–ï–†–û–í –û–¢–î–ï–õ–¨–ù–û")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = ScalperManager()
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: ${manager.min_usdc_balance_after_scalper:.2f} USDC")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${manager.position_size_usdc:.2f} USDC")
        print(f"   –ú–∞–∫—Å–∏–º—É–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {manager.max_instances_per_symbol} –Ω–∞ —Å–∏–º–≤–æ–ª")
        print(f"   –í—Ä–µ–º—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è: {manager.min_stuck_time/3600:.1f} —á–∞—Å–æ–≤")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {manager.scan_interval} —Å–µ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
        btc_price = manager.get_current_price('BTCUSDC')
        eth_price = manager.get_current_price('ETHUSDC')
        
        print(f"\nüìà –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:")
        print(f"   BTCUSDC: ${btc_price:.2f}")
        print(f"   ETHUSDC: ${eth_price:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è:")
        for symbol in ['BTCUSDC', 'ETHUSDC']:
            can_create, reason = manager.can_create_new_scalper(symbol)
            status = "‚úÖ –ú–û–ñ–ù–û" if can_create else "‚ùå –ù–ï–õ–¨–ó–Ø"
            print(f"   {symbol}: {status} - {reason}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")

def test_integration_scenarios():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    try:
        print("\nüé≠ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–ï–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 40)
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        print("   - –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å main.py")
        print("   - –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã")
        print("   - –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤")
        print("   - BTC/ETH –ø—Ä–æ—Å–µ–ª–∏ –Ω–∞ 10%")
        print("   - –°–∫–∞–ª—å–ø–µ—Ä—ã –∑–∞—Å—Ç—Ä—è–ª–∏")
        print("   - –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞")
        print("   - –ú–∏–Ω–∏–º—É–º $20 USDC –æ—Å—Ç–∞–µ—Ç—Å—è")
        print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å—É–º–º")
        print("   - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã")
        print("   - –î–æ 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –Ω–∞ —Å–∏–º–≤–æ–ª")
        print("   - –†–∞–∑–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞")
        print("   - –ù–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        print("\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")

if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py
    asyncio.run(test_main_integration())
    
    # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
    test_scalper_manager_standalone()
    
    # –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    test_integration_scenarios()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!")
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –±–æ—Ç: python3 main.py")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤")
    print("3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")







