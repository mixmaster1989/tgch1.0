#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è BTC/ETH –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
"""

from mex_api import MexAPI
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_real_allocation():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BTC/ETH"""
    try:
        api = MexAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = api.get_account_info()
        
        btc_balance = 0.0
        eth_balance = 0.0
        usdc_balance = 0.0
        usdt_balance = 0.0
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã...")
        
        for balance in account_info.get('balances', []):
            asset = balance['asset']
            free = float(balance['free'])
            locked = float(balance['locked'])
            total = free + locked
            
            if total > 0:
                print(f"   {asset}: {total:.6f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:.6f}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:.6f})")
                
                if asset == 'BTC':
                    btc_balance = total
                elif asset == 'ETH':
                    eth_balance = total
                elif asset == 'USDC':
                    usdc_balance = total
                elif asset == 'USDT':
                    usdt_balance = total
        
        print(f"\nüí∞ –ë–∞–ª–∞–Ω—Å—ã —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤:")
        print(f"   USDC: ${usdc_balance:.2f}")
        print(f"   USDT: ${usdt_balance:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        btc_price_usdc = api.get_ticker_price('BTCUSDC')
        eth_price_usdc = api.get_ticker_price('ETHUSDC')
        
        if 'price' in btc_price_usdc and 'price' in eth_price_usdc:
            btc_price = float(btc_price_usdc['price'])
            eth_price = float(eth_price_usdc['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ USDC
            btc_value_usdc = btc_balance * btc_price
            eth_value_usdc = eth_balance * eth_price
            
            total_crypto_usdc = btc_value_usdc + eth_value_usdc
            total_portfolio_usdc = total_crypto_usdc + usdc_balance + usdt_balance
            
            print(f"\nüìä –†–ï–ê–õ–¨–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï BTC/ETH:")
            print(f"   BTC: {btc_balance:.6f} √ó ${btc_price:.2f} = ${btc_value_usdc:.2f}")
            print(f"   ETH: {eth_balance:.6f} √ó ${eth_price:.2f} = ${eth_value_usdc:.2f}")
            print(f"   –í—Å–µ–≥–æ –∫—Ä–∏–ø—Ç—ã: ${total_crypto_usdc:.2f}")
            
            if total_crypto_usdc > 0:
                btc_percent = (btc_value_usdc / total_crypto_usdc) * 100
                eth_percent = (eth_value_usdc / total_crypto_usdc) * 100
                
                print(f"\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢:")
                print(f"   BTC: {btc_percent:.1f}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 60%)")
                print(f"   ETH: {eth_percent:.1f}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 40%)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                btc_deviation = abs(btc_percent - 60)
                eth_deviation = abs(eth_percent - 40)
                
                print(f"\n‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ò–ï –û–¢ –¶–ï–õ–ò:")
                print(f"   BTC: {btc_deviation:.1f}% –æ—Ç –Ω–æ—Ä–º—ã")
                print(f"   ETH: {eth_deviation:.1f}% –æ—Ç –Ω–æ—Ä–º—ã")
                
                if btc_deviation > 10 or eth_deviation > 10:
                    print(f"\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê!")
                    print(f"   –ù—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å ETH –Ω–∞ ${(total_crypto_usdc * 0.4) - eth_value_usdc:.2f}")
                else:
                    print(f"\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ!")
            
            print(f"\nüíº –û–ë–©–ò–ô –ü–û–†–¢–§–ï–õ–¨:")
            print(f"   –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: ${total_crypto_usdc:.2f}")
            print(f"   –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã: ${usdc_balance + usdt_balance:.2f}")
            print(f"   –í–°–ï–ì–û: ${total_portfolio_usdc:.2f}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã BTC/ETH")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    check_real_allocation() 