import logging
import asyncio
import json
import os
import sys
import traceback
from datetime import datetime
from .config import crypto_config
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π —Å—Ç–µ–∫–∞
def log_exception(e, message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    logger.error(f"{message}: {str(e)}")
    logger.error(traceback.format_exc())

class SignalDispatcher:
    """
    –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    """
    def __init__(self, bot=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        """
        self.bot = bot
        self.config = crypto_config
        self.signals_enabled = self.config.get('signals', {}).get('enabled', True)
        self.channel_id = self.config.get('signals', {}).get('channel_id')
        self.include_charts = self.config.get('signals', {}).get('include_charts', True)
        
        # –ö—ç—à –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        self.sent_signals = {}
        self.cooldown = self.config.get('signals', {}).get('notification_cooldown', 3600)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.charts_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'data', 'charts')
        os.makedirs(self.charts_dir, exist_ok=True)
    
    def set_bot(self, bot):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
        """
        self.bot = bot
    
    async def dispatch_signals(self, analysis_results):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            analysis_results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        """
        if not self.signals_enabled or not self.channel_id or not self.bot:
            logger.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            return 0
        
        sent_count = 0
        
        for pair, results in analysis_results.items():
            signals = results.get("signals", [])
            
            if not signals:
                continue
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø—É
            grouped_signals = {}
            for signal in signals:
                signal_type = signal.get("type")
                if signal_type not in grouped_signals:
                    grouped_signals[signal_type] = []
                grouped_signals[signal_type].append(signal)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            for signal_type, type_signals in grouped_signals.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
                long_count = sum(1 for s in type_signals if s.get("direction") == "long")
                short_count = sum(1 for s in type_signals if s.get("direction") == "short")
                
                direction = "long" if long_count > short_count else "short"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞
                cooldown_key = f"{pair}_{signal_type}_{direction}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–∞–∫–æ–µ –∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                current_time = datetime.now().timestamp()
                last_sent_time = self.sent_signals.get(cooldown_key, 0)
                
                if current_time - last_sent_time < self.cooldown:
                    logger.info(f"–°–∏–≥–Ω–∞–ª {cooldown_key} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—É–ª–¥–∞—É–Ω–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._format_signal_message(pair, results["price"], signal_type, type_signals, direction)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if self.include_charts:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
                        chart_path = await self._generate_chart(pair, direction)
                        
                        if chart_path:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                            with open(chart_path, 'rb') as photo:
                                await self.bot.send_photo(
                                    chat_id=self.channel_id,
                                    photo=photo,
                                    caption=message
                                )
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                            await self.bot.send_message(
                                chat_id=self.channel_id,
                                text=message
                            )
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.bot.send_message(
                            chat_id=self.channel_id,
                            text=message
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    self.sent_signals[cooldown_key] = current_time
                    sent_count += 1
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª {cooldown_key}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ {cooldown_key}: {e}")
        
        return sent_count
    
    def _format_signal_message(self, pair, price, signal_type, signals, direction):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–æ–º
        
        Args:
            pair (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            signal_type (str): –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            signals (list): –°–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
            direction (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (long/short)
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "üü¢" if direction == "long" else "üî¥"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        header = f"{direction_emoji} **{pair}** - {direction.upper()} SIGNAL\n\n"
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
        price_text = f"üí∞ Current Price: ${price:.2f}\n\n"
        
        # –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        signal_type_text = ""
        if signal_type == "volume_spike":
            signal_type_text = "üìä Volume Spike Detected"
        elif signal_type == "open_interest_change":
            signal_type_text = "üìà Open Interest Change"
        elif signal_type == "funding_rate":
            signal_type_text = "üí∏ Funding Rate Signal"
        elif signal_type == "whale_transaction":
            signal_type_text = "üêã Whale Transaction"
        elif signal_type == "liquidity_zone":
            signal_type_text = "üíß Liquidity Zone"
        else:
            signal_type_text = f"üìä {signal_type.replace('_', ' ').title()}"
        
        # –î–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
        details = ""
        
        if signal_type == "volume_spike":
            # –ë–µ—Ä–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –æ–±—ä–µ–º–∞
            strongest_signal = max(signals, key=lambda s: s.get("ratio", 0))
            volume = strongest_signal.get("volume", 0)
            avg_volume = strongest_signal.get("avg_volume", 0)
            ratio = strongest_signal.get("ratio", 0)
            timeframe = strongest_signal.get("timeframe", "")
            
            details = (
                f"Timeframe: {timeframe}\n"
                f"Volume: ${volume:,.0f}\n"
                f"Avg Volume: ${avg_volume:,.0f}\n"
                f"Ratio: {ratio:.2f}x"
            )
        
        elif signal_type == "open_interest_change":
            # –ë–µ—Ä–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            strongest_signal = max(signals, key=lambda s: abs(s.get("change_percent", 0)))
            current_oi = strongest_signal.get("current_oi", 0)
            previous_oi = strongest_signal.get("previous_oi", 0)
            change_percent = strongest_signal.get("change_percent", 0)
            
            details = (
                f"Current OI: {current_oi:,.0f}\n"
                f"Previous OI: {previous_oi:,.0f}\n"
                f"Change: {change_percent:+.2f}%"
            )
        
        elif signal_type == "funding_rate":
            # –ë–µ—Ä–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—Ç–∞–≤–∫–æ–π
            strongest_signal = max(signals, key=lambda s: abs(s.get("funding_rate", 0)))
            funding_rate = strongest_signal.get("funding_rate", 0)
            
            details = f"Funding Rate: {funding_rate:+.4f}%"
        
        elif signal_type == "whale_transaction":
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            total_amount = sum(s.get("amount", 0) for s in signals)
            total_amount_usd = sum(s.get("amount_usd", 0) for s in signals)
            tx_count = len(signals)
            
            details = (
                f"Transactions: {tx_count}\n"
                f"Total Amount: {total_amount:.4f} {pair.replace('USDT', '')}\n"
                f"Total USD: ${total_amount_usd:,.2f}"
            )
        
        elif signal_type == "liquidity_zone":
            # –ë–µ—Ä–µ–º —Å–∏–≥–Ω–∞–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º
            strongest_signal = max(signals, key=lambda s: s.get("volume", 0))
            price_level = strongest_signal.get("price_level", 0)
            volume = strongest_signal.get("volume", 0)
            distance_percent = strongest_signal.get("distance_percent", 0)
            
            details = (
                f"Price Level: ${price_level:.2f}\n"
                f"Volume: ${volume:,.0f}\n"
                f"Distance: {distance_percent:.2f}% from current price"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{header}{price_text}{signal_type_text}\n\n{details}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if direction == "long":
            message += "üîº Potential upward movement expected"
        else:
            message += "üîΩ Potential downward movement expected"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
        message += "\n\n‚ö†Ô∏è This is not financial advice. Trade at your own risk."
        
        return message
    
    async def _generate_chart(self, pair, direction):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        
        Args:
            pair (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            direction (str): –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (long/short)
            
        Returns:
            str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            from .data_sources import BinanceDataSource
            binance = BinanceDataSource()
            await binance.initialize()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è 1-–¥–Ω–µ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            klines = await binance.get_klines(pair, "1d", limit=30)
            
            if not klines:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ {pair}")
                await binance.close()
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            dates = [datetime.fromtimestamp(k["open_time"]/1000) for k in klines]
            opens = [k["open"] for k in klines]
            highs = [k["high"] for k in klines]
            lows = [k["low"] for k in klines]
            closes = [k["close"] for k in klines]
            volumes = [k["volume"] for k in klines]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), gridspec_kw={'height_ratios': [3, 1]})
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
            up_color = 'green'
            down_color = 'red'
            
            # –†–∏—Å—É–µ–º —Å–≤–µ—á–∏
            for i in range(len(dates)):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–≤–µ—á–∏
                if closes[i] >= opens[i]:
                    color = up_color
                    body_bottom = opens[i]
                    body_top = closes[i]
                else:
                    color = down_color
                    body_bottom = closes[i]
                    body_top = opens[i]
                
                # –†–∏—Å—É–µ–º —Ç–µ–ª–æ —Å–≤–µ—á–∏
                ax1.add_patch(plt.Rectangle((i-0.4, body_bottom), 0.8, body_top-body_bottom, fill=True, color=color))
                
                # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∏ –Ω–∏–∂–Ω–∏–π —Ñ–∏—Ç–∏–ª–∏
                ax1.plot([i, i], [body_top, highs[i]], color=color, linewidth=1)
                ax1.plot([i, i], [body_bottom, lows[i]], color=color, linewidth=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–º—ã
            for i in range(len(dates)):
                if closes[i] >= opens[i]:
                    ax2.bar(i, volumes[i], color=up_color, alpha=0.7, width=0.8)
                else:
                    ax2.bar(i, volumes[i], color=down_color, alpha=0.7, width=0.8)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
            ax1.set_xticks(range(0, len(dates), 5))
            ax1.set_xticklabels([d.strftime('%Y-%m-%d') for d in dates[::5]], rotation=45)
            ax1.grid(True, alpha=0.3)
            ax1.set_title(f"{pair} - {direction.upper()} Signal", fontsize=14)
            
            ax2.set_xticks(range(0, len(dates), 5))
            ax2.set_xticklabels([d.strftime('%Y-%m-%d') for d in dates[::5]], rotation=45)
            ax2.grid(True, alpha=0.3)
            ax2.set_ylabel('Volume')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            ma20 = np.convolve(closes, np.ones(20)/20, mode='valid')
            ma50 = np.convolve(closes, np.ones(50)/50, mode='valid')
            
            if len(ma20) > 0:
                ax1.plot(range(19, len(closes)), ma20, color='blue', linewidth=1.5, label='MA20')
            
            if len(ma50) > 0:
                ax1.plot(range(49, len(closes)), ma50, color='orange', linewidth=1.5, label='MA50')
            
            ax1.legend()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = closes[-1]
            ax1.axhline(y=current_price, color='black', linestyle='--', alpha=0.7)
            ax1.text(len(dates)-1, current_price, f" ${current_price:.2f}", va='center')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_filename = f"{pair}_{direction}_{int(datetime.now().timestamp())}.png"
            chart_path = os.path.join(self.charts_dir, chart_filename)
            plt.savefig(chart_path)
            plt.close(fig)
            
            await binance.close()
            
            return chart_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None