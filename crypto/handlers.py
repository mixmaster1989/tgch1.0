"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from .models import CryptoSignal, SignalType, SignalDirection
from .notification.alert_service import AlertService
from .user_settings.user_preferences import UserPreferences
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ Santiment API
from .data_sources.crypto_data_manager import get_data_manager
from .data_sources.santiment_api import SantimentAPI

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.handlers')

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_bot = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
alert_service = AlertService()
user_preferences = UserPreferences()

def set_bot(bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    """
    global _bot
    _bot = bot
    alert_service.set_bot(bot)
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")

@router.message(Command("test_santiment"))
async def cmd_test_santiment(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_santiment
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Santiment API –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_manager = get_data_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç Santiment
        if not data_manager.santiment:
            await message.reply("–ö–ª–∏–µ–Ω—Ç Santiment API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        status_message = await message.reply("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Santiment API...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ dev_activity –¥–ª—è Bitcoin
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ dev_activity –¥–ª—è Bitcoin –∏–∑ Santiment API")
        dev_activity = await data_manager.santiment.get_dev_activity("bitcoin", days=7)
        
        if not dev_activity:
            await status_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Santiment API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        avg_value = sum(item["value"] for item in dev_activity) / len(dev_activity)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Santiment API\n\n"
            f"–ü–æ–ª—É—á–µ–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (dev_activity) –¥–ª—è Bitcoin –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            f"–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {avg_value:.2f}\n\n"
            f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:\n"
            f"–î–∞—Ç–∞: {datetime.fromisoformat(dev_activity[-1]['timestamp']).strftime('%Y-%m-%d')}\n"
            f"–ó–Ω–∞—á–µ–Ω–∏–µ: {dev_activity[-1]['value']:.2f}\n\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        await status_message.edit_text(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Santiment API: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Santiment API: {str(e)}")

@router.message(Command("crypto_mode"))
async def cmd_crypto_mode(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_mode
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    import yaml
    import os
    
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.yaml')
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
        
        admin_id = config.get("admin_id")
        admins = config.get("admins", [])
        allowed_users = config.get("allowed_users", [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—é
        if message.from_user.id != admin_id and message.from_user.id not in admins and message.from_user.id not in allowed_users:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
    builder.button(text="üìà Smart Money", callback_data="crypto_smart_money")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
    builder.adjust(1)
    
    await message.answer(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.message(Command("crypto_alerts"))
async def cmd_crypto_alerts(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_alerts
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    """
    user_id = message.from_user.id
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await alert_service.subscribe_user(user_id, message.chat.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_enable")
    builder.button(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_disable")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="crypto_alerts_settings")
    builder.button(text="üìã –ú–æ–∏ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_alerts_coins")
    builder.button(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="crypto_alerts_test")
    builder.adjust(1)
    
    await message.answer(
        "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:\n"
        "‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (>5% –∑–∞ —á–∞—Å)\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts_enable")
async def callback_alerts_enable(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await user_preferences.get_user_settings(user_id)
    
    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings['notifications']['price_change'] = True
    settings['notifications']['psychological_levels'] = True
    settings['notifications']['volume_spikes'] = True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await user_preferences.save_user_settings(user_id, settings)
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await alert_service.subscribe_user(user_id, callback.message.chat.id)
    await alert_service.update_user_settings(user_id, settings)
    
    await callback.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    await callback.message.edit_text(
        "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö*\n\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç.",
        reply_markup=callback.message.reply_markup,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts_disable")
async def callback_alerts_disable(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await user_preferences.get_user_settings(user_id)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings['notifications']['price_change'] = False
    settings['notifications']['psychological_levels'] = False
    settings['notifications']['volume_spikes'] = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await user_preferences.save_user_settings(user_id, settings)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await alert_service.update_user_settings(user_id, settings)
    
    await callback.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
    await callback.message.edit_text(
        "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö*\n\n"
        "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=callback.message.reply_markup,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts_settings")
async def callback_alerts_settings(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await user_preferences.get_user_settings(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    price_status = "‚úÖ" if settings['notifications']['price_change'] else "‚ùå"
    levels_status = "‚úÖ" if settings['notifications']['psychological_levels'] else "‚ùå"
    volume_status = "‚úÖ" if settings['notifications']['volume_spikes'] else "‚ùå"
    
    builder.button(
        text=f"{price_status} –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã",
        callback_data="crypto_toggle_price"
    )
    builder.button(
        text=f"{levels_status} –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–≤–Ω–∏",
        callback_data="crypto_toggle_levels"
    )
    builder.button(
        text=f"{volume_status} –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞",
        callback_data="crypto_toggle_volume"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
    builder.button(
        text=f"üìè –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {settings['thresholds']['price_change_percent']}%",
        callback_data="crypto_threshold_price"
    )
    builder.button(
        text=f"üìä –ü–æ—Ä–æ–≥ –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä–µ–º–∞: {settings['thresholds']['volume_spike_ratio']}x",
        callback_data="crypto_threshold_volume"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_alerts_back")
    
    builder.adjust(1)
    
    await callback.answer()
    await callback.message.edit_text(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø–æ—Ä–æ–≥–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts_coins")
async def callback_alerts_coins(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    coins = await user_preferences.get_user_watched_coins(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
    for coin in coins:
        builder.button(text=f"‚ùå {coin}", callback_data=f"crypto_remove_coin_{coin}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É", callback_data="crypto_add_coin")
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_alerts_back")
    
    builder.adjust(1)
    
    coin_list = "\n".join([f"‚Ä¢ {coin}" for coin in coins]) if coins else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    
    await callback.answer()
    await callback.message.edit_text(
        "üìã *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–æ–Ω–µ—Ç—ã*\n\n"
        f"–°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        f"{coin_list}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–æ–Ω–µ—Ç—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é.",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts_test")
async def callback_alerts_test(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç
    coins = await user_preferences.get_user_watched_coins(user_id)
    
    if not coins:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç!")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã –≤ —Å–ø–∏—Å–∫–µ
    success = await alert_service.send_test_alert(user_id, coins[0])
    
    if success:
        await callback.answer("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "crypto_alerts_back")
async def callback_alerts_back(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_enable")
    builder.button(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_disable")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="crypto_alerts_settings")
    builder.button(text="üìã –ú–æ–∏ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_alerts_coins")
    builder.button(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="crypto_alerts_test")
    builder.adjust(1)
    
    await callback.answer()
    await callback.message.edit_text(
        "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:\n"
        "‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (>5% –∑–∞ —á–∞—Å)\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("crypto_toggle_"))
async def callback_toggle_notification(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    user_id = callback.from_user.id
    notification_type = callback.data.split("_")[2]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = await user_preferences.get_user_settings(user_id)
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    if notification_type == "price":
        settings['notifications']['price_change'] = not settings['notifications']['price_change']
    elif notification_type == "levels":
        settings['notifications']['psychological_levels'] = not settings['notifications']['psychological_levels']
    elif notification_type == "volume":
        settings['notifications']['volume_spikes'] = not settings['notifications']['volume_spikes']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await user_preferences.save_user_settings(user_id, settings)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await alert_service.update_user_settings(user_id, settings)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await callback_alerts_settings(callback)

@router.callback_query(F.data.startswith("crypto_threshold_"))
async def callback_threshold_notification(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@router.callback_query(F.data == "crypto_add_coin")
async def callback_add_coin(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã
    """
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

@router.callback_query(F.data.startswith("crypto_remove_coin_"))
async def callback_remove_coin(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç—ã
    """
    user_id = callback.from_user.id
    coin_symbol = callback.data.split("_")[3]
    
    # –£–¥–∞–ª—è–µ–º –º–æ–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
    success = await user_preferences.remove_watched_coin(user_id, coin_symbol)
    
    if success:
        await callback.answer(f"–ú–æ–Ω–µ—Ç–∞ {coin_symbol} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–Ω–µ—Ç—ã")
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    await callback_alerts_coins(callback)

@router.callback_query(F.data == "crypto_market_overview")
async def callback_market_overview(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä"
    """
    user_id = callback.from_user.id
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞...")
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    await callback.message.edit_text(
        "üìä *–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n"
        "–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: $1.2T\n"
        "–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC: 52.3%\n"
        "–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): $48.5B\n\n"
        "–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):\n"
        "1. ETH - $2,345.67 (+5.2%)\n"
        "2. SOL - $123.45 (+4.8%)\n"
        "3. BNB - $345.67 (+3.5%)\n\n"
        "–¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):\n"
        "1. XRP - $0.45 (-2.1%)\n"
        "2. ADA - $0.32 (-1.8%)\n"
        "3. DOT - $5.67 (-1.5%)",
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
        ).as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_alerts")
async def callback_crypto_alerts(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    """
    user_id = callback.from_user.id
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await alert_service.subscribe_user(user_id, callback.message.chat.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_enable")
    builder.button(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts_disable")
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="crypto_alerts_settings")
    builder.button(text="üìã –ú–æ–∏ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_alerts_coins")
    builder.button(text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="crypto_alerts_test")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö:\n"
        "‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (>5% –∑–∞ —á–∞—Å)\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data == "crypto_smart_money")
async def callback_smart_money(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Smart Money"
    """
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Smart Money...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money
        from .analytics.smart_money_analyzer import get_smart_money_analyzer
        from datetime import datetime
        analyzer = get_smart_money_analyzer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã Smart Money
        signals = await analyzer.get_smart_money_signals()
        
        if signals:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            signals_text = ""
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è TradingView —Å—Å—ã–ª–æ–∫
            tv_builder = InlineKeyboardBuilder()
            
            for i, signal in enumerate(signals[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 —Å–∏–≥–Ω–∞–ª–æ–≤
                pair = signal.pair
                direction = "üü¢ LONG" if signal.direction == SignalDirection.LONG else "üî¥ SHORT"
                confidence = int(signal.confidence * 100)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–≥–Ω–∞–ª —Ç–µ—Å—Ç–æ–≤—ã–º
                is_test = signal.metadata.get('test_signal', False) or '[–¢–ï–°–¢]' in str(signal.description)
                test_marker = "üß™ " if is_test else ""
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                try:
                    entry_price = float(signal.metadata.get('entry_price', signal.price))
                except (TypeError, ValueError):
                    entry_price = float(signal.price)
                
                try:
                    stop_loss = float(signal.metadata.get('stop_loss', 0))
                except (TypeError, ValueError):
                    stop_loss = 0.0
                
                try:
                    take_profit1 = float(signal.metadata.get('take_profit1', 0))
                except (TypeError, ValueError):
                    take_profit1 = 0.0
                
                try:
                    take_profit2 = float(signal.metadata.get('take_profit2', 0))
                except (TypeError, ValueError):
                    take_profit2 = 0.0
                
                try:
                    risk_reward = float(signal.metadata.get('risk_reward', 0))
                except (TypeError, ValueError):
                    risk_reward = 0.0
                
                timeframe = str(signal.metadata.get('timeframe', '–Ω/–¥'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ TradingView
                signal_num = i + 1
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                signals_text += f"‚Ä¢ {signal_num}. {test_marker}{pair}: {direction} ({confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if entry_price > 0:
                    signals_text += f"  üìà –í—Ö–æ–¥: ${entry_price:.2f}\n"
                    
                if stop_loss > 0:
                    signals_text += f"  üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.2f}\n"
                    
                if take_profit1 > 0:
                    if take_profit2 > 0:
                        signals_text += f"  üéØ –¶–µ–ª–∏: ${take_profit1:.2f} –∏ ${take_profit2:.2f}\n"
                    else:
                        signals_text += f"  üéØ –¶–µ–ª—å: ${take_profit1:.2f}\n"
                        
                if risk_reward > 0:
                    signals_text += f"  ‚öñÔ∏è –†–∏—Å–∫/–ü—Ä–∏–±—ã–ª—å: 1:{risk_reward:.2f}\n"
                    
                if timeframe and timeframe != '–Ω/–¥':
                    signals_text += f"  ‚è±Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç: {timeframe}\n"
                    
                signals_text += "\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è TradingView, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
                tv_link = signal.metadata.get('tradingview_link')
                if tv_link:
                    tv_builder.button(
                        text=f"üìä {signal_num}. {pair} –Ω–∞ TradingView", 
                        url=tv_link
                    )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            tv_builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)
            tv_builder.adjust(1)
            
            await callback.message.edit_text(
                f"üìà *Smart Money Signals*\n\n"
                f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ:\n\n"
                f"{signals_text}"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')} UTC",
                reply_markup=tv_builder.as_markup(),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            await callback.message.edit_text(
                "üìà *Smart Money Signals*\n\n"
                "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ Smart Money.\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:\n"
                "‚Ä¢ –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤\n"
                "‚Ä¢ –ö—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–∞—Ö\n"
                "‚Ä¢ –ù–µ–æ–±—ã—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M')} UTC",
                reply_markup=InlineKeyboardBuilder().button(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
                ).as_markup(),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ Smart Money: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await callback.message.edit_text(
            "üìà *Smart Money Signals*\n\n"
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ:\n\n"
            "‚Ä¢ BTC: –ö—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ $42,500\n"
            "‚Ä¢ ETH: –ê–∫–∫—É–º—É–ª—è—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $2,300-2,400\n"
            "‚Ä¢ SOL: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n\n"
            "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è, 12:30 UTC",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
            ).as_markup(),
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "crypto_search_coin")
async def callback_search_coin(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã"
    """
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardBuilder()
            .button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
            .button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
            .button(text="üìà Smart Money", callback_data="crypto_smart_money")
            .button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
            .adjust(1)
            .as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_back_to_main")
async def callback_back_to_main(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª–µ
    """
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    await callback.message.edit_text(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardBuilder()
            .button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
            .button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
            .button(text="üìà Smart Money", callback_data="crypto_smart_money")
            .button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
            .adjust(1)
            .as_markup(),
        parse_mode="Markdown"
    )

@router.message(Command("update_interval"))
async def cmd_update_interval(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update_interval
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_manager = get_data_manager()
    
    if data_manager.last_api_update:
        last_update_str = data_manager.last_api_update.strftime('%Y-%m-%d %H:%M:%S')
    else:
        last_update_str = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
    
    interval_minutes = data_manager.min_update_interval.total_seconds() / 60
    
    result = (
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {interval_minutes} –º–∏–Ω—É—Ç\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update_str}\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_interval <–º–∏–Ω—É—Ç>"
    )
    
    await message.reply(result)

@router.message(Command("set_interval"))
async def cmd_set_interval(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_interval
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_manager = get_data_manager()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    
    if not args:
        await message.reply("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
        return
    
    try:
        new_interval = int(args[0])
        if new_interval < 60:
            await message.reply("‚ö†Ô∏è –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 60 –º–∏–Ω—É—Ç")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        data_manager.min_update_interval = timedelta(minutes=new_interval)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª–µ
        config_path = Path(__file__).parent.parent / "config" / "config.yaml"
        try:
            with open(config_path, 'r') as f:
                config = yaml.safe_load(f)
            
            if config and "background" in config:
                config["background"]["update_interval"] = new_interval * 60  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                
                with open(config_path, 'w') as f:
                    yaml.dump(config, f, default_flow_style=False)
                
            logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_interval} –º–∏–Ω—É—Ç")
            await message.reply(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_interval} –º–∏–Ω—É—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")n
```
