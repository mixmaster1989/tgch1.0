"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è.
"""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .utils.keyboard import get_crypto_main_keyboard

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.handlers')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_bot = None

def set_bot(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
    global _bot
    _bot = bot
    logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")

def setup_crypto_handlers(router: Router):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    
    Args:
        router: –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
    router.message.register(cmd_crypto_mode, Command("crypto_mode"))
    router.message.register(cmd_crypto_mode, Command("crypto"))  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    router.callback_query.register(show_market_overview, F.data == "crypto_market_overview")
    router.callback_query.register(show_smart_money_signals, F.data == "crypto_smart_money")
    router.callback_query.register(show_settings, F.data == "crypto_settings")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from .settings import show_notification_settings, show_watchlist_settings
    router.callback_query.register(show_notification_settings, F.data == "crypto_settings_alerts")
    router.callback_query.register(show_watchlist_settings, F.data == "crypto_settings_coins")
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

async def cmd_crypto_mode(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_mode - –≤—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        keyboard = get_crypto_main_keyboard()
        
        await message.answer(
            "üîê *–†–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_market_overview(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    """
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text(
            "üìä *–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n"
            "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
        from .analytics.crypto_rank_analyzer import CryptoRankAnalyzer
        from .notification.message_formatter import MessageFormatter
        
        analyzer = CryptoRankAnalyzer()
        overview = await analyzer.get_market_overview()
        
        if overview:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatter = MessageFormatter()
            message_data = formatter.format_market_overview(overview)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=message_data["text"],
                reply_markup=message_data["keyboard"],
                parse_mode=message_data["parse_mode"]
            )
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_crypto_main_keyboard(),
                parse_mode="Markdown"
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard()
        )

async def show_smart_money_signals(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã Smart Money –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞
    """
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text(
            "üîç *–°–∏–≥–Ω–∞–ª—ã Smart Money*\n\n"
            "–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –∫—Ä—É–ø–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ –≤—Å–ø–ª–µ—Å–∫–∞—Ö –æ–±—ä–µ–º–∞
        from .analytics.crypto_rank_analyzer import CryptoRankAnalyzer
        from .analytics.mock_signals import MockSignalGenerator
        from .notification.message_formatter import MessageFormatter
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        mock_generator = MockSignalGenerator()
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        test_signals = mock_generator.generate_volume_spike_signals()
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(test_signals)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ Smart Money")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        analyzer = CryptoRankAnalyzer()
        real_signals = await analyzer.detect_volume_spikes()
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(real_signals)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ Smart Money")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        signals = real_signals + test_signals
        logger.info(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(signals)}")
        
        # –°–∏–≥–Ω–∞–ª—ã –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–æ—Ç –≤—ã—Å–æ–∫–æ–π –∫ –Ω–∏–∑–∫–æ–π)
        signals.sort(key=lambda s: s.confidence, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        signals_to_show = signals[:5]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üîç *–°–∏–≥–Ω–∞–ª—ã Smart Money - –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–∞*\n\n"
        
        for i, signal in enumerate(signals_to_show):
            direction_emoji = "üü¢" if signal.direction.value == "long" else "üî¥"
            direction_text = "LONG" if signal.direction.value == "long" else "SHORT"
            
            message_text += (
                f"{i+1}. {direction_emoji} *{signal.pair}* | {direction_text} | ${signal.price:.4f}\n"
                f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {'‚ñì' * int(signal.confidence * 10)}{' ' * (10 - int(signal.confidence * 10))} ({signal.confidence:.2f})\n"
                f"   {signal.description.split('.')[0]}.\n\n"
            )
        
        message_text += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(signals)}\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {signals[0].timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="crypto_smart_money")
        builder.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="crypto_back_to_main")
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã —Å–∏–≥–Ω–∞–ª—ã Smart Money –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–∏–≥–Ω–∞–ª–æ–≤ Smart Money: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard()
        )

async def show_settings(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    """
    try:
        await callback.answer()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        builder = InlineKeyboardBuilder()
        builder.button(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è", callback_data="crypto_settings_alerts")
        builder.button(text="üìã –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç", callback_data="crypto_settings_coins")
        builder.button(text="üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞", callback_data="crypto_settings_thresholds")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
        builder.adjust(1)
        
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard()
        )