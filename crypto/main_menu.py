"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
"""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from .analytics.market_analyzer import MarketAnalyzer
from .notification.message_formatter import MessageFormatter
from .utils.keyboard import get_crypto_main_keyboard

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.main_menu')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_bot = None

def set_bot(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""
    global _bot
    _bot = bot
    logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")

def register_crypto_menu_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    
    Args:
        dp: –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ aiogram
    """
    # –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é
    menu_router = Router()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    menu_router.callback_query.register(handle_back_to_main, F.data == "crypto_back_to_main")
    menu_router.callback_query.register(handle_refresh_market, F.data == "crypto_refresh_market")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dp.include_router(menu_router)
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

async def handle_back_to_main(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    try:
        await callback.answer()
        
        await callback.message.edit_text(
            "üîê *–†–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_crypto_main_keyboard(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}", exc_info=True)

async def handle_refresh_market(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ
    """
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text(
            "üìä *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="Markdown"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞
        analyzer = MarketAnalyzer()
        overview = await analyzer.get_market_overview()
        
        if overview:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            formatter = MessageFormatter()
            message_data = formatter.format_market_overview(overview)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=message_data["text"],
                reply_markup=message_data["keyboard"],
                parse_mode=message_data["parse_mode"]
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            await callback.message.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_crypto_main_keyboard(),
                parse_mode="Markdown"
            )
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ: {e}", exc_info=True)
        
        # –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        await callback.message.edit_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard(),
            parse_mode="Markdown"
        )