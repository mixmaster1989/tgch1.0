import logging
import traceback
import sys
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from .config import crypto_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π —Å—Ç–µ–∫–∞
def log_exception(e, message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    logger.error(f"{message}: {str(e)}")
    logger.error(traceback.format_exc())

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–µ–Ω—é
crypto_menu_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
def set_bot(bot):
    global bot_instance
    bot_instance = bot

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_crypto_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"), KeyboardButton(text="üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")],
            [KeyboardButton(text="üìà –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"), KeyboardButton(text="üìâ –°–∏–≥–Ω–∞–ª—ã")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_crypto_analysis_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û–±—ä–µ–º—ã"), KeyboardButton(text="üí∞ –§–∞–Ω–¥–∏–Ω–≥")],
            [KeyboardButton(text="üêã –ö–∏—Ç—ã"), KeyboardButton(text="üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_crypto_pairs_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    pairs = crypto_config.get('monitoring', {}).get('pairs', ['BTCUSDT', 'ETHUSDT'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ)
    pair_buttons = []
    row = []
    
    for i, pair in enumerate(pairs):
        row.append(KeyboardButton(text=f"{pair}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        if len(row) == 2 or i == len(pairs) - 1:
            pair_buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pair_buttons.append([
        KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É"), 
        KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É")
    ])
    pair_buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ")])
    
    return ReplyKeyboardMarkup(keyboard=pair_buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@crypto_menu_router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
async def crypto_analysis(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'")
    
    await message.answer(
        "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_crypto_analysis_menu()
    )

@crypto_menu_router.message(F.text == "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def crypto_monitoring(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram_interface
    from .telegram_interface import process_crypto_monitoring, bot_instance
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    temp_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ...")
    
    # –°–æ–∑–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    callback = types.CallbackQuery(
        id="crypto_monitoring",
        from_user=message.from_user,
        chat_instance=str(message.chat.id),
        message=temp_msg,
        data="crypto_monitoring"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è callback
    callback.bot = bot_instance
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await process_crypto_monitoring(callback)

@crypto_menu_router.message(F.text == "üìà –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
async def crypto_pairs(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã'")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã
    pairs = crypto_config.get('monitoring', {}).get('pairs', ['BTCUSDT', 'ETHUSDT'])
    
    await message.answer(
        "üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n"
        f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(pairs)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_pairs_menu()
    )

@crypto_menu_router.message(F.text == "üìâ –°–∏–≥–Ω–∞–ª—ã")
async def crypto_signals(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∏–≥–Ω–∞–ª—ã'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–°–∏–≥–Ω–∞–ª—ã'")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signals_enabled = crypto_config.get('signals', {}).get('enabled', True)
    channel_id = crypto_config.get('signals', {}).get('channel_id')
    include_charts = crypto_config.get('signals', {}).get('include_charts', True)
    
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if signals_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    channel = f"@{channel_id}" if channel_id else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    charts = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if include_charts else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    await message.answer(
        "üìâ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ö–∞–Ω–∞–ª: {channel}\n"
        f"–ì—Ä–∞—Ñ–∏–∫–∏: {charts}\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ'",
        reply_markup=get_crypto_main_menu()
    )

@crypto_menu_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ")
async def crypto_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ'")
    logger.debug(f"message: {message}")
    
    try:
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ'")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ telegram_interface
        logger.debug("–ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å get_crypto_settings_keyboard –∏ bot_instance –∏–∑ telegram_interface")
        from .telegram_interface import get_crypto_settings_keyboard, bot_instance
        logger.debug(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω bot_instance: {bot_instance}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.debug("–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        keyboard = get_crypto_settings_keyboard()
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {keyboard}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        result = await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞.",
            reply_markup=keyboard
        )
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞: {traceback.format_exc()}")
        try:
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}",
                reply_markup=get_crypto_main_menu()
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e2}")
            logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Å—Ç–µ–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

@crypto_menu_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ")
async def back_to_crypto(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ")
    
    await message.answer(
        "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_main_menu()
    )

@crypto_menu_router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É")
async def back_to_bot(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –±–æ—Ç—É'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ handlers
    from handlers import get_main_keyboard, ADMIN_ID
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    is_admin = message.from_user.id == ADMIN_ID
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard(is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞
@crypto_menu_router.message(F.text == "üìä –û–±—ä–µ–º—ã")
async def crypto_volumes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±—ä–µ–º—ã'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤")
    
    await message.answer(
        "‚è≥ –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
    from .data_sources import DataSourceManager
    from .smart_money_analyzer import SmartMoneyAnalyzer
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataSourceManager()
        await data_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SmartMoneyAnalyzer(data_manager)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        results = {}
        for pair in analyzer.pairs:
            volume_signals = await analyzer.analyze_volumes(pair)
            if volume_signals:
                results[pair] = volume_signals
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if results:
            message_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤:\n\n"
            
            for pair, signals in results.items():
                message_text += f"**{pair}**\n"
                
                for signal in signals:
                    direction = "üü¢ LONG" if signal.get("direction") == "long" else "üî¥ SHORT"
                    timeframe = signal.get("timeframe", "")
                    ratio = signal.get("ratio", 0)
                    
                    message_text += f"{direction} ({timeframe}): –æ–±—ä–µ–º –≤ {ratio:.2f}x —Ä–∞–∑ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ\n"
                
                message_text += "\n"
        else:
            message_text = "üìä –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:\n\n–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Å–ø–ª–µ—Å–∫–æ–≤ –æ–±—ä–µ–º–∞."
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await data_manager.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(message_text, reply_markup=get_crypto_analysis_menu())
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä–µ–º–æ–≤: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—ä–µ–º–æ–≤: {e}",
            reply_markup=get_crypto_analysis_menu()
        )

@crypto_menu_router.message(F.text == "üí∞ –§–∞–Ω–¥–∏–Ω–≥")
async def crypto_funding(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–§–∞–Ω–¥–∏–Ω–≥'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ —Ñ–∞–Ω–¥–∏–Ω–≥–∞")
    
    await message.answer(
        "‚è≥ –ê–Ω–∞–ª–∏–∑ Funding Rate...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
    from .data_sources import DataSourceManager
    from .smart_money_analyzer import SmartMoneyAnalyzer
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataSourceManager()
        await data_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SmartMoneyAnalyzer(data_manager)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Funding Rate –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        results = {}
        for pair in analyzer.pairs:
            funding_signals = await analyzer.analyze_funding_rate(pair)
            if funding_signals:
                results[pair] = funding_signals
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if results:
            message_text = "üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ Funding Rate:\n\n"
            
            for pair, signals in results.items():
                message_text += f"**{pair}**\n"
                
                for signal in signals:
                    direction = "üü¢ LONG" if signal.get("direction") == "long" else "üî¥ SHORT"
                    funding_rate = signal.get("funding_rate", 0)
                    
                    message_text += f"{direction}: Funding Rate = {funding_rate:.4f}%\n"
                
                message_text += "\n"
        else:
            message_text = "üí∞ –ê–Ω–∞–ª–∏–∑ Funding Rate:\n\n–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π Funding Rate."
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await data_manager.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await message.answer(message_text, reply_markup=get_crypto_analysis_menu())
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Funding Rate: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ Funding Rate: {e}",
            reply_markup=get_crypto_analysis_menu()
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_crypto_menu_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ handlers.py
        from handlers import bot_instance
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω bot_instance –∏–∑ handlers: {bot_instance}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        set_bot(bot_instance)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π bot_instance: {bot_instance}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(crypto_menu_router)
        logger.info("–†–æ—É—Ç–µ—Ä crypto_menu_router —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        log_exception(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è")