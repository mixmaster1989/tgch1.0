"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from .data_sources.crypto_data_manager import get_data_manager

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.main_menu')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
try:
    from aiogram import Router, F
    from aiogram.types import Message, CallbackQuery
    from aiogram.filters import Command
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from datetime import datetime
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    from .data_sources.crypto_data_manager import get_data_manager
    data_manager = get_data_manager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if not hasattr(data_manager, 'api') or not data_manager.api:
        logger.warning("API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ data_manager")
        data_manager = None
        
except ImportError as ie:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π: {ie}")
    data_manager = None
finally:
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if not all([data_manager, alert_service]):
        logger.warning("–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_bot = None

@router.message(Command("crypto"))
async def cmd_crypto(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ API-–∫–ª—é—á–µ–π
        if data_manager and data_manager.cryptorank_api_keys and len(data_manager.cryptorank_api_keys) > 1:
            builder.button(text=f"üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ ({len(data_manager.cryptorank_api_keys)} —à—Ç)", callback_data="crypto_key_management")
        
        builder.adjust(1)
        
        await message.answer(
            "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")

@router.callback_query(F.data == "crypto_market_overview")
async def callback_market_overview(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä"
    """
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
        data_manager = get_data_manager()
        overview = await data_manager.get_market_overview()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        total_market_cap = f"${overview['total_market_cap'] / 1_000_000_000:.2f}B"
        total_volume = f"${overview['total_volume_24h'] / 1_000_000_000:.2f}B"
        btc_dominance = f"{overview['btc_dominance']:.2f}%"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç
        gainers_text = ""
        for i, coin in enumerate(overview['top_gainers']):
            symbol = coin.get('symbol', '')
            price = coin.get('price', 0)
            change = coin.get('price_change_percent_24h', 0)
            gainers_text += f"{i+1}. {symbol} - ${price:.4f} (+{change:.2f}%)\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
        losers_text = ""
        for i, coin in enumerate(overview['top_losers']):
            symbol = coin.get('symbol', '')
            price = coin.get('price', 0)
            change = coin.get('price_change_percent_24h', 0)
            losers_text += f"{i+1}. {symbol} - ${price:.4f} ({change:.2f}%)\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_time = overview['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–∑–æ—Ä–æ–º —Ä—ã–Ω–∫–∞
        await callback.message.edit_text(
            f"üìä *–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n"
            f"–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {total_market_cap}\n"
            f"–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC: {btc_dominance}\n"
            f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {total_volume}\n\n"
            f"üü¢ *–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n{gainers_text}\n"
            f"üî¥ *–¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n{losers_text}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
            ).as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
            ).as_markup()
        )

@router.callback_query(F.data == "crypto_back_to_main")
async def callback_back_to_main(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª–µ
    """
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
    builder.button(text="üìà Smart Money", callback_data="crypto_smart_money")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_key_management")
async def callback_key_management(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API-–∫–ª—é—á–∞—Ö
    """
    if not data_manager:
        await callback.message.reply("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–∞—Ö
    keys_info = ""
    
    if data_manager.cryptorank_api_keys:
        for i, key in enumerate(data_manager.cryptorank_api_keys):
            # –°–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_key = key[:10] + "..." if len(key) > 10 else key
            status = "(—Ç–µ–∫—É—â–∏–π)" if i == data_manager.current_api_key_index else ""
            keys_info += f"{i+1}. ***{masked_key} {status}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    interval_minutes = data_manager.min_update_interval.total_seconds() / 60
    
    result = (
        f"üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API-–∫–ª—é—á–∞–º–∏*\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–ª—é—á: {data_manager.current_api_key_index+1} –∏–∑ {len(data_manager.cryptorank_api_keys)}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        f"‚è≥ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {interval_minutes:.0f} –º–∏–Ω—É—Ç\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/set_interval <–º–∏–Ω—É—Ç>`\n\n"
        "üîê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
        f"{keys_info if keys_info else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"}\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞\n"
        "–ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `/set_interval <–º–∏–Ω—É—Ç>`"
    )
    
    await callback.message.edit_text(result, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "crypto_test_santiment")
async def callback_test_santiment(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Santiment API
    """
    from crypto.handlers import cmd_test_santiment
    await cmd_test_santiment(callback.message)
    await callback.answer()

def register_crypto_menu_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.include_router(router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def set_bot(bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    """
    global _bot
    _bot = bot
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    try:
        if data_manager:
            logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å—ã
            from .notification.alert_service import alert_service
            alert_service.set_bot(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
