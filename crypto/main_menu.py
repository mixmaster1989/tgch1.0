"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
"""

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from .data_sources.crypto_data_manager import get_data_manager

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.main_menu')

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
_bot = None

def set_bot(bot):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    """
    global _bot
    _bot = bot
    logger.info("–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è")

@router.message(Command("crypto"))
async def cmd_crypto(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
    builder.button(text="üìà Smart Money", callback_data="crypto_smart_money")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
    builder.adjust(1)
    
    await message.answer(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "crypto_market_overview")
async def callback_market_overview(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä"
    """
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
        data_manager = get_data_manager()
        overview = await data_manager.get_market_overview()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        total_market_cap = f"${overview['total_market_cap'] / 1_000_000_000:.2f}B"
        total_volume = f"${overview['total_volume_24h'] / 1_000_000_000:.2f}B"
        btc_dominance = f"{overview['btc_dominance']:.2f}%"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç
        gainers_text = ""
        for i, coin in enumerate(overview['top_gainers']):
            symbol = coin.get('symbol', '')
            price = coin.get('price', 0)
            change = coin.get('price_change_percent_24h', 0)
            gainers_text += f"{i+1}. {symbol} - ${price:.4f} (+{change:.2f}%)\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç
        losers_text = ""
        for i, coin in enumerate(overview['top_losers']):
            symbol = coin.get('symbol', '')
            price = coin.get('price', 0)
            change = coin.get('price_change_percent_24h', 0)
            losers_text += f"{i+1}. {symbol} - ${price:.4f} ({change:.2f}%)\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_time = overview['timestamp'].strftime("%Y-%m-%d %H:%M:%S")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–∑–æ—Ä–æ–º —Ä—ã–Ω–∫–∞
        await callback.message.edit_text(
            f"üìä *–†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç*\n\n"
            f"–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: {total_market_cap}\n"
            f"–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC: {btc_dominance}\n"
            f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á): {total_volume}\n\n"
            f"üü¢ *–¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n{gainers_text}\n"
            f"üî¥ *–¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n{losers_text}\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
            ).as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ–±–∑–æ—Ä–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardBuilder().button(
                text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main"
            ).as_markup()
        )

@router.callback_query(F.data == "crypto_back_to_main")
async def callback_back_to_main(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª–µ
    """
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üìä –†—ã–Ω–æ—á–Ω—ã–π –æ–±–∑–æ—Ä", callback_data="crypto_market_overview")
    builder.button(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="crypto_alerts")
    builder.button(text="üìà Smart Money", callback_data="crypto_smart_money")
    builder.button(text="üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã", callback_data="crypto_search_coin")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "ü™ô *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–¥—É–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

def register_crypto_menu_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    dp.include_router(router)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")