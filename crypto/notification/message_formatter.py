"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
"""

import logging
from typing import Dict, Any
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup

from ..models import CryptoSignal, SignalDirection, MarketOverview

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.notification.formatter')

class MessageFormatter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
    """
    
    @staticmethod
    def format_signal_message(signal: CryptoSignal) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–æ–º
        
        Args:
            signal: –°–∏–≥–Ω–∞–ª –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction_emoji = "üü¢" if signal.direction == SignalDirection.LONG else "üî¥"
        direction_text = "LONG" if signal.direction == SignalDirection.LONG else "SHORT"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üìç *{signal.pair}* | *{direction_text}* | Entry: *{signal.price:.4f}*\n\n"
            f"*–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞:* {signal.signal_type.value.replace('_', ' ').title()}\n"
            f"*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {'‚ñì' * int(signal.confidence * 10)}{' ' * (10 - int(signal.confidence * 10))} ({signal.confidence:.2f})\n\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{signal.description}\n\n"
            f"*–í—Ä–µ–º—è:* {signal.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"crypto_details_{signal.id}")
        builder.button(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"crypto_mute_{signal.pair.replace('/', '_')}")
        builder.adjust(1)
        
        return {
            "text": message_text,
            "keyboard": builder.as_markup(),
            "parse_mode": "Markdown"
        }
    
    @staticmethod
    def format_market_overview(overview: MarketOverview) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–∑–æ—Ä–æ–º —Ä—ã–Ω–∫–∞
        
        Args:
            overview: –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        """
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ
        market_cap_formatted = f"{overview.total_market_cap / 1_000_000_000:.2f}B"
        volume_formatted = f"{overview.total_volume_24h / 1_000_000_000:.2f}B"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üìä *–û–±–∑–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞*\n\n"
            f"*–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è:* ${market_cap_formatted}\n"
            f"*–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC:* {overview.btc_dominance:.2f}%\n"
            f"*–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (24—á):* ${volume_formatted}\n\n"
            f"*üü¢ –¢–æ–ø —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç—É—â–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö
        for i, coin in enumerate(overview.top_gainers):
            message_text += f"{i+1}. {coin['symbol']} - ${coin['price']:.4f} ({coin['change_24h']:.2f}%)\n"
        
        message_text += "\n*üî¥ –¢–æ–ø –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç (24—á):*\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–¥–∞—é—â–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö
        for i, coin in enumerate(overview.top_losers):
            message_text += f"{i+1}. {coin['symbol']} - ${coin['price']:.4f} ({coin['change_24h']:.2f}%)\n"
        
        message_text += f"\n*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {overview.timestamp.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="crypto_refresh_market")
        builder.button(text="üìà –°–∏–≥–Ω–∞–ª—ã Smart Money", callback_data="crypto_smart_money")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
        builder.adjust(1)
        
        return {
            "text": message_text,
            "keyboard": builder.as_markup(),
            "parse_mode": "Markdown"
        }