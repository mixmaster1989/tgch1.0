"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
import json
import os
from typing import Dict, Any, List, Optional
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .utils.keyboard import get_crypto_main_keyboard

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è
logger = logging.getLogger('crypto.settings')

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SETTINGS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'user_settings')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(SETTINGS_DIR, exist_ok=True)

class UserSettings:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    @staticmethod
    def get_user_settings_path(user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        return os.path.join(SETTINGS_DIR, f"user_{user_id}.json")
    
    @staticmethod
    def get_default_settings() -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Returns:
            Dict[str, Any]: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        """
        return {
            "notifications": {
                "enabled": True,
                "volume_spike": True,
                "large_orders": True,
                "funding_rate": True
            },
            "watchlist": [
                "BTC/USDT",
                "ETH/USDT",
                "SOL/USDT",
                "BNB/USDT",
                "XRP/USDT"
            ],
            "thresholds": {
                "volume_spike": 1.8,
                "large_order_btc": 10.0,
                "funding_rate": 0.05
            }
        }
    
    @staticmethod
    def load_user_settings(user_id: int) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        settings_path = UserSettings.get_user_settings_path(user_id)
        
        try:
            if os.path.exists(settings_path):
                with open(settings_path, 'r', encoding='utf-8') as file:
                    settings = json.load(file)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    return settings
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_settings = UserSettings.get_default_settings()
                UserSettings.save_user_settings(user_id, default_settings)
                logger.info(f"–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return default_settings
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return UserSettings.get_default_settings()
    
    @staticmethod
    def save_user_settings(user_id: int, settings: Dict[str, Any]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        settings_path = UserSettings.get_user_settings_path(user_id)
        
        try:
            with open(settings_path, 'w', encoding='utf-8') as file:
                json.dump(settings, file, indent=4)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
            return False
    
    @staticmethod
    def update_user_setting(user_id: int, setting_path: List[str], value: Any) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            setting_path: –ü—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        settings = UserSettings.load_user_settings(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
        current = settings
        for key in setting_path[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        
        current[setting_path[-1]] = value
        
        return UserSettings.save_user_settings(user_id, settings)
    
    @staticmethod
    def toggle_notification_setting(user_id: int, notification_type: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
        Returns:
            bool: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        settings = UserSettings.load_user_settings(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type in settings["notifications"]:
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            new_value = not settings["notifications"][notification_type]
            settings["notifications"][notification_type] = new_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            UserSettings.save_user_settings(user_id, settings)
            
            return new_value
        
        return False
    
    @staticmethod
    def add_to_watchlist(user_id: int, pair: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä—É –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        settings = UserSettings.load_user_settings(user_id)
        
        if pair not in settings["watchlist"]:
            settings["watchlist"].append(pair)
            return UserSettings.save_user_settings(user_id, settings)
        
        return True
    
    @staticmethod
    def remove_from_watchlist(user_id: int, pair: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –ø–∞—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        settings = UserSettings.load_user_settings(user_id)
        
        if pair in settings["watchlist"]:
            settings["watchlist"].remove(pair)
            return UserSettings.save_user_settings(user_id, settings)
        
        return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_notification_settings(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        await callback.answer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        settings = UserSettings.load_user_settings(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for notification_type, enabled in settings["notifications"].items():
            status = "‚úÖ" if enabled else "‚ùå"
            display_name = notification_type.replace("_", " ").title()
            builder.button(
                text=f"{display_name}: {status}",
                callback_data=f"crypto_toggle_notification_{notification_type}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_settings")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard()
        )

async def show_watchlist_settings(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä
    """
    try:
        await callback.answer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        settings = UserSettings.load_user_settings(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = "üìã *–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä*\n\n"
        
        if settings["watchlist"]:
            for i, pair in enumerate(settings["watchlist"]):
                message_text += f"{i+1}. {pair}\n"
        else:
            message_text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
        
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="crypto_add_to_watchlist")
        builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data="crypto_remove_from_watchlist")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_settings")
        builder.adjust(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä: {e}", exc_info=True)
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_crypto_main_keyboard()
        )