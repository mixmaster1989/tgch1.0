import logging
import asyncio
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from .config import crypto_config
from .smart_money_analyzer import SmartMoneyAnalyzer
from .data_sources import DataSourceManager
from .signal_dispatcher import SignalDispatcher

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
crypto_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤
data_manager = None
analyzer = None
signal_dispatcher = None
monitoring_task = None
bot_instance = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
def set_bot(bot):
    global bot_instance
    bot_instance = bot

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_crypto_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", callback_data="crypto_analyze"),
            InlineKeyboardButton(text="üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="crypto_monitoring")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="crypto_settings"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="crypto_help")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back")
        ]
    ])
    return keyboard

def get_crypto_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    monitoring_enabled = crypto_config.get('signals', {}).get('enabled', True)
    include_charts = crypto_config.get('signals', {}).get('include_charts', True)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if monitoring_enabled else '‚ùå'} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                callback_data="crypto_toggle_monitoring"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if include_charts else '‚ùå'} –ì—Ä–∞—Ñ–∏–∫–∏", 
                callback_data="crypto_toggle_charts"
            )
        ],
        [
            InlineKeyboardButton(text="üî¢ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã", callback_data="crypto_pairs"),
            InlineKeyboardButton(text="‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º—ã", callback_data="crypto_timeframes")
        ],
        [
            InlineKeyboardButton(text="üîë API –∫–ª—é—á–∏", callback_data="crypto_api_keys")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
        ]
    ])
    return keyboard

def get_crypto_pairs_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã
    pairs = crypto_config.get('monitoring', {}).get('pairs', ['BTCUSDT', 'ETHUSDT'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
    pair_buttons = []
    for i in range(0, len(pairs), 2):
        row = []
        for j in range(2):
            if i + j < len(pairs):
                pair = pairs[i + j]
                row.append(InlineKeyboardButton(text=pair, callback_data=f"crypto_pair_{pair}"))
        pair_buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pair_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="crypto_add_pair"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_settings")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=pair_buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@crypto_router.message(Command("crypto"))
async def cmd_crypto(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /crypto")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ main_menu
    from .main_menu import get_crypto_main_menu
    
    await message.answer(
        "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money\n\n"
        "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (Smart Money) "
        "–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@crypto_router.callback_query(F.data == "crypto_back")
async def process_crypto_back(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'")
    
    await callback.message.delete()

@crypto_router.callback_query(F.data == "crypto_analyze")
async def process_crypto_analyze(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    global data_manager, analyzer
    
    if not data_manager:
        data_manager = DataSourceManager()
        await data_manager.initialize()
    
    if not analyzer:
        analyzer = SmartMoneyAnalyzer(data_manager)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await callback.message.edit_text(
        "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = await analyzer.run_analysis()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:\n\n"
        
        for pair, pair_results in results.items():
            signals = pair_results.get("signals", [])
            price = pair_results.get("price")
            
            if signals:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Ç–∏–ø—É
                signal_types = {}
                for signal in signals:
                    signal_type = signal.get("type")
                    if signal_type not in signal_types:
                        signal_types[signal_type] = []
                    signal_types[signal_type].append(signal)
                
                message_text += f"**{pair}** - ${price:.2f}\n"
                
                for signal_type, type_signals in signal_types.items():
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
                    long_count = sum(1 for s in type_signals if s.get("direction") == "long")
                    short_count = sum(1 for s in type_signals if s.get("direction") == "short")
                    
                    direction = "LONG" if long_count > short_count else "SHORT"
                    direction_emoji = "üü¢" if direction == "LONG" else "üî¥"
                    
                    message_text += f"{direction_emoji} {signal_type.replace('_', ' ').title()}: {direction}\n"
                
                message_text += "\n"
        
        if message_text == "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:\n\n":
            message_text += "–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await callback.message.edit_text(
            message_text,
            reply_markup=get_crypto_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞: {e}",
            reply_markup=get_crypto_keyboard()
        )

@crypto_router.callback_query(F.data == "crypto_monitoring")
async def process_crypto_monitoring(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    
    global monitoring_task
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    is_monitoring_active = monitoring_task is not None and not monitoring_task.done()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º\n\n"
    message_text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if is_monitoring_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    pairs = crypto_config.get('monitoring', {}).get('pairs', [])
    timeframes = crypto_config.get('monitoring', {}).get('timeframes', [])
    
    message_text += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã: {', '.join(pairs)}\n"
    message_text += f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(timeframes)}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_monitoring_active else "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", 
                callback_data="crypto_toggle_monitoring_task"
            )
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="crypto_back_to_main")
        ]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard)

@crypto_router.callback_query(F.data == "crypto_toggle_monitoring_task")
async def process_toggle_monitoring(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    global monitoring_task, data_manager, analyzer, signal_dispatcher
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    is_monitoring_active = monitoring_task is not None and not monitoring_task.done()
    
    if is_monitoring_active:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_task.cancel()
        await callback.message.edit_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not data_manager:
            data_manager = DataSourceManager()
            await data_manager.initialize()
        
        if not analyzer:
            analyzer = SmartMoneyAnalyzer(data_manager)
        
        if not signal_dispatcher:
            signal_dispatcher = SignalDispatcher()
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            signal_dispatcher.set_bot(bot_instance)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_task = asyncio.create_task(run_monitoring(analyzer, signal_dispatcher))
        await callback.message.edit_text("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await process_crypto_monitoring(callback)

@crypto_router.callback_query(F.data == "crypto_settings")
async def process_crypto_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=get_crypto_settings_keyboard()
    )

@crypto_router.callback_query(F.data == "crypto_help")
async def process_crypto_help(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º—É –º–æ–¥—É–ª—é")
    
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º—É –º–æ–¥—É–ª—é\n\n"
        "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (Smart Money) "
        "–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã.\n\n"
        
        "üìä **–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞** - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä "
        "–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n\n"
        
        "üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
        
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –≤—ã–±—Ä–∞—Ç—å "
        "—Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏.\n\n"
        
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
        "- –í—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤\n"
        "- –ò–∑–º–µ–Ω–µ–Ω–∏—è Open Interest\n"
        "- Funding Rate\n"
        "- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–æ–≤\n"
        "- –ó–æ–Ω—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n"
        "- Order Blocks\n\n"
        
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/crypto - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n"
        "/crypto_analyze - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞\n"
        "/crypto_start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/crypto_stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_crypto_keyboard()
    )

@crypto_router.callback_query(F.data == "crypto_back_to_main")
async def process_back_to_main(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –ø–æ–¥–º–µ–Ω—é"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    await callback.message.edit_text(
        "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money\n\n"
        "–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (Smart Money) "
        "–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–º —Ä—ã–Ω–∫–µ –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_keyboard()
    )

@crypto_router.callback_query(F.data == "crypto_back_to_settings")
async def process_back_to_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    await process_crypto_settings(callback)

@crypto_router.callback_query(F.data == "crypto_pairs")
async def process_crypto_pairs(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã'"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã
    pairs = crypto_config.get('monitoring', {}).get('pairs', ['BTCUSDT', 'ETHUSDT'])
    
    await callback.message.edit_text(
        "üî¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä\n\n"
        f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(pairs)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=get_crypto_pairs_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def run_monitoring(analyzer, signal_dispatcher, interval=300):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
    
    Args:
        analyzer (SmartMoneyAnalyzer): –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money
        signal_dispatcher (SignalDispatcher): –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        interval (int): –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    logger.info(f"–ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
    
    try:
        while True:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                results = await analyzer.run_analysis()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
                sent_count = await signal_dispatcher.dispatch_signals(results)
                
                if sent_count > 0:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Å–∏–≥–Ω–∞–ª–æ–≤")
                else:
                    logger.info("–°–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(interval)
            except asyncio.CancelledError:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(60)
    finally:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@crypto_router.message(Command("crypto_analyze"))
async def cmd_crypto_analyze(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_analyze"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /crypto_analyze")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer("‚è≥ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
    
    # –°–æ–∑–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    callback = types.CallbackQuery(
        id="crypto_analyze",
        from_user=message.from_user,
        chat_instance=str(message.chat.id),
        message=msg,
        data="crypto_analyze"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è callback
    callback.bot = bot_instance
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await process_crypto_analyze(callback)

@crypto_router.message(Command("crypto_start"))
async def cmd_crypto_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /crypto_start")
    
    global monitoring_task, data_manager, analyzer, signal_dispatcher
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    is_monitoring_active = monitoring_task is not None and not monitoring_task.done()
    
    if is_monitoring_active:
        await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if not data_manager:
        data_manager = DataSourceManager()
        await data_manager.initialize()
    
    if not analyzer:
        analyzer = SmartMoneyAnalyzer(data_manager)
    
    if not signal_dispatcher:
        signal_dispatcher = SignalDispatcher()
        signal_dispatcher.set_bot(bot_instance)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoring_task = asyncio.create_task(run_monitoring(analyzer, signal_dispatcher))
    
    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /crypto_start")

@crypto_router.message(Command("crypto_stop"))
async def cmd_crypto_stop(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_stop"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /crypto_stop")
    
    global monitoring_task
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    is_monitoring_active = monitoring_task is not None and not monitoring_task.done()
    
    if not is_monitoring_active:
        await message.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoring_task.cancel()
    
    await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /crypto_stop")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_crypto_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ handlers.py
    from handlers import bot_instance
    set_bot(bot_instance)
    
    dp.include_router(crypto_router)