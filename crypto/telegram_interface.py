import logging
import traceback
import sys
import yaml
import os
from aiogram import Router, types, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from .config import crypto_config, load_crypto_config # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ load_crypto_config –µ—Å—Ç—å –≤ config.py
from .smart_money_analyzer import SmartMoneyAnalyzer # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
from .data_sources import DataSourceManager # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π —Å—Ç–µ–∫–∞
def log_exception(e, message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    logger.error(f"{message}: {str(e)}")
    logger.error(traceback.format_exc())

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
crypto_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance: Bot = None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {} # {user_id: {'state': 'waiting_api_key', 'api_type': 'binance'}}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
def set_bot(bot: Bot):
    global bot_instance
    bot_instance = bot
    logger.debug(f"–≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ telegram_interface: {bot_instance}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_crypto_config():
    try:
        config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'crypto_config.yaml')
        with open(config_path, 'w', encoding='utf-8') as file:
            yaml.dump(crypto_config, file, default_flow_style=False)
        logger.debug(f"–ö—Ä–∏–ø—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_path}")
    except Exception as e:
        log_exception(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_crypto_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ –º–æ–¥—É–ª—è"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏", callback_data="crypto_settings_api_keys")],
        [InlineKeyboardButton(text="üìà –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã", callback_data="crypto_settings_pairs")],
        [InlineKeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="crypto_settings_signals")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="crypto_settings_back")]
    ])
    return keyboard

def get_api_key_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ API –∫–ª—é—á–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Binance", callback_data="crypto_settings_api_binance")],
        # [InlineKeyboardButton(text="Bybit", callback_data="crypto_settings_api_bybit")], # –ü—Ä–∏–º–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫—Ä–∏–ø—Ç–æ", callback_data="crypto_settings_back")]
    ])
    return keyboard

def get_signal_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    signals_enabled = crypto_config.get('signals', {}).get('enabled', True)
    include_charts = crypto_config.get('signals', {}).get('include_charts', True)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–°–∏–≥–Ω–∞–ª—ã: {'‚úÖ –í–∫–ª' if signals_enabled else '‚ùå –í—ã–∫–ª'}", callback_data="crypto_settings_signals_toggle")],
        [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="crypto_settings_signals_channel")],
        [InlineKeyboardButton(text=f"–ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö: {'‚úÖ –í–∫–ª' if include_charts else '‚ùå –í—ã–∫–ª'}", callback_data="crypto_settings_signals_charts_toggle")],
        [InlineKeyboardButton(text="–ö—É–ª–¥–∞—É–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="crypto_settings_signals_cooldown")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫—Ä–∏–ø—Ç–æ", callback_data="crypto_settings_back")]
    ])
    return keyboard


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ –º–µ–Ω—é (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ main_menu.py) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "üìà –ö—Ä–∏–ø—Ç–æ –∞–Ω–∞–ª–∏–∑"
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑ main_menu.py
@crypto_router.message(Command("crypto"))
@crypto_router.message(F.text == "üìà –ö—Ä–∏–ø—Ç–æ –∞–Ω–∞–ª–∏–∑")
async def cmd_crypto(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫—Ä–∏–ø—Ç–æ –∞–Ω–∞–ª–∏–∑")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # from handlers import ADMIN_ID # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ADMIN_ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ handlers.py
    # if message.from_user.id != ADMIN_ID:
    #     await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    #     return

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –º–µ–Ω—é –∏–∑ main_menu.py
    from .main_menu import get_crypto_main_menu

    await message.answer(
        "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_main_menu()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ main_menu.py) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üêã –ö–∏—Ç—ã"
@crypto_router.message(F.text == "üêã –ö–∏—Ç—ã")
async def crypto_whales(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –∫–∏—Ç–æ–≤")

    await message.answer(
        "‚è≥ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataSourceManager()
        await data_manager.initialize()

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SmartMoneyAnalyzer(data_manager)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        results = {}
        for pair in analyzer.pairs:
            whale_signals = await analyzer.analyze_whale_transactions(pair)
            if whale_signals:
                results[pair] = whale_signals

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if results:
            message_text = "üêã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤:\n\n"

            for pair, signals in results.items():
                message_text += f"**{pair}**\n"

                for signal in signals:
                    direction = "üü¢ LONG" if signal.get("direction") == "long" else "üî¥ SHORT"
                    amount_usd = signal.get("amount_usd", 0)

                    message_text += f"{direction}: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ ${amount_usd:,.2f}\n"

                message_text += "\n"
        else:
            message_text = "üêã –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤:\n\n–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∏—Ç–æ–≤."

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await data_manager.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        from .main_menu import get_crypto_analysis_menu
        await message.answer(message_text, reply_markup=get_crypto_analysis_menu())

    except Exception as e:
        log_exception(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∏—Ç–æ–≤")
        from .main_menu import get_crypto_analysis_menu
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∏—Ç–æ–≤: {e}",
            reply_markup=get_crypto_analysis_menu()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å"
@crypto_router.message(F.text == "üìà –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å")
async def crypto_liquidity(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")

    await message.answer(
        "‚è≥ –ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        data_manager = DataSourceManager()
        await data_manager.initialize()

        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SmartMoneyAnalyzer(data_manager)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
        results = {}
        for pair in analyzer.pairs:
            liquidity_signals = await analyzer.analyze_liquidity_zones(pair)
            if liquidity_signals:
                results[pair] = liquidity_signals

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        if results:
            message_text = "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:\n\n"

            for pair, signals in results.items():
                message_text += f"**{pair}**\n"

                for signal in signals:
                    direction = "üü¢ LONG" if signal.get("direction") == "long" else "üî¥ SHORT"
                    price_level = signal.get("price_level", 0)
                    volume = signal.get("volume", 0)
                    distance_percent = signal.get("distance_percent", 0)

                    message_text += (
                        f"{direction}: —É—Ä–æ–≤–µ–Ω—å ${price_level:.2f} —Å –æ–±—ä–µ–º–æ–º ${volume:,.0f} "
                        f"({distance_percent:.2f}% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)\n"
                    )

                message_text += "\n"
        else:
            message_text = "üìà –ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:\n\n–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await data_manager.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        from .main_menu import get_crypto_analysis_menu
        await message.answer(message_text, reply_markup=get_crypto_analysis_menu())

    except Exception as e:
        log_exception(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
        from .main_menu import get_crypto_analysis_menu
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}",
            reply_markup=get_crypto_analysis_menu()
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ main_menu.py) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É"
@crypto_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É")
async def add_crypto_pair(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É'")
    user_states[message.from_user.id] = {'state': 'waiting_pair_name'}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É"
@crypto_router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É")
async def remove_crypto_pair(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª '–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É'")
    pairs = crypto_config.get('monitoring', {}).get('pairs', [])
    if not pairs:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä –ø—É—Å—Ç.")
        return

    user_states[message.from_user.id] = {'state': 'waiting_pair_to_remove'}
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(pairs)}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
@crypto_router.message(lambda message: message.text.endswith('USDT') and message.text in crypto_config.get('monitoring', {}).get('pairs', []))
async def view_crypto_pair_details(message: types.Message):
    pair = message.text.strip().upper()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {pair}")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã, —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ —Ç.–¥.
    await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–∞—Ä–µ {pair} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è –∏–∑ main_menu.py) ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ
@crypto_router.callback_query(F.data == "crypto_settings")
async def process_crypto_settings(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # from handlers import ADMIN_ID
    # if callback.from_user.id != ADMIN_ID:
    #     await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    #     return

    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞.",
        reply_markup=get_crypto_settings_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π
@crypto_router.callback_query(F.data == "crypto_settings_api_keys")
async def process_settings_api_keys(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–µ–π")
    await callback.message.edit_text(
        "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á:",
        reply_markup=get_api_key_settings_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ API –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Binance)
@crypto_router.callback_query(F.data.startswith("crypto_settings_api_"))
async def process_settings_select_api_type(callback: types.CallbackQuery):
    api_type = callback.data.split("_")[-1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–∞ –¥–ª—è {api_type}")

    user_states[callback.from_user.id] = {'state': 'waiting_api_key', 'api_type': api_type}

    await callback.message.edit_text(
        f"üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –¥–ª—è {api_type.capitalize()}.\n\n"
        "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –î–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
@crypto_router.callback_query(F.data == "crypto_settings_pairs")
async def process_settings_pairs(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ø–∞—Ä –∏–∑ main_menu.py
    from .main_menu import get_crypto_pairs_menu

    pairs = crypto_config.get('monitoring', {}).get('pairs', ['BTCUSDT', 'ETHUSDT'])

    await callback.message.edit_text(
        "üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–∏\n\n"
        f"–¢–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {', '.join(pairs)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_pairs_menu() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ main_menu.py
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
@crypto_router.callback_query(F.data == "crypto_settings_signals")
async def process_settings_signals(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤")
    await callback.message.edit_text(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–≥–Ω–∞–ª–∞—Ö.",
        reply_markup=get_signal_settings_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@crypto_router.callback_query(F.data == "crypto_settings_signals_toggle")
async def process_settings_signals_toggle(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–æ–≤")
    signals_config = crypto_config.get('signals', {})
    signals_enabled = signals_config.get('enabled', True)
    signals_config['enabled'] = not signals_enabled
    crypto_config['signals'] = signals_config
    save_crypto_config()

    await callback.message.edit_text(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–≥–Ω–∞–ª–∞—Ö.",
        reply_markup=get_signal_settings_keyboard() # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer("–°—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@crypto_router.callback_query(F.data == "crypto_settings_signals_channel")
async def process_settings_signals_channel(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–Ω–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    user_states[callback.from_user.id] = {'state': 'waiting_signal_channel'}
    await callback.message.edit_text(
        "üîî –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ @username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö
@crypto_router.callback_query(F.data == "crypto_settings_signals_charts_toggle")
async def process_settings_signals_charts_toggle(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Å–∏–≥–Ω–∞–ª–∞—Ö")
    signals_config = crypto_config.get('signals', {})
    include_charts = signals_config.get('include_charts', True)
    signals_config['include_charts'] = not include_charts
    crypto_config['signals'] = signals_config
    save_crypto_config()

    await callback.message.edit_text(
        "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
        "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∏–≥–Ω–∞–ª–∞—Ö.",
        reply_markup=get_signal_settings_keyboard() # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–ª–¥–∞—É–Ω–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
@crypto_router.callback_query(F.data == "crypto_settings_signals_cooldown")
async def process_settings_signals_cooldown(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫—É–ª–¥–∞—É–Ω–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    user_states[callback.from_user.id] = {'state': 'waiting_signal_cooldown'}
    current_cooldown = crypto_config.get('signals', {}).get('notification_cooldown', 3600)
    await callback.message.edit_text(
        f"üîî –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—Ç–µ–∫—É—â–µ–µ: {current_cooldown} —Å–µ–∫).\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, 3600 –¥–ª—è 1 —á–∞—Å–∞."
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ
@crypto_router.callback_query(F.data == "crypto_settings_back")
async def process_settings_back(callback: types.CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—Ä–∏–ø—Ç–æ")
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –º–µ–Ω—é –∏–∑ main_menu.py
    from .main_menu import get_crypto_main_menu

    await callback.message.edit_text(
        "üöÄ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Smart Money\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_crypto_main_menu()
    )
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π) ---

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –ª–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
@crypto_router.message()
async def process_user_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    global user_states

    user_state = user_states.get(message.from_user.id)
    if not user_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    state = user_state.get('state')

    if state == 'waiting_api_key':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
        api_type = user_state.get('api_type')
        logger.info(f"–ü–æ–ª—É—á–µ–Ω API –∫–ª—é—á –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –¥–ª—è {api_type}")

        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            await message.delete()

            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            api_key = message.text.strip()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'api_keys' not in crypto_config:
                crypto_config['api_keys'] = {}

            crypto_config['api_keys'][api_type] = api_key

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
            save_crypto_config()

            logger.debug(f"API –∫–ª—é—á –¥–ª—è {api_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[message.from_user.id]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            await message.answer(
                f"‚úÖ API –∫–ª—é—á –¥–ª—è {api_type.capitalize()} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º API –∫–ª—é—á–µ–π."
            )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
            temp_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –∫–ª—é—á–µ–π...")

            # –°–æ–∑–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ API –∫–ª—é—á–∞
            callback = types.CallbackQuery(
                id="crypto_settings_api_keys", # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
                from_user=message.from_user,
                chat_instance=str(message.chat.id),
                message=temp_msg,
                data="crypto_settings_api_keys"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è callback
            callback.bot = bot_instance

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API –∫–ª—é—á–µ–π
            await process_settings_api_keys(callback)

        except Exception as e:
            log_exception(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞ –¥–ª—è {api_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞: {e}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
            except Exception as e2:
                log_exception(e2, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

    elif state == 'waiting_pair_name':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            pair = message.text.strip().upper()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã (–¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT)
            if not pair.endswith('USDT'):
                await message.answer(
                    "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT).\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã
            monitoring_config = crypto_config.get('monitoring', {})
            pairs = monitoring_config.get('pairs', []) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–∞—Ä–∞
            if pair in pairs:
                await message.answer(
                    f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä."
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
            pairs.append(pair)
            monitoring_config['pairs'] = pairs
            crypto_config['monitoring'] = monitoring_config

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
            save_crypto_config()

            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair}, —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {pairs}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[message.from_user.id]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            await message.answer(
                f"‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."
            )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
            temp_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

            # –°–æ–∑–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            callback = types.CallbackQuery(
                id="crypto_settings_pairs", # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–∞—Ä
                from_user=message.from_user,
                chat_instance=str(message.chat.id),
                message=temp_msg,
                data="crypto_settings_pairs"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è callback
            callback.bot = bot_instance

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            await process_settings_pairs(callback)

        except Exception as e:
            log_exception(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã: {e}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
            except Exception as e2:
                log_exception(e2, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

    elif state == 'waiting_pair_to_remove':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            pair_to_remove = message.text.strip().upper()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã
            monitoring_config = crypto_config.get('monitoring', {})
            pairs = monitoring_config.get('pairs', [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
            if pair_to_remove not in pairs:
                await message.answer(
                    f"‚ö†Ô∏è –ü–∞—Ä–∞ {pair_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                )
                return

            # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
            pairs.remove(pair_to_remove)
            monitoring_config['pairs'] = pairs
            crypto_config['monitoring'] = monitoring_config

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
            save_crypto_config()

            logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair_to_remove}, —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã: {pairs}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_states[message.from_user.id]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            await message.answer(
                f"‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä."
            )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
            temp_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

            # –°–æ–∑–¥–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            callback = types.CallbackQuery(
                id="crypto_settings_pairs", # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback_data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –ø–∞—Ä
                from_user=message.from_user,
                chat_instance=str(message.chat.id),
                message=temp_msg,
                data="crypto_settings_pairs"
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –¥–ª—è callback
            callback.bot = bot_instance

            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            await process_settings_pairs(callback)

        except Exception as e:
            log_exception(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            try:
                await message.answer(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã: {e}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )
            except Exception as e2:
                log_exception(e2, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")

    elif state == 'waiting_signal_channel':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info(f"–ü–æ–ª—É—á–µ–Ω ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

        try:
            channel_id = message.text.strip()

            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @ –∏–ª–∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º
            if not (channel_id.startswith('@') or channel_id.lstrip('-').isdigit()):
                 await message.answer(
                    "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID."
                )
                 return

            signals_config = crypto_config.get('signals', {})
            signals_config['channel_id'] = channel_id
