#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket –∫–ª–∏–µ–Ω—Ç–∞ MEXC
"""

import asyncio
import logging
from mexc_websocket_client import MEXCWebSocketClient, StreamType

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def simple_trade_callback(trade_data):
    """–ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è —Å–¥–µ–ª–æ–∫"""
    print(f"üí± {trade_data['symbol']}: {trade_data['price']} x {trade_data['quantity']} ({trade_data['trade_type']})")

async def simple_orderbook_callback(order_book):
    """–ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
    best_bid = order_book.get_best_bid()
    best_ask = order_book.get_best_ask()
    
    if best_bid and best_ask:
        spread = float(best_ask[0]) - float(best_bid[0])
        print(f"üìö {order_book.symbol}: Bid {best_bid[0]} | Ask {best_ask[0]} | Spread {spread:.2f}")

async def test_basic_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîå –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    client = MEXCWebSocketClient()
    
    try:
        await client.connect()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ—Å—Ç–æ–π ping
        await client.ping()
        print("‚úÖ Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        await client.disconnect()
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_trades_stream():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫"""
    print("\nüí± –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫...")
    
    client = MEXCWebSocketClient()
    
    try:
        await client.connect()
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏
        await client.subscribe(
            StreamType.TRADES,
            "BTCUSDT",
            interval="100ms",
            callback=simple_trade_callback
        )
        
        print("üì° –û–∂–∏–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ (10 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(10)
        
        await client.disconnect()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_orderbook():
    """–¢–µ—Å—Ç –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
    print("\nüìö –¢–µ—Å—Ç –æ—Ä–¥–µ—Ä–±—É–∫–∞...")
    
    client = MEXCWebSocketClient()
    
    try:
        await client.connect()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞...")
        await client.load_order_book_snapshot("BTCUSDT")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–ª—É–±–∏–Ω—É
        await client.subscribe(
            StreamType.DEPTH,
            "BTCUSDT",
            interval="100ms",
            callback=simple_orderbook_callback
        )
        
        print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞ (10 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(10)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        order_book = client.get_order_book("BTCUSDT")
        if order_book:
            print(f"\nüìä –¢–µ–∫—É—â–∏–π –æ—Ä–¥–µ—Ä–±—É–∫ {order_book.symbol}:")
            print(f"  –£—Ä–æ–≤–Ω–µ–π –ø–æ–∫—É–ø–∫–∏: {len(order_book.bids)}")
            print(f"  –£—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏: {len(order_book.asks)}")
            
            best_bid = order_book.get_best_bid()
            best_ask = order_book.get_best_ask()
            
            if best_bid and best_ask:
                print(f"  –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {best_bid[0]} ({best_bid[1]})")
                print(f"  –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {best_ask[0]} ({best_ask[1]})")
                print(f"  –°–ø—Ä–µ–¥: {float(best_ask[0]) - float(best_bid[0]):.2f}")
        
        await client.disconnect()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MEXC WEB SOCKET CLIENT")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await test_basic_connection()
    
    # –¢–µ—Å—Ç 2: –ü–æ—Ç–æ–∫ —Å–¥–µ–ª–æ–∫
    await test_trades_stream()
    
    # –¢–µ—Å—Ç 3: –û—Ä–¥–µ—Ä–±—É–∫
    await test_orderbook()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 