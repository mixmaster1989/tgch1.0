#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
"""

import os
import re
import glob

def check_errors():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö"""
    print("üîç –ü–û–ò–°–ö –û–®–ò–ë–û–ö –í –õ–û–ì–ê–•:")
    print("=" * 50)
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
    log_files = []
    
    # PM2 –ª–æ–≥–∏
    pm2_logs = glob.glob("/home/user1/.pm2/logs/mex-trading-bot-*.log")
    log_files.extend(pm2_logs)
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
    local_logs = ["bot.log", "pnl_monitor.log"]
    for log_file in local_logs:
        if os.path.exists(log_file):
            log_files.append(log_file)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}")
    
    error_patterns = [
        r'local variable.*referenced before assignment',
        r'UnboundLocalError.*time',
        r'NameError.*time',
        r'Exception.*time',
        r'Traceback.*time',
        r'Error.*time',
        r'‚ùå.*–û—à–∏–±–∫–∞.*–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏.*time',
        r'‚ùå.*–û—à–∏–±–∫–∞.*time'
    ]
    
    found_errors = False
    
    for log_file in log_files:
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º: {log_file}")
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å—Ç—Ä–æ–∫
            recent_lines = lines[-500:] if len(lines) > 500 else lines
            
            for i, line in enumerate(recent_lines):
                for pattern in error_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        found_errors = True
                        print(f"üö® –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê –≤ —Å—Ç—Ä–æ–∫–µ {len(lines) - 500 + i + 1}:")
                        print(f"   {line.strip()}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        start = max(0, i - 3)
                        end = min(len(recent_lines), i + 4)
                        print("   –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                        for j in range(start, end):
                            marker = ">>> " if j == i else "    "
                            print(f"{marker}{recent_lines[j].strip()}")
                        print()
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")
    
    if not found_errors:
        print("‚úÖ –û—à–∏–±–æ–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'time' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è 'time' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—à–∏–±–æ–∫
    print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö 'time' –í –ö–û–ù–¢–ï–ö–°–¢–ï –û–®–ò–ë–û–ö:")
    print("=" * 50)
    
    for log_file in log_files:
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å 'time' –∏ –æ—à–∏–±–∫–∞–º–∏
            lines = content.split('\n')
            time_error_lines = []
            
            for i, line in enumerate(lines):
                if ('time' in line.lower() and 
                    ('error' in line.lower() or 'exception' in line.lower() or 'traceback' in line.lower() or '‚ùå' in line)):
                    time_error_lines.append((i + 1, line.strip()))
            
            if time_error_lines:
                print(f"\nüìÅ –í —Ñ–∞–π–ª–µ {log_file} –Ω–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å 'time' –∏ –æ—à–∏–±–∫–∞–º–∏:")
                for line_num, line in time_error_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                    print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {line}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {log_file}: {e}")

if __name__ == "__main__":
    check_errors()
