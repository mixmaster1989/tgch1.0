import asyncio
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from openrouter_manager import OpenRouterManager
from market_analyzer import MarketAnalyzer
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

class AIChatBot:
    def __init__(self):
        self.openrouter = OpenRouterManager()
        self.market_analyzer = MarketAnalyzer()
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.target_chat_id = int(TELEGRAM_CHAT_ID)
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if update.effective_chat.id != self.target_chat_id:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        if not update.message or not update.message.text:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            return
            
        user_message = update.message.text.strip().lower()
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–∏–º—É–ª—è—Ü–∏–∏
        if user_message == "—Å–∏–º—É–ª—è—Ü–∏—è":
            await self.run_simulation(update, context)
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await context.bot.send_chat_action(chat_id=self.target_chat_id, action="typing")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            prompt = f"""–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π –≥—Ä—É–ø–ø–µ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
            
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {update.message.text}

–î–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç."""
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —á–µ—Ä–µ–∑ silver –∫–ª—é—á–∏
            result = self.openrouter.request_with_silver_keys(prompt, "deepseek/deepseek-r1-0528:free")
            
            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
                await update.message.reply_text(result['response'])
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ò–ò: {result['response']}")
                
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
    
    async def run_simulation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è"""
        try:
            await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.market_analyzer.get_market_data()
            await update.message.reply_text(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            if len(market_data) == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await update.message.reply_text("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            candidates = self.market_analyzer.filter_trading_candidates(market_data[:50])
            
            if len(candidates) == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                return
            
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-3
            recommendations = []
            for i, candidate in enumerate(candidates[:3]):
                await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑ {candidate['symbol']} ({i+1}/3)...")
                
                ai_analysis = self.market_analyzer.analyze_with_ai(candidate)
                quantity = self.market_analyzer.calculate_position_size(
                    candidate['symbol'], candidate['current_price'], candidate['score']
                )
                
                recommendation = {
                    'symbol': candidate['symbol'],
                    'action': ai_analysis['recommendation'],
                    'confidence': ai_analysis['confidence'],
                    'quantity': quantity,
                    'price': candidate['current_price'],
                    'score': candidate['score'],
                    'reasons': candidate['reasons'],
                    'ai_analysis': ai_analysis['analysis'],
                    'position_size_usdt': quantity * candidate['current_price']
                }
                recommendations.append(recommendation)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await update.message.reply_text("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            
            for i, rec in enumerate(recommendations, 1):
                action_emoji = "üü¢" if rec['action'] == 'BUY' else "üî¥" if rec['action'] == 'SELL' else "üü°"
                
                message = f"{action_emoji} {i}. {rec['symbol']}\n"
                message += f"‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {rec['action']}\n"
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.1%}\n"
                message += f"üí∞ –¶–µ–Ω–∞: ${rec['price']:.6f}\n"
                message += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rec['quantity']}\n"
                message += f"üíµ –†–∞–∑–º–µ—Ä: ${rec['position_size_usdt']:.2f}\n"
                message += f"‚≠ê –°–∫–æ—Ä: {rec['score']}\n"
                message += f"üìÑ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(rec['reasons'])}\n\n"
                message += f"ü§ñ –ê–Ω–∞–ª–∏–∑: {rec['ai_analysis']}"
                
                await update.message.reply_text(message)
            
            # –ò—Ç–æ–≥–æ
            total_usdt = sum(rec['position_size_usdt'] for rec in recommendations)
            buy_count = sum(1 for rec in recommendations if rec['action'] == 'BUY')
            
            summary = f"üìä –ò–¢–û–ì–û:\n"
            summary += f"üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(recommendations)} –º–æ–Ω–µ—Ç\n"
            summary += f"üü¢ –ö –ø–æ–∫—É–ø–∫–µ: {buy_count}\n"
            summary += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${total_usdt:.2f}"
            
            await update.message.reply_text(summary)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫ AI Chat Bot...")
        self.app.run_polling()