#!/usr/bin/env python3
"""
IncomeSaver ‚Äî ¬´–ø–∞—Ä–∫–æ–≤–∫–∞¬ª –ª–∏—à–Ω–µ–≥–æ USDT –≤ USDP –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
- threshold_usdt = 395.0
- unit_amount_usdt = 1.0
- min_reserve_usdt = 20.0
- cooldown_sec = 300
- symbol = 'USDPUSDT'
"""

import time
import logging
from typing import Optional, Dict

from mex_api import MexAPI
from mexc_advanced_api import MexAdvancedAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logger = logging.getLogger(__name__)


class IncomeSaver:
    def __init__(self,
                 threshold_usdt: float = 395.0,
                 unit_amount_usdt: float = 1.0,
                 min_reserve_usdt: float = 20.0,
                 cooldown_sec: int = 300,
                 symbol: str = 'USDPUSDT'):
        self.mex_api = MexAPI()
        self.mex_adv = MexAdvancedAPI()
        self.threshold_usdt = threshold_usdt
        self.unit_amount_usdt = unit_amount_usdt
        self.min_reserve_usdt = min_reserve_usdt
        self.cooldown_sec = cooldown_sec
        self.symbol = symbol
        self._last_action_ts = 0
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID

    # ==== balances ====
    def get_usdt_balance(self) -> float:
        try:
            account_info = self.mex_api.get_account_info()
            if not isinstance(account_info, dict):
                return 0.0
            for b in account_info.get('balances', []):
                if b.get('asset') == 'USDT':
                    return float(b.get('free', 0))
            return 0.0
        except Exception as e:
            logger.warning(f"IncomeSaver: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0

    def get_usdc_balance(self) -> float:
        try:
            account_info = self.mex_api.get_account_info()
            if not isinstance(account_info, dict):
                return 0.0
            for b in account_info.get('balances', []):
                if b.get('asset') == 'USDC':
                    return float(b.get('free', 0))
            return 0.0
        except Exception as e:
            logger.warning(f"IncomeSaver: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0

    # ==== rules and rounding ====
    @staticmethod
    def _round_to_step(value: float, step: float) -> float:
        if step <= 0:
            return value
        return (int(value / step)) * step

    def _load_symbol_rules(self) -> Dict:
        try:
            rules = self.mex_adv.get_symbol_rules(self.symbol)
            return rules or {}
        except Exception as e:
            logger.warning(f"IncomeSaver: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {self.symbol}: {e}")
            return {}

    # ==== price ====
    def get_price(self) -> Optional[float]:
        try:
            ticker = self.mex_api.get_ticker_price(self.symbol)
            p = float(ticker.get('price')) if isinstance(ticker, dict) and 'price' in ticker else None
            return p
        except Exception as e:
            logger.warning(f"IncomeSaver: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {self.symbol}: {e}")
            return None

    def get_symbol_price(self, symbol: str) -> Optional[float]:
        try:
            t = self.mex_api.get_ticker_price(symbol)
            if isinstance(t, dict) and 'price' in t:
                return float(t['price'])
            return None
        except Exception:
            return None

    def get_portfolio_value_usdt_excluding_usdp(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USDT, –∏—Å–∫–ª—é—á–∞—è USDP."""
        try:
            account_info = self.mex_api.get_account_info()
            if not isinstance(account_info, dict):
                return 0.0
            total_usdt_value = 0.0
            balances = account_info.get('balances', []) or []
            # –ö—É—Ä—Å USDCUSDT –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDC‚ÜíUSDT
            usdc_usdt = self.get_symbol_price('USDCUSDT') or 1.0
            for b in balances:
                try:
                    asset = b.get('asset')
                    free_amt = float(b.get('free', 0) or 0)
                    locked_amt = float(b.get('locked', 0) or 0)
                    total_amt = free_amt + locked_amt
                    if total_amt <= 0:
                        continue
                    if asset == 'USDP':
                        # –ü–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏—Å–∫–ª—é—á–∞–µ—Ç—Å—è
                        continue
                    if asset == 'USDT':
                        total_usdt_value += total_amt
                    elif asset == 'USDC':
                        total_usdt_value += total_amt * usdc_usdt
                    else:
                        price = self.get_symbol_price(f"{asset}USDT")
                        if price:
                            total_usdt_value += total_amt * price
                except Exception:
                    continue
            return total_usdt_value
        except Exception as e:
            logger.warning(f"IncomeSaver: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return 0.0

    def ensure_usdt_liquidity(self, required_usdt: float) -> bool:
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDT. –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ ‚Äî –ø—Ä–æ–¥–∞—Ç—å USDC –∑–∞ USDT (USDCUSDT SELL)."""
        try:
            if required_usdt <= 0:
                return True
            usdt_free = self.get_usdt_balance()
            if usdt_free >= required_usdt:
                return True
            deficit = required_usdt - usdt_free
            usdc_free = self.get_usdc_balance()
            if usdc_free <= 0:
                return False
            price = self.get_symbol_price('USDCUSDT') or 1.0
            # –°–∫–æ–ª—å–∫–æ USDC –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—ã–π USDT
            qty_usdc = deficit / max(price, 1e-8)
            # –û–∫—Ä—É–≥–ª–∏–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (—Ç–∏–ø–∏—á–Ω–æ –¥–ª—è —Å—Ç–µ–π–±–ª–æ–≤) –∏ –¥–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            qty_usdc = round(qty_usdc * 1.01, 2)
            if qty_usdc > usdc_free:
                qty_usdc = round(usdc_free, 2)
            if qty_usdc <= 0:
                return False
            order = self.mex_api.place_market_order('USDCUSDT', 'SELL', qty_usdc)
            return bool(order and isinstance(order, dict) and order.get('orderId'))
        except Exception as e:
            logger.warning(f"IncomeSaver: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å USDT –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {e}")
            return False

    # ==== telegram ====
    def _send_telegram(self, text: str) -> None:
        try:
            if not self.bot_token or not self.chat_id:
                return
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = { 'chat_id': self.chat_id, 'text': text, 'parse_mode': 'HTML' }
            requests.post(url, data=data, timeout=10)
        except Exception:
            pass

    # ==== core ====
    def _eligible_now(self, amount: float) -> bool:
        if (time.time() - self._last_action_ts) < self.cooldown_sec:
            return False
        portfolio_value = self.get_portfolio_value_usdt_excluding_usdp()
        # –ü–æ—Ä–æ–≥ –ø–æ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∏—Å–∫–ª—é—á–∞—è USDP)
        if portfolio_value < (self.threshold_usdt + amount):
            return False
        return True

    def try_park_usdt_to_usdp(self, unit_amount_usdt: Optional[float] = None) -> Dict:
        """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è ¬´—Å–ø—Ä—è—Ç–∞—Ç—å¬ª unit_amount_usdt –≤ USDP (—á–µ—Ä–µ–∑ USDPUSDT BUY).

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å success, –ª–∏–±–æ –æ—à–∏–±–∫–æ–π –∏ –ø—Ä–∏—á–∏–Ω–æ–π.
        """
        amount = unit_amount_usdt if unit_amount_usdt is not None else self.unit_amount_usdt

        if amount <= 0:
            return {'success': False, 'error': 'amount_must_be_positive'}

        if not self._eligible_now(amount):
            msg = (
                f"<b>üí§ PARK SKIPPED</b> ‚Äî —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
                f"–ü–æ—Ä–æ–≥: ${self.threshold_usdt:.2f}, –ø–æ–ø—ã—Ç–∫–∞ —Å–ø—Ä—è—Ç–∞—Ç—å: ${amount:.2f}"
            )
            self._send_telegram(msg)
            return {'success': False, 'error': 'not_eligible_now'}

        # –û–±–µ—Å–ø–µ—á–∏–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDT –Ω–∞ —Å—É–º–º—É –ø–∞—Ä–∫–æ–≤–∫–∏ (–ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø—Ä–æ–¥–∞–¥–∏–º USDC‚ÜíUSDT)
        if not self.ensure_usdt_liquidity(amount):
            msg = (
                f"<b>‚ùå PARK FAIL</b> ‚Äî –Ω–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ USDT –¥–ª—è ${amount:.2f}\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é USDC‚ÜíUSDT –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ –±–∞–ª–∞–Ω—Å"
            )
            self._send_telegram(msg)
            return {'success': False, 'error': 'insufficient_liquidity_usdt'}

        rules = self._load_symbol_rules()
        price = self.get_price()
        if not price or price <= 0:
            return {'success': False, 'error': 'no_price'}

        step_size = rules.get('stepSize', 0.0) or 0.0
        tick_size = rules.get('tickSize', 0.0) or 0.0
        min_notional = rules.get('minNotional', 5.0) or 5.0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞
        if amount < min_notional:
            # –í—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∑–≤–æ–ª–∏–º —Ç–µ—Å—Ç, –Ω–æ –ø–æ–º–µ—Ç–∏–º –∫–∞–∫ –≤–µ—Ä–æ—è—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π –±–∏—Ä–∂–µ–π
            pass

        # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ USDP: qty = amount / price
        raw_qty = amount / price
        qty = raw_qty
        if step_size > 0:
            qty = self._round_to_step(raw_qty, step_size)
            if qty <= 0:
                qty = step_size

        # –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–æ—Ç–∏–æ–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        notional = qty * price
        if notional < min_notional and amount >= min_notional:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–Ω—è—Ç—å qty –¥–æ –º–∏–Ω–∏–º—É–º–∞
            needed_qty = min_notional / price
            if step_size > 0:
                # –æ–∫—Ä—É–≥–ª—è–µ–º –≤–Ω–∏–∑ –¥–æ —Å–µ—Ç–∫–∏ —à–∞–≥–∞, –Ω–æ –Ω–µ –Ω–∏–∂–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ qty
                k = int(needed_qty / step_size)
                qty2 = max(qty, k * step_size)
            else:
                qty2 = max(qty, needed_qty)
            qty = qty2
            notional = qty * price

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É (tickSize) ‚Äì —Ç–æ—Ä–≥–æ–≤–ª—è –º–∞—Ä–∫–µ—Ç–æ–º, —Ç–∞–∫ —á—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        # –†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ç BUY (—á–µ—Ä–µ–∑ MexAPI.place_market_order)
        order = self.mex_api.place_market_order(self.symbol, 'BUY', qty)

        if order and isinstance(order, dict) and order.get('orderId'):
            self._last_action_ts = time.time()
            msg = (
                f"<b>‚úÖ PARK OK</b> ‚Äî USDT‚ÜíUSDP\n"
                f"–°—É–º–º–∞: ${amount:.2f}\n"
                f"Qty: {qty:.4f} USDP @ ~${price:.4f}\n"
                f"Notional: ${notional:.2f}\n"
                f"OrderId: <code>{order['orderId']}</code>"
            )
            self._send_telegram(msg)
            return {
                'success': True,
                'symbol': self.symbol,
                'order_id': order['orderId'],
                'qty': qty,
                'price_snapshot': price,
                'notional': notional,
                'note': 'placed_market_buy_usdpusdt'
            }
        msg = (
            f"<b>‚ùå PARK FAIL</b> ‚Äî –æ—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞\n"
            f"–°—É–º–º–∞: ${amount:.2f}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {order}"
        )
        self._send_telegram(msg)
        return {'success': False, 'error': f'order_failed: {order}'}


