#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import asyncio
from perplexity_analyzer import PerplexityAnalyzer
from openrouter_manager import OpenRouterManager

def test_openrouter_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å OpenRouter –∫–ª—é—á–µ–π"""
    print("=== –ü–†–û–í–ï–†–ö–ê OPENROUTER –°–¢–ê–¢–£–°–ê ===")
    
    try:
        openrouter = OpenRouterManager()
        status = openrouter.get_status()
        
        print(f"Golden key –¥–æ—Å—Ç—É–ø–µ–Ω: {status['golden_key_available']}")
        print(f"Silver –∫–ª—é—á–µ–π –≤—Å–µ–≥–æ: {status['silver_keys_total']}")
        print(f"Silver –∫–ª—é—á–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {status['silver_keys_failed']}")
        print(f"Silver –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ: {status['silver_keys_available']}")
        
        return status['silver_keys_available'] > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def test_simple_perplexity():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("\n=== –ü–†–û–°–¢–û–ô –¢–ï–°–¢ PERPLEXITY ===")
    
    try:
        analyzer = PerplexityAnalyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è ETH
        symbol = "ETHUSDT"
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}...")
        
        news = await analyzer.analyze_coin_news(symbol)
        
        if news and "news_analysis" in news:
            news_data = news["news_analysis"]
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {news_data.get('sentiment', 'N/A')}")
            print(f"   Impact Score: {news_data.get('impact_score', 'N/A')}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {news_data.get('confidence', 'N/A')}")
            
            if "key_events" in news_data:
                print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(news_data['key_events'])}")
                for i, event in enumerate(news_data['key_events'][:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"     {i+1}. {event.get('title', 'N/A')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {news}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OpenRouter
    if not test_openrouter_status():
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π OpenRouter")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    success = asyncio.run(test_simple_perplexity())
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
