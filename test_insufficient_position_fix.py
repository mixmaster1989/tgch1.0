#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "Insufficient position"
"""

import asyncio
from portfolio_balancer import PortfolioBalancer

async def test_insufficient_position_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò 'INSUFFICIENT POSITION'")
    print("=" * 70)
    
    balancer = PortfolioBalancer()
    
    # –¢–µ—Å—Ç: –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ª–æ–≥–æ–≤
    print("\nüìä –°–¶–ï–ù–ê–†–ò–ô –ò–ó –õ–û–ì–û–í:")
    print("   BTC: 77.1% (—Ü–µ–ª—å: 60%) - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å")
    print("   ETH: 22.9% (—Ü–µ–ª—å: 40%) - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å")
    print("   –ü—Ä–æ–¥–∞–ª–∏ BTC –Ω–∞ $58.32")
    print("   –ü—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å ETH - –æ—à–∏–±–∫–∞ 'Insufficient position'")
    
    # –ú–æ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    def mock_balances():
        return {'BTC': 0.001, 'ETH': 0.01, 'USDC': 5.0}  # –ú–∞–ª–æ USDC
    
    def mock_values():
        return {
            'btc_value': 131.0,  # 77.1% –æ—Ç $170.43
            'eth_value': 39.0,   # 22.9% –æ—Ç $170.43
            'total_value': 170.43,
            'btc_price': 112585.0,
            'eth_price': 3000.0,
            'btc_ratio': 0.771,
            'eth_ratio': 0.229
        }
    
    balancer.get_portfolio_balances = mock_balances
    balancer.get_portfolio_values = lambda b: mock_values()
    balancer.get_usdc_balance = lambda: 5.0  # –ú–∞–ª–æ USDC
    
    # –ú–æ–∫–∞–µ–º PnL
    def mock_pnl(asset, balances, values):
        return 10.0 if asset == 'BTC' else -5.0  # BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ
    
    balancer.get_asset_pnl = mock_pnl
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤
    result = balancer.calculate_rebalance_trades(mock_balances(), mock_values())
    
    print(f"\nüìã –ü–õ–ê–ù –¢–û–†–ì–û–í:")
    print(f"   üîÑ –¢–æ—Ä–≥–æ–≤: {len(result['trades'])}")
    
    for i, trade in enumerate(result['trades'], 1):
        print(f"   {i}. {trade['action']} {trade['symbol']}")
        print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade['quantity']:.6f}")
        print(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: ${trade['value']:.2f}")
        print(f"      –ü—Ä–∏—á–∏–Ω–∞: {trade.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
    print(f"\nüîç –ê–ù–ê–õ–ò–ó:")
    print(f"   üìä BTC PnL: $10.0 (–ø–ª—é—Å) - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å")
    print(f"   üìä ETH PnL: $-5.0 (–º–∏–Ω—É—Å) - –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å")
    print(f"   üí∞ USDC: $5.0 (–º–∞–ª–æ)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–ª–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    sell_trades = [t for t in result['trades'] if t['action'] == 'SELL']
    buy_trades = [t for t in result['trades'] if t['action'] == 'BUY']
    
    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò:")
    print(f"   üî¥ –ü—Ä–æ–¥–∞–∂: {len(sell_trades)}")
    print(f"   üü¢ –ü–æ–∫—É–ø–æ–∫: {len(buy_trades)}")
    
    if len(sell_trades) > 0 and len(buy_trades) > 0:
        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–∞–µ–º BTC, –ø–æ—Ç–æ–º –ø–æ–∫—É–ø–∞–µ–º ETH")
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC")
        print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π")
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤")
    
    print("\n" + "=" * 70)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüìã –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   1. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ USDC –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π")
    print("   2. ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ SELL")
    print("   3. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ SELL, –ø–æ—Ç–æ–º BUY")
    print("   4. ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏")
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("   ‚Ä¢ –û—à–∏–±–∫–∞ 'Insufficient position' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print("   ‚Ä¢ –¢–æ—Ä–≥–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
    print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(test_insufficient_position_fix())
