#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
"""

import asyncio
import time
from advanced_correlation_analyzer import advanced_correlation_analyzer

async def debug_correlations():
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 40)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        timestamp = int(time.time() * 1000)
        
        print("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # ETHUSDT –¥–∞–Ω–Ω—ã–µ
        for i in range(20):
            eth_price = 3700.0 * (1 + (i * 0.001 - 0.01))
            advanced_correlation_analyzer.add_price_data('ETHUSDT', eth_price, timestamp + i * 1000)
        
        # BTCUSDT –¥–∞–Ω–Ω—ã–µ
        for i in range(20):
            btc_price = 45000.0 * (1 + (i * 0.002 - 0.02))
            advanced_correlation_analyzer.add_price_data('BTCUSDT', btc_price, timestamp + i * 1000)
        
        # ADAUSDT –¥–∞–Ω–Ω—ã–µ
        for i in range(20):
            ada_price = 0.5 * (1 + (i * 0.001 - 0.01))
            advanced_correlation_analyzer.add_price_data('ADAUSDT', ada_price, timestamp + i * 1000)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        eth_analysis = advanced_correlation_analyzer.get_comprehensive_correlation_analysis('ETHUSDT')
        
        print(f"\nüìä –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ö–û–†–†–ï–õ–Ø–¶–ò–ô:")
        print(f"   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(eth_analysis)}")
        print(f"   –ö–ª—é—á–∏: {list(eth_analysis.keys())}")
        
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        for key, value in eth_analysis.items():
            print(f"   {key}: {type(value)} = {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if 'basic_correlations' in eth_analysis:
            print(f"\nüìä –ë–ê–ó–û–í–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
            basic_corr = eth_analysis['basic_correlations']
            for asset, corr_data in basic_corr.items():
                print(f"   {asset}: {corr_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if 'market_regime' in eth_analysis:
            print(f"\nüìä –†–´–ù–û–ß–ù–´–ô –†–ï–ñ–ò–ú:")
            market_regime = eth_analysis['market_regime']
            for key, value in market_regime.items():
                print(f"   {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(debug_correlations()) 