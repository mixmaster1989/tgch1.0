print('DIALOGS VERY TOP')
import sys
print('DIALOGS AFTER sys')
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, 
                           QComboBox, QLineEdit, QTextEdit, QFrame, QWizard, QWizardPage,
                           QFileDialog, QMessageBox, QScrollArea, QWidget, QCheckBox)
print('DIALOGS AFTER PyQt5.QtWidgets')
from PyQt5.QtCore import Qt
print('DIALOGS AFTER QtCore')
from PyQt5.QtGui import QFont, QPixmap
print('DIALOGS AFTER QtGui')
from block import Block
print('DIALOGS AFTER block')
from constants import BLOCK_TYPES
print('DIALOGS AFTER constants')
from code_gen import generate_code
print('DIALOGS AFTER code_gen')
import numpy as np
print('DIALOGS AFTER numpy')
import matplotlib.pyplot as plt
print('DIALOGS AFTER plt')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
print('DIALOGS AFTER FigureCanvas')
import pyqtgraph as pg
from pyqtgraph.Qt import QtWidgets

class TemplateDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–®–∞–±–ª–æ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        self.setMinimumWidth(600)
        self.setMinimumHeight(400)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        templates = [
            {"name": "EMA 14", "block_type": "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è", "params": {"–¢–∏–ø": "EMA", "–ü–µ—Ä–∏–æ–¥": "14", "–ò—Å—Ç–æ—á–Ω–∏–∫": "close"}},
            {"name": "RSI 14", "block_type": "RSI", "params": {"–ü–µ—Ä–∏–æ–¥": "14", "–ò—Å—Ç–æ—á–Ω–∏–∫": "close"}},
            {"name": "MACD —Å—Ç–∞–Ω–¥–∞—Ä—Ç", "block_type": "MACD", "params": {"–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥": "12", "–ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥": "26", "–°–∏–≥–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥": "9"}},
            {"name": "Bollinger Bands 20", "block_type": "Bollinger Bands", "params": {"–ü–µ—Ä–∏–æ–¥": "20", "–ú–Ω–æ–∂–∏—Ç–µ–ª—å": "2.0", "–ò—Å—Ç–æ—á–Ω–∏–∫": "close"}},
            {"name": "Stochastic 14/3", "block_type": "Stochastic", "params": {"–ü–µ—Ä–∏–æ–¥ K": "14", "–ü–µ—Ä–∏–æ–¥ D": "3", "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ": "3"}},
            {"name": "ATR 14", "block_type": "ATR", "params": {"–ü–µ—Ä–∏–æ–¥": "14"}},
            {"name": "CCI 20", "block_type": "CCI", "params": {"–ü–µ—Ä–∏–æ–¥": "20", "–ò—Å—Ç–æ—á–Ω–∏–∫": "hlc3"}},
            {"name": "–û–±—ä—ë–º MA 20", "block_type": "–û–±—ä–µ–º", "params": {"–ü–µ—Ä–∏–æ–¥": "20", "–ü–æ—Ä–æ–≥": "2.0"}},
            {"name": "–¢—Ä–µ–Ω–¥ MA 50", "block_type": "–¢—Ä–µ–Ω–¥", "params": {"–ü–µ—Ä–∏–æ–¥": "50", "–ü–æ—Ä–æ–≥": "2.0"}},
            {"name": "–£—Ä–æ–≤–µ–Ω—å 100", "block_type": "–£—Ä–æ–≤–µ–Ω—å", "params": {"–ó–Ω–∞—á–µ–Ω–∏–µ": "100", "–¶–≤–µ—Ç": "red", "–°—Ç–∏–ª—å": "solid"}},
            {"name": "–ê–ª–µ—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ", "block_type": "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ", "params": {"–õ–∏–Ω–∏—è 1": "close", "–õ–∏–Ω–∏—è 2": "ma", "–°–æ–æ–±—â–µ–Ω–∏–µ": "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ!"}},
            {"name": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è Long", "block_type": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "params": {"–ù–∞–∑–≤–∞–Ω–∏–µ": "Long Strategy", "–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª": "10000", "–ö–æ–º–∏—Å—Å–∏—è": "0.1"}},
            {"name": "–†–∏—Å–∫ 2%", "block_type": "–†–∏—Å–∫", "params": {"–°—Ç–æ–ø-–ª–æ—Å—Å": "2.0", "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç": "4.0", "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É": "1.0"}},
            {"name": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Blue", "block_type": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "params": {"–¶–≤–µ—Ç –ª–∏–Ω–∏–∏": "blue", "–¢–æ–ª—â–∏–Ω–∞": "2", "–°—Ç–∏–ª—å": "solid"}}
        ]
        for template in templates:
            btn = QPushButton(template["name"])
            btn.setFont(QFont("Arial", 12))
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #2b2b2b;
                    color: white;
                    border: 1px solid #3d3d3d;
                    border-radius: 5px;
                    padding: 10px;
                    text-align: left;
                }
                QPushButton:hover {
                    background-color: #3d3d3d;
                }
            """)
            btn.clicked.connect(lambda checked, t=template: self.select_template(t))
            layout.addWidget(btn)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        self.setLayout(layout)

    def select_template(self, template):
        self.selected_template = template
        self.accept()

class BlockSelectDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–ª–æ–∫–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞")
        self.setMinimumWidth(500)
        self.selected_type = None
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        template_btn = QPushButton("üìö –®–∞–±–ª–æ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        template_btn.setStyleSheet("background-color: #444; color: #fff; border-radius: 5px; padding: 8px; font-size: 14px;")
        template_btn.clicked.connect(self.show_templates)
        layout.addWidget(template_btn)

        # --- –î–æ–±–∞–≤–ª—è–µ–º QScrollArea –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ---
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)

        # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª–æ–∫–æ–≤
        for block_type, info in BLOCK_TYPES.items():
            card = QFrame()
            card.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
            card.setStyleSheet(f"""
                QFrame {{
                    background-color: #23272e;
                    border: 2px solid #3d3d3d;
                    border-radius: 12px;
                    margin-bottom: 10px;
                }}
                QFrame:hover {{
                    border: 2px solid #4a90e2;
                    background-color: #2c313c;
                }}
            """)
            card_layout = QHBoxLayout()
            icon = QLabel(info.get("icon", "‚ùî"))
            icon.setFont(QFont("Arial", 32))
            icon.setStyleSheet("margin-right: 18px;")
            card_layout.addWidget(icon)
            text_layout = QVBoxLayout()
            name = QLabel(block_type)
            name.setFont(QFont("Arial", 16, QFont.Bold))
            name.setStyleSheet("color: #fff;")
            desc = QLabel(info.get("description", ""))
            desc.setStyleSheet("color: #aaa; font-size: 13px;")
            desc.setWordWrap(True)
            text_layout.addWidget(name)
            text_layout.addWidget(desc)
            card_layout.addLayout(text_layout)
            card_layout.addStretch()
            card.setLayout(card_layout)
            card.mousePressEvent = lambda e, t=block_type: self.select_type(t)
            scroll_layout.addWidget(card)

        scroll_content.setLayout(scroll_layout)
        scroll_area.setWidget(scroll_content)
        layout.addWidget(scroll_area)

        self.setLayout(layout)

    def select_type(self, block_type):
        self.selected_type = block_type
        self.accept()

    def show_templates(self):
        dialog = TemplateDialog(self)
        if dialog.exec_() == QDialog.Accepted and hasattr(dialog, 'selected_template'):
            self.selected_type = dialog.selected_template["block_type"]
            self.selected_params = dialog.selected_template["params"]
            self.accept()

class WizardDialog(QWizard):
    """–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (–∏–µ—Ä–∞—Ä—Ö–∏—è —ç—Ç–∞–ø–æ–≤, –ø–æ–¥—Å–∫–∞–∑–∫–∏, –≤—Å–µ –±–ª–æ–∫–∏)"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        self.setMinimumWidth(700)
        self.setMinimumHeight(500)
        self.setStyleSheet("""
            QWizard {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QWizardPage {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
                font-size: 14px;
            }
            QComboBox, QLineEdit {
                background-color: #3d3d3d;
                color: #ffffff;
                border: 1px solid #4a4a4a;
                border-radius: 5px;
                padding: 5px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.addPage(IndicatorBasePage())
        self.addPage(IndicatorParamsPage())
        self.addPage(IndicatorFiltersPage())
        self.addPage(IndicatorVisualPage())
        self.addPage(IndicatorAlertsPage())
        self.addPage(IndicatorResultPage())

from constants import BLOCK_TYPES

class IndicatorBasePage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        layout = QVBoxLayout()
        self.combo = QComboBox()
        self.help_label = QLabel()
        self.help_label.setWordWrap(True)
        for block_type, info in BLOCK_TYPES.items():
            if block_type in ["–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
                continue
            self.combo.addItem(f"{info.get('icon','')} {block_type}", block_type)
        layout.addWidget(QLabel("–ö–∞–∫–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"))
        layout.addWidget(self.combo)
        layout.addWidget(self.help_label)
        self.setLayout(layout)
        self.combo.currentIndexChanged.connect(self.update_help)
        self.registerField("base_type", self.combo, "currentData")
        self.update_help()
    def update_help(self):
        block_type = self.combo.currentData()
        info = BLOCK_TYPES.get(block_type, {})
        self.help_label.setText(info.get("description", ""))

class IndicatorParamsPage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.value_hints = {
            "RSI": {
                "–ü–µ—Ä–∏–æ–¥": {
                    "7": "–û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞, –º–Ω–æ–≥–æ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                    "14": "<b>–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç</b>, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π",
                    "21": "–ë–æ–ª–µ–µ —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π, –º–µ–Ω—å—à–µ —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤",
                    "50": "–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–π, —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"
                }
            },
            "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è": {
                "–ü–µ—Ä–∏–æ–¥": {
                    "14": "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ–∫, –±—ã—Å—Ç—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã",
                    "50": "<b>–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç</b> –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫–∞",
                    "100": "–î–æ–ª–≥–æ—Å—Ä–æ–∫, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤",
                    "200": "–ö–ª–∞—Å—Å–∏–∫–∞ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
                },
                "–¢–∏–ø": {
                    "EMA": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è, –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ü–µ–Ω—É (–∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)",
                    "SMA": "–ü—Ä–æ—Å—Ç–∞—è, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç",
                    "WMA": "–í–∑–≤–µ—à–µ–Ω–Ω–∞—è, –±–æ–ª—å—à–µ –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –±–∞—Ä–∞–º",
                    "VWMA": "–û–±—ä–µ–º–Ω–æ-–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è, —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º"
                }
            },
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–ª–æ–∫–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        }
    def initializePage(self):
        while self.layout.count():
            item = self.layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
        block_type = self.field("base_type")
        info = BLOCK_TYPES.get(block_type, {})
        self.param_widgets = {}
        self.hint_labels = {}
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º value_hints –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å values
        auto_value_hints = {}
        for param in info.get("params", []):
            if "values" in param:
                auto_value_hints.setdefault(block_type, {})[param["name"]] = {}
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä help-—Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –≤–∏–¥–∞ '–∫–ª—é—á - –æ–ø–∏—Å–∞–Ω–∏–µ'
                def parse_value_help(help_str):
                    result = {}
                    for part in help_str.split(','):
                        if '-' in part:
                            key, val = part.split('-', 1)
                            result[key.strip()] = val.strip()
                    return result
                value_help_map = {}
                if param["name"].lower() == "–∏—Å—Ç–æ—á–Ω–∏–∫" and "help" in param:
                    value_help_map = parse_value_help(param["help"])
                elif "help" in param and all('-' in s for s in param["help"].split(',')):
                    value_help_map = parse_value_help(param["help"])
                for v in param["values"]:
                    if value_help_map:
                        hint = value_help_map.get(str(v), param.get("description", ""))
                    else:
                        # –°—Ç–∞—Ä—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        if param["name"].lower() == "–ø–µ—Ä–∏–æ–¥":
                            if str(v) in ["14", "50", "200"]:
                                hint = f"<b>–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç</b> –¥–ª—è {v}"
                            else:
                                hint = f"–ü–µ—Ä–∏–æ–¥ {v}: {'–±—ã—Å—Ç—Ä—ã–π' if int(v)<20 else '–º–µ–¥–ª–µ–Ω–Ω—ã–π' if int(v)>50 else '—Å—Ä–µ–¥–Ω–∏–π'}"
                        elif param["name"].lower() == "—Ç–∏–ø":
                            if v == "EMA":
                                hint = "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è, –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ü–µ–Ω—É (–∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)"
                            elif v == "SMA":
                                hint = "–ü—Ä–æ—Å—Ç–∞—è, —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç"
                            elif v == "WMA":
                                hint = "–í–∑–≤–µ—à–µ–Ω–Ω–∞—è, –±–æ–ª—å—à–µ –≤–µ—Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –±–∞—Ä–∞–º"
                            elif v == "VWMA":
                                hint = "–û–±—ä–µ–º–Ω–æ-–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è, —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º"
                            else:
                                hint = param.get("help", param.get("description", ""))
                        elif param["name"].lower() == "—Ü–≤–µ—Ç" or param["name"].lower() == "—Ü–≤–µ—Ç –ª–∏–Ω–∏–∏":
                            if v == "blue":
                                hint = "–°—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"
                            elif v == "red":
                                hint = "–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–æ–¥–∞–∂–∏"
                            elif v == "green":
                                hint = "–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫—É–ø–∫–∏"
                            else:
                                hint = param.get("help", param.get("description", ""))
                        elif param["name"].lower() == "—Å—Ç–∏–ª—å":
                            if v == "solid":
                                hint = "–°–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç"
                            elif v == "dashed":
                                hint = "–ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –¥–ª—è –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π"
                            elif v == "dotted":
                                hint = "–¢–æ—á–µ—á–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Ä–æ–≤–Ω–µ–π"
                            else:
                                hint = param.get("help", param.get("description", ""))
                        elif param["name"].lower() == "—á–∞—Å—Ç–æ—Ç–∞":
                            if v == "once":
                                hint = "–û–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è"
                            elif v == "once_per_bar":
                                hint = "–û–¥–∏–Ω —Ä–∞–∑ –∑–∞ –±–∞—Ä"
                            elif v == "always":
                                hint = "–í—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ"
                            else:
                                hint = param.get("help", param.get("description", ""))
                        else:
                            hint = param.get("help", param.get("description", ""))
                    auto_value_hints[block_type][param["name"]][str(v)] = hint
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä—É—á–Ω—ã–º–∏ value_hints
        value_hints = getattr(self, "value_hints", {})
        for bt in auto_value_hints:
            value_hints.setdefault(bt, {}).update(auto_value_hints[bt])
        self.value_hints = value_hints
        for param in info.get("params", []):
            row = QHBoxLayout()
            name_label = QLabel(param["name"])
            name_label.setMinimumWidth(150)
            help_label = QLabel(param.get("help", param.get("description", "")))
            help_label.setStyleSheet("color: #aaa; font-size: 12px;")
            help_label.setWordWrap(True)
            if "values" in param:
                input_widget = QComboBox()
                for v in param["values"]:
                    input_widget.addItem(str(v))
            else:
                input_widget = QComboBox()
                if "placeholder" in param:
                    input_widget.addItem(str(param["placeholder"]))
                input_widget.addItem("5")
                input_widget.addItem("7")
                input_widget.addItem("10")
                input_widget.addItem("14")
                input_widget.addItem("21")
                input_widget.addItem("50")
                input_widget.addItem("100")
                input_widget.addItem("200")
            row.addWidget(name_label)
            row.addWidget(input_widget)
            row.addWidget(help_label)
            self.layout.addLayout(row)
            value_hint = QLabel()
            value_hint.setStyleSheet("color: #ffb300; font-size: 12px;")
            value_hint.setWordWrap(True)
            self.layout.addWidget(value_hint)
            self.hint_labels[param["name"]] = value_hint
            def update_hint(idx, p=param["name"], bt=block_type, w=input_widget, l=value_hint):
                val = w.currentText()
                hint = self.value_hints.get(bt, {}).get(p, {}).get(val, "")
                l.setText(hint)
            input_widget.currentIndexChanged.connect(update_hint)
            update_hint(0)
            self.param_widgets[param["name"]] = input_widget
            self.registerField(f"param_{param['name']}", input_widget, "currentText")

class IndicatorFiltersPage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 3: –§–∏–ª—å—Ç—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
    def initializePage(self):
        while self.layout.count():
            item = self.layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
        # –ü—Ä–∏–º–µ—Ä: —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É, —Å–≤–µ—á–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω, —É—Å–ª–æ–≤–∏–µ
        self.filter_checkboxes = []
        for block_type, info in BLOCK_TYPES.items():
            if block_type in ["–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]:
                continue
            if "—Ñ–∏–ª—å—Ç—Ä" in info.get("description", "").lower() or "–ø–∞—Ç—Ç–µ—Ä–Ω" in info.get("description", "").lower() or block_type in ["–£—Å–ª–æ–≤–∏–µ", "–§–∏–ª—å—Ç—Ä"]:
                cb = QCheckBox(f"{info.get('icon','')} {block_type}")
                cb.setToolTip(info.get("description", ""))
                self.layout.addWidget(cb)
                self.filter_checkboxes.append(cb)
                # –î–æ–±–∞–≤–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä
                desc = QLabel(f'<span style="color:#ffb300">{info.get("description", "")}</span>')
                desc.setWordWrap(True)
                desc.setStyleSheet("font-size: 13px; margin-left: 30px;")
                self.layout.addWidget(desc)
                # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å help —É –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞)
                params = info.get("params", [])
                if params and params[0].get("help"):
                    example = QLabel(f'<span style="color:#aaa">–ü—Ä–∏–º–µ—Ä: {params[0]["help"]}</span>')
                    example.setWordWrap(True)
                    example.setStyleSheet("font-size: 12px; margin-left: 30px;")
                    self.layout.addWidget(example)
    def validatePage(self):
        self.selected_filters = [cb.text().strip().split(' ',1)[-1] for cb in self.filter_checkboxes if cb.isChecked()]
        return True

class IndicatorVisualPage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–∏–≥–Ω–∞–ª—ã")
        layout = QVBoxLayout()
        self.signal_checkbox = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ")
        self.signal_checkbox.setChecked(True)
        self.color_combo = QComboBox()
        self.color_combo.addItems(["–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π"])
        layout.addWidget(self.signal_checkbox)
        layout.addWidget(QLabel("–¶–≤–µ—Ç –ª–∏–Ω–∏–∏/—Å–∏–≥–Ω–∞–ª–∞:"))
        layout.addWidget(self.color_combo)
        self.setLayout(layout)
        self.registerField("show_signals", self.signal_checkbox)
        self.registerField("color", self.color_combo, "currentText")

class IndicatorAlertsPage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 5: –ê–ª–µ—Ä—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        layout = QVBoxLayout()
        self.alert_checkbox = QCheckBox("–î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ")
        self.alert_checkbox.setChecked(True)
        layout.addWidget(self.alert_checkbox)
        self.setLayout(layout)
        self.registerField("add_alert", self.alert_checkbox)

class IndicatorResultPage(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 6: –ì–æ—Ç–æ–≤—ã–π –∫–æ–¥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        layout = QVBoxLayout()
        self.code_area = QTextEdit()
        self.code_area.setReadOnly(True)
        self.code_area.setFont(QFont("Consolas", 12))
        self.code_area.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 5px;
                padding: 10px;
                font-family: Consolas;
            }
        """)
        layout.addWidget(self.code_area)
        # pyqtgraph widget –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.pg_widget = pg.GraphicsLayoutWidget()
        layout.addWidget(self.pg_widget)
        self.setLayout(layout)
    def initializePage(self):
        from block import Block
        from code_gen import generate_code
        blocks = []
        indicator_name = self.wizard().field("base_type")
        blocks.append(Block("–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä", {"–ù–∞–∑–≤–∞–Ω–∏–µ": indicator_name}))
        params = {}
        for param in ["–¢–∏–ø", "–ü–µ—Ä–∏–æ–¥", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–ú–Ω–æ–∂–∏—Ç–µ–ª—å", "–ü–µ—Ä–∏–æ–¥ K", "–ü–µ—Ä–∏–æ–¥ D", "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ"]:
            try:
                params[param] = self.wizard().field(f"param_{param}")
            except Exception:
                pass
        blocks.append(Block(indicator_name, params))
        if hasattr(self.wizard(), "selected_filters") and "–§–∏–ª—å—Ç—Ä" in self.wizard().selected_filters:
            params_f = {"–£—Å–ª–æ–≤–∏–µ": self.wizard().field("param_–£—Å–ª–æ–≤–∏–µ"), "–°–æ–æ–±—â–µ–Ω–∏–µ": "–§–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω"}
            blocks.append(Block("–§–∏–ª—å—Ç—Ä", params_f))
        if hasattr(self.wizard(), "selected_filters") and "–£—Å–ª–æ–≤–∏–µ" in self.wizard().selected_filters:
            params_u = {"–£—Å–ª–æ–≤–∏–µ": self.wizard().field("param_–£—Å–ª–æ–≤–∏–µ"), "–°–æ–æ–±—â–µ–Ω–∏–µ": "–°–∏–≥–Ω–∞–ª!"}
            blocks.append(Block("–£—Å–ª–æ–≤–∏–µ", params_u))
        code = generate_code(blocks)
        self.code_area.setText(code)
        # --- pyqtgraph preview ---
        self.pg_widget.clear()
        n = 200
        np.random.seed(42)
        price = np.cumsum(np.random.randn(n)) + 100
        if indicator_name in ["RSI", "MACD", "Stochastic", "ATR", "CCI"]:
            p1 = self.pg_widget.addPlot(row=0, col=0, title="–¶–µ–Ω–∞")
            p2 = self.pg_widget.addPlot(row=1, col=0, title=indicator_name)
            p1.plot(price, pen=pg.mkPen('#888', width=1), name='–¶–µ–Ω–∞')
        else:
            p1 = self.pg_widget.addPlot(row=0, col=0, title="–¶–µ–Ω–∞ + –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä")
            p1.plot(price, pen=pg.mkPen('#888', width=1), name='–¶–µ–Ω–∞')
            p2 = None
        # MA
        if indicator_name == "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 14))
            ma_type = params.get("–¢–∏–ø", "EMA")
            if ma_type == "EMA":
                ma = np.zeros_like(price)
                alpha = 2/(period+1)
                ma[0] = price[0]
                for i in range(1, n):
                    ma[i] = alpha*price[i] + (1-alpha)*ma[i-1]
            elif ma_type == "SMA":
                ma = np.convolve(price, np.ones(period)/period, mode='valid')
                ma = np.concatenate([np.full(period-1, np.nan), ma])
            elif ma_type == "WMA":
                weights = np.arange(1, period+1)
                ma = np.array([np.dot(price[i-period+1:i+1], weights)/weights.sum() if i >= period-1 else np.nan for i in range(n)])
            elif ma_type == "VWMA":
                ma = np.convolve(price, np.ones(period)/period, mode='valid')
                ma = np.concatenate([np.full(period-1, np.nan), ma])
            else:
                ma = np.convolve(price, np.ones(period)/period, mode='valid')
                ma = np.concatenate([np.full(period-1, np.nan), ma])
            p1.plot(ma, pen=pg.mkPen('b', width=2), name=f'{ma_type}({period})')
        # RSI
        elif indicator_name == "RSI":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 14))
            rsi = np.zeros_like(price)
            delta = np.diff(price, prepend=price[0])
            up = np.where(delta > 0, delta, 0)
            down = np.where(delta < 0, -delta, 0)
            roll_up = np.zeros_like(price)
            roll_down = np.zeros_like(price)
            roll_up[0] = up[0]
            roll_down[0] = down[0]
            for i in range(1, n):
                roll_up[i] = (roll_up[i-1]*(period-1) + up[i])/period
                roll_down[i] = (roll_down[i-1]*(period-1) + down[i])/period
                rs = roll_up[i]/roll_down[i] if roll_down[i] != 0 else 0
                rsi[i] = 100 - 100/(1+rs) if roll_down[i] != 0 else 100
            p2.plot(rsi, pen=pg.mkPen('m', width=2), name='RSI')
            p2.addLine(y=70, pen=pg.mkPen('r', style=pg.QtCore.Qt.DashLine))
            p2.addLine(y=30, pen=pg.mkPen('g', style=pg.QtCore.Qt.DashLine))
            p2.setYRange(0, 100)
        # MACD
        elif indicator_name == "MACD":
            fast = int(params.get("–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥", 12))
            slow = int(params.get("–ú–µ–¥–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥", 26))
            signal = int(params.get("–°–∏–≥–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", 9))
            def ema(arr, p):
                a = 2/(p+1)
                res = np.zeros_like(arr)
                res[0] = arr[0]
                for i in range(1, len(arr)):
                    res[i] = a*arr[i] + (1-a)*res[i-1]
                return res
            macd_line = ema(price, fast) - ema(price, slow)
            signal_line = ema(macd_line, signal)
            hist = macd_line - signal_line
            p2.plot(macd_line, pen=pg.mkPen('b', width=2), name='MACD')
            p2.plot(signal_line, pen=pg.mkPen('r', width=2), name='Signal')
            bg = pg.BarGraphItem(x=np.arange(n), height=hist, width=0.8, brush='g')
            p2.addItem(bg)
        # Bollinger Bands
        elif indicator_name == "Bollinger Bands":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 20))
            mult = float(params.get("–ú–Ω–æ–∂–∏—Ç–µ–ª—å", 2.0))
            sma = np.convolve(price, np.ones(period)/period, mode='valid')
            sma = np.concatenate([np.full(period-1, np.nan), sma])
            std = np.array([np.std(price[max(0,i-period+1):i+1]) if i >= period-1 else np.nan for i in range(n)])
            upper = sma + mult*std
            lower = sma - mult*std
            p1.plot(sma, pen=pg.mkPen('b', width=2), name='Basis')
            p1.plot(upper, pen=pg.mkPen('r', width=2), name='Upper')
            p1.plot(lower, pen=pg.mkPen('g', width=2), name='Lower')
        # Stochastic
        elif indicator_name == "Stochastic":
            k_period = int(params.get("–ü–µ—Ä–∏–æ–¥ K", 14))
            d_period = int(params.get("–ü–µ—Ä–∏–æ–¥ D", 3))
            k = np.zeros_like(price)
            for i in range(k_period-1, n):
                low = np.min(price[i-k_period+1:i+1])
                high = np.max(price[i-k_period+1:i+1])
                k[i] = 100*(price[i]-low)/(high-low) if high != low else 0
            d = np.convolve(k, np.ones(d_period)/d_period, mode='valid')
            d = np.concatenate([np.full(d_period-1, np.nan), d])
            p2.plot(k, pen=pg.mkPen('b', width=2), name='%K')
            p2.plot(d, pen=pg.mkPen('r', width=2), name='%D')
            p2.addLine(y=80, pen=pg.mkPen('r', style=pg.QtCore.Qt.DashLine))
            p2.addLine(y=20, pen=pg.mkPen('g', style=pg.QtCore.Qt.DashLine))
            p2.setYRange(0, 100)
        # ATR
        elif indicator_name == "ATR":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 14))
            tr = np.zeros_like(price)
            tr[0] = 0
            for i in range(1, n):
                tr[i] = max(price[i]-price[i-1], abs(price[i]-np.min(price[max(0,i-1):i+1])), abs(price[i]-np.max(price[max(0,i-1):i+1])))
            atr = np.zeros_like(price)
            atr[0] = tr[0]
            for i in range(1, n):
                atr[i] = (atr[i-1]*(period-1) + tr[i])/period
            p2.plot(atr, pen=pg.mkPen('b', width=2), name='ATR')
        # CCI
        elif indicator_name == "CCI":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 20))
            tp = price
            sma = np.convolve(tp, np.ones(period)/period, mode='valid')
            sma = np.concatenate([np.full(period-1, np.nan), sma])
            mad = np.array([np.mean(np.abs(tp[max(0,i-period+1):i+1]-sma[i])) if i >= period-1 else np.nan for i in range(n)])
            cci = (tp-sma)/(0.015*mad)
            p2.plot(cci, pen=pg.mkPen('b', width=2), name='CCI')
            p2.addLine(y=100, pen=pg.mkPen('r', style=pg.QtCore.Qt.DashLine))
            p2.addLine(y=-100, pen=pg.mkPen('g', style=pg.QtCore.Qt.DashLine))
        # –ò–º–ø—É–ª—å—Å
        elif indicator_name == "–ò–º–ø—É–ª—å—Å":
            period = int(params.get("–ü–µ—Ä–∏–æ–¥", 14))
            impulse = price - np.concatenate([np.full(period, np.nan), price[:-period]])
            p1.plot(impulse, pen=pg.mkPen('b', width=2), name='Impulse')
        # else: —Ç–æ–ª—å–∫–æ —Ü–µ–Ω–∞ —É–∂–µ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–∞

class ExampleDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ TradingView")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)
        # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
        examples = [
            {
                "name": "EMA 14",
                "description": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/ema14.png"
            },
            {
                "name": "RSI 14",
                "description": "–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞.",
                "image": "examples/rsi14.png"
            },
            {
                "name": "MACD —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
                "description": "–°—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∏ –º–æ–º–µ–Ω—Ç—É–º —Ä—ã–Ω–∫–∞.",
                "image": "examples/macd.png"
            },
            {
                "name": "Bollinger Bands 20",
                "description": "–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º 20. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/bb20.png"
            },
            {
                "name": "Stochastic 14/3",
                "description": "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ 14 –∏ 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã —Ç—Ä–µ–Ω–¥–∞.",
                "image": "examples/stoch.png"
            }
        ]
        for example in examples:
            card = QFrame()
            card.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
            card.setStyleSheet("""
                QFrame {
                    background-color: #23272e;
                    border: 2px solid #3d3d3d;
                    border-radius: 12px;
                    margin-bottom: 10px;
                }
                QFrame:hover {
                    border: 2px solid #4a90e2;
                    background-color: #2c313c;
                }
            """)
            card_layout = QVBoxLayout()
            name = QLabel(example["name"])
            name.setFont(QFont("Arial", 16, QFont.Bold))
            name.setStyleSheet("color: #fff;")
            desc = QLabel(example["description"])
            desc.setStyleSheet("color: #aaa; font-size: 13px;")
            desc.setWordWrap(True)
            image = QLabel()
            pixmap = QPixmap(example["image"])
            if not pixmap.isNull():
                image.setPixmap(pixmap.scaled(400, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            else:
                image.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                image.setStyleSheet("color: #ff0000;")
            card_layout.addWidget(name)
            card_layout.addWidget(desc)
            card_layout.addWidget(image)
            card.setLayout(card_layout)
            layout.addWidget(card)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        self.setLayout(layout)

class HelpDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å–ø—Ä–∞–≤–∫–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        self.setMinimumWidth(600)
        self.setMinimumHeight(400)
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)
        
        # –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
        help_text = QTextEdit()
        help_text.setReadOnly(True)
        help_text.setHtml("""
        <h2>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h2>
        <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</h3>
        <ul>
            <li><b>–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞</li>
            <li><b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</b> - —Å–æ–∑–¥–∞–µ—Ç –∫–æ–¥ Pine Script –¥–ª—è TradingView</li>
            <li><b>–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä</b> - –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥ –∑–∞ —à–∞–≥–æ–º</li>
            <li><b>–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≥–æ—Ç–æ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤</li>
        </ul>
        <h3>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:</h3>
        <ul>
            <li><b>Ctrl+N</b> - –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</li>
            <li><b>Ctrl+O</b> - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç</li>
            <li><b>Ctrl+S</b> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</li>
            <li><b>Ctrl+B</b> - –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</li>
            <li><b>F5</b> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥</li>
            <li><b>F1</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É</li>
        </ul>
        <p>–î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º—ã—à—å—é.</p>
        
        <h3>–†–∞–±–æ—Ç–∞ —Å –±–ª–æ–∫–∞–º–∏:</h3>
        <p>–ö–∞–∂–¥—ã–π –±–ª–æ–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —á–∞—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞. –ë–ª–æ–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å.</p>
        <p>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –±–ª–æ–∫–∞.</p>
        <p>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚ùå" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±–ª–æ–∫–∞.</p>
        <p>–î–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìã" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±–ª–æ–∫–∞.</p>
        <p>–î–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–∞ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –µ–≥–æ –º—ã—à—å—é –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ.</p>
        
        <h3>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞:</h3>
        <p>–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–æ–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞ Pine Script.</p>
        <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä TradingView.</p>
        
        <h3>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞:</h3>
        <p>–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ "–§–∞–π–ª" -> "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à Ctrl+S.</p>
        <p>–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ "–§–∞–π–ª" -> "–û—Ç–∫—Ä—ã—Ç—å" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à Ctrl+O.</p>
        """)
        help_text.setStyleSheet("""
            QTextEdit {
                background-color: #2b2b2b;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        layout.addWidget(help_text)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        
        self.setLayout(layout)

class AboutDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ" """
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.setMinimumWidth(400)
        self.setMinimumHeight(300)
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ TradingView")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –í–µ—Ä—Å–∏—è
        version = QLabel("–í–µ—Ä—Å–∏—è 1.0")
        version.setFont(QFont("Arial", 12))
        version.setStyleSheet("color: #aaaaaa;")
        version.setAlignment(Qt.AlignCenter)
        layout.addWidget(version)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel("–í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è TradingView.\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –±–µ–∑ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
        description.setFont(QFont("Arial", 12))
        description.setStyleSheet("color: #ffffff; margin: 20px 0;")
        description.setAlignment(Qt.AlignCenter)
        layout.addWidget(description)
        
        # –ö–æ–ø–∏—Ä–∞–π—Ç
        copyright = QLabel("¬© 2023-2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã")
        copyright.setFont(QFont("Arial", 10))
        copyright.setStyleSheet("color: #aaaaaa;")
        copyright.setAlignment(Qt.AlignCenter)
        layout.addWidget(copyright)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        
        self.setLayout(layout)