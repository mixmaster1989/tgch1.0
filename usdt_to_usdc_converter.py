#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT –≤ USDC
"""

from mex_api import MexAPI
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class USDTtoUSDCConverter:
    def __init__(self):
        self.mex_api = MexAPI()
        
    def get_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã USDT –∏ USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            usdt_balance = 0
            usdc_balance = 0
            
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDT':
                    usdt_balance = float(balance['free'])
                elif balance['asset'] == 'USDC':
                    usdc_balance = float(balance['free'])
            
            return usdt_balance, usdc_balance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return 0, 0
    
    def get_usdc_price(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É USDC –≤ USDT"""
        try:
            price_info = self.mex_api.get_ticker_price('USDCUSDT')
            if 'price' in price_info:
                return float(price_info['price'])
            return 1.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1:1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã USDC: {e}")
            return 1.0
    
    def convert_usdt_to_usdc(self, usdt_amount: float):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USDT –≤ USDC"""
        try:
            logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {usdt_amount} USDT –≤ USDC...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É USDC
            usdc_price = self.get_usdc_price()
            logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ USDC: {usdc_price} USDT")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC
            usdc_quantity = usdt_amount / usdc_price
            logger.info(f"–ü–æ–ª—É—á–∏–º –ø—Ä–∏–º–µ—Ä–Ω–æ: {usdc_quantity:.4f} USDC")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É USDC
            order = self.mex_api.place_order(
                symbol='USDCUSDT',
                side='BUY',
                quantity=usdc_quantity,
                price=usdc_price  # –ü–æ–∫—É–ø–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω: {order['orderId']}")
                logger.info(f"üìã –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞: {order}")
                return order
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None
    
    def wait_for_order_completion(self, order_id: str, max_wait: int = 60):
        """–û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order_id}...")
        
        start_time = time.time()
        while time.time() - start_time < max_wait:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                open_orders = self.mex_api.get_open_orders('USDCUSDT')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à –æ—Ä–¥–µ—Ä –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
                order_found = False
                for order in open_orders:
                    if order.get('orderId') == order_id:
                        order_found = True
                        status = order.get('status', 'UNKNOWN')
                        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {status}")
                        break
                
                if not order_found:
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                    return True
                
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                time.sleep(5)
        
        logger.warning("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ")
        return False
    
    def show_final_balances(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã"""
        usdt_balance, usdc_balance = self.get_balances()
        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
        logger.info(f"   USDT: {usdt_balance:.4f}")
        logger.info(f"   USDC: {usdc_balance:.4f}")

def main():
    converter = USDTtoUSDCConverter()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
    usdt_balance, usdc_balance = converter.get_balances()
    logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:")
    logger.info(f"   USDT: {usdt_balance:.4f}")
    logger.info(f"   USDC: {usdc_balance:.4f}")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º $50 USDT –≤ USDC
    convert_amount = 50.0
    
    if usdt_balance < convert_amount:
        logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT. –î–æ—Å—Ç—É–ø–Ω–æ: {usdt_balance:.2f}, –Ω—É–∂–Ω–æ: {convert_amount}")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    order = converter.convert_usdt_to_usdc(convert_amount)
    
    if order:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        if converter.wait_for_order_completion(order['orderId']):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
            converter.show_final_balances()
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞")
    else:
        logger.error("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main() 