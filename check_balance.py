#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ MEX API
"""

import json
from datetime import datetime
from mex_api import MexAPI

def check_balance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        print("üîç –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê MEXC")
        print("=" * 50)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        api = MexAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        print("üìä –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞...")
        account_info = api.get_account_info()
        
        if 'code' in account_info:
            print(f"‚ùå –û–®–ò–ë–ö–ê API: {account_info}")
            return
        
        print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"   Maker –∫–æ–º–∏—Å—Å–∏—è: {account_info.get('makerCommission', 'N/A')}")
        print(f"   Taker –∫–æ–º–∏—Å—Å–∏—è: {account_info.get('takerCommission', 'N/A')}")
        print(f"   Buyer –∫–æ–º–∏—Å—Å–∏—è: {account_info.get('buyerCommission', 'N/A')}")
        print(f"   Seller –∫–æ–º–∏—Å—Å–∏—è: {account_info.get('sellerCommission', 'N/A')}")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        balances = account_info.get('balances', [])
        print(f"üí∞ –ë–ê–õ–ê–ù–°–´ ({len(balances)} –∞–∫—Ç–∏–≤–æ–≤):")
        print("-" * 50)
        
        total_usdt_value = 0.0
        non_zero_balances = []
        
        for balance in balances:
            free = float(balance['free'])
            locked = float(balance['locked'])
            total = free + locked
            
            if total > 0:
                non_zero_balances.append({
                    'asset': balance['asset'],
                    'free': free,
                    'locked': locked,
                    'total': total
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
        non_zero_balances.sort(key=lambda x: x['total'], reverse=True)
        
        for balance in non_zero_balances:
            asset = balance['asset']
            free = balance['free']
            locked = balance['locked']
            total = balance['total']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ USDT –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if asset == 'USDT':
                usdt_value = total
            else:
                try:
                    ticker = api.get_ticker_price(f"{asset}USDT")
                    if 'price' in ticker:
                        price = float(ticker['price'])
                        usdt_value = total * price
                    else:
                        usdt_value = 0
                except:
                    usdt_value = 0
            
            total_usdt_value += usdt_value
            
            print(f"   {asset:>8}: {total:>12.6f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:>10.6f}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:>10.6f})")
            if usdt_value > 0:
                print(f"            ${usdt_value:>12.2f} USDT")
            print()
        
        print("=" * 50)
        print(f"üíé –û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: ${total_usdt_value:.2f} USDT")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print("üìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:")
        try:
            open_orders = api.get_open_orders()
            if isinstance(open_orders, list) and len(open_orders) > 0:
                for order in open_orders:
                    print(f"   {order['symbol']}: {order['side']} {order['origQty']} –ø–æ —Ü–µ–Ω–µ {order['price']}")
            else:
                print("   –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤: {e}")
        
        print()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_balance() 