#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
"""

import asyncio
import aiohttp
import ssl
import json
import time
import random
from datetime import datetime
from typing import Dict, List, Optional, Callable
from functools import wraps

def async_retry(max_attempts: int = 3, delay: float = 1.0, backoff: float = 2.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except Exception as e:
                    last_exception = e
                    if attempt < max_attempts - 1:
                        wait_time = delay * (backoff ** attempt)
                        print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(wait_time)
                    else:
                        print(f"‚ùå –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã: {e}")
                        
            raise last_exception
        return wrapper
    return decorator

class RobustDataManager:
    def __init__(self):
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
        self.connector = aiohttp.TCPConnector(
            ssl=self.ssl_context,
            limit=100,
            limit_per_host=30,
            ttl_dns_cache=300,
            use_dns_cache=True
        )
        
        self.session = None
        self.error_count = 0
        self.success_count = 0
        
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(connector=self.connector)
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
            
    @async_retry(max_attempts=3, delay=1.0, backoff=2.0)
    async def safe_api_call(self, url: str, params: Dict = None) -> Optional[Dict]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å retry"""
        if not self.session:
            raise RuntimeError("Session –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        try:
            async with self.session.get(url, params=params, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    self.success_count += 1
                    return data
                elif response.status == 429:  # Rate limit
                    retry_after = int(response.headers.get('Retry-After', 5))
                    print(f"‚ö†Ô∏è Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {retry_after}—Å...")
                    await asyncio.sleep(retry_after)
                    raise Exception("Rate limit exceeded")
                else:
                    raise Exception(f"HTTP {response.status}: {response.reason}")
                    
        except asyncio.TimeoutError:
            raise Exception("Timeout")
        except Exception as e:
            self.error_count += 1
            raise e
            
    async def fetch_market_data_robust(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = "https://api.mexc.com/api/v3/ticker/24hr"
            params = {'symbol': symbol}
            
            data = await self.safe_api_call(url, params)
            
            if data:
                return {
                    'symbol': symbol,
                    'price': float(data['lastPrice']),
                    'change_24h': float(data['priceChangePercent']),
                    'volume_24h': float(data['volume']),
                    'high_24h': float(data['highPrice']),
                    'low_24h': float(data['lowPrice']),
                    'timestamp': datetime.now(),
                    'source': 'REST_API_ROBUST'
                }
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None
            
    async def fetch_orderbook_robust(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = "https://api.mexc.com/api/v3/depth"
            params = {'symbol': symbol, 'limit': 100}
            
            data = await self.safe_api_call(url, params)
            
            if data and 'bids' in data and 'asks' in data:
                # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
                best_bid = float(data['bids'][0][0]) if data['bids'] else 0
                best_ask = float(data['asks'][0][0]) if data['asks'] else 0
                spread = best_ask - best_bid
                spread_percent = (spread / best_bid * 100) if best_bid > 0 else 0
                
                # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤
                bid_volume = sum(float(bid[1]) for bid in data['bids'][:10])
                ask_volume = sum(float(ask[1]) for ask in data['asks'][:10])
                volume_ratio = bid_volume / ask_volume if ask_volume > 0 else 1.0
                
                return {
                    'symbol': symbol,
                    'bids': [[float(price), float(qty)] for price, qty in data['bids'][:10]],
                    'asks': [[float(price), float(qty)] for price, qty in data['asks'][:10]],
                    'spread': spread,
                    'spread_percent': spread_percent,
                    'bid_volume': bid_volume,
                    'ask_volume': ask_volume,
                    'volume_ratio': volume_ratio,
                    'liquidity_score': 0.8,
                    'timestamp': datetime.now(),
                    'source': 'REST_API_ROBUST'
                }
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞ {symbol}: {e}")
            return None
            
    async def fetch_klines_robust(self, symbol: str, interval: str = '1h', limit: int = 100) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            url = "https://api.mexc.com/api/v3/klines"
            params = {'symbol': symbol, 'interval': interval, 'limit': limit}
            
            data = await self.safe_api_call(url, params)
            
            if data:
                klines = []
                for kline in data:
                    klines.append({
                        'symbol': symbol,
                        'interval': interval,
                        'open': float(kline[1]),
                        'high': float(kline[2]),
                        'low': float(kline[3]),
                        'close': float(kline[4]),
                        'volume': float(kline[5]),
                        'timestamp': int(kline[0]),
                        'source': 'REST_API_ROBUST'
                    })
                return klines
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            return None
            
    async def simulate_network_issues(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            raise Exception("Simulated network error")
            
    async def test_robust_data_fetching(self, symbols: List[str]):
        """–¢–µ—Å—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        results = {
            'market_data': {},
            'orderbooks': {},
            'klines': {},
            'errors': []
        }
        
        for symbol in symbols:
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                await self.simulate_network_issues()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                market_data = await self.fetch_market_data_robust(symbol)
                if market_data:
                    results['market_data'][symbol] = market_data
                    print(f"‚úÖ {symbol}: ${market_data['price']:.2f}")
                    
                orderbook = await self.fetch_orderbook_robust(symbol)
                if orderbook:
                    results['orderbooks'][symbol] = orderbook
                    print(f"üìö {symbol}: —Å–ø—Ä–µ–¥ {orderbook['spread_percent']:.3f}%")
                    
                klines = await self.fetch_klines_robust(symbol, '60m', 50)
                if klines:
                    results['klines'][symbol] = klines
                    print(f"üìä {symbol}: {len(klines)} —Å–≤–µ—á–µ–π")
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}"
                results['errors'].append(error_msg)
                print(f"‚ùå {error_msg}")
                
        return results

async def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üõ°Ô∏è –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("=" * 50)
    
    symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
    
    async with RobustDataManager() as manager:
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            results = await manager.test_robust_data_fetching(symbols)
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"  –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {manager.success_count}")
            print(f"  –û—à–∏–±–æ–∫: {manager.error_count}")
            print(f"  –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(results['market_data'])}/{len(symbols)}")
            print(f"  –û—Ä–¥–µ—Ä–±—É–∫–∏: {len(results['orderbooks'])}/{len(symbols)}")
            print(f"  –°–≤–µ—á–∏: {len(results['klines'])}/{len(symbols)}")
            print(f"  –û—à–∏–±–∫–∏: {len(results['errors'])}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
            success_rate = manager.success_count / (manager.success_count + manager.error_count) if (manager.success_count + manager.error_count) > 0 else 0
            
            if success_rate > 0.7:  # 70% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
                print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
                return True
            else:
                print(f"\n‚ùå –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False

if __name__ == "__main__":
    asyncio.run(test_error_handling()) 