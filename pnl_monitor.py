#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PnL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–µ–π –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏ –±–æ–ª–µ–µ 7 —Ü–µ–Ω—Ç–æ–≤
–î–ª—è –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –±—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏!
"""

############################################################
# üì¶ –ò–ú–ü–û–†–¢–´ –ò –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ñ–∏–≥
############################################################

from mex_api import MexAPI
import asyncio
import time
import logging
import requests
from datetime import datetime
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, PNL_MONITOR_CONFIG
from portfolio_balancer import PortfolioBalancer
from mexc_advanced_api import MexAdvancedAPI
from post_sale_balancer import PostSaleBalancer
from logging.handlers import RotatingFileHandler
from services.income_saver import IncomeSaver

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PnLMonitor:
    ############################################################
    # ‚öôÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç—ã API, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
    ############################################################
    def __init__(self):
        self.mex_api = MexAPI()
        self.mex_adv = MexAdvancedAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.is_running = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.profit_threshold = PNL_MONITOR_CONFIG['profit_threshold']
        self.profit_threshold_pct = PNL_MONITOR_CONFIG.get('profit_threshold_pct', None)
        self.check_interval = PNL_MONITOR_CONFIG['check_interval']
        self.notification_interval = PNL_MONITOR_CONFIG['notification_interval']
        self.trading_pairs = PNL_MONITOR_CONFIG['trading_pairs']
        self.auto_sell_enabled = PNL_MONITOR_CONFIG['auto_sell_enabled']
        self.telegram_notifications = PNL_MONITOR_CONFIG['telegram_notifications']
        
        # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.portfolio_balancer = PortfolioBalancer()
        self.last_balance_check = 0
        self.balance_check_interval = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ—Ç—á–µ—Ç–æ–≤ (—É–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –≤ 2 —Ä–∞–∑–∞)
        self.report_counter = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if PNL_MONITOR_CONFIG['file_logging']:
            file_handler = RotatingFileHandler(
                PNL_MONITOR_CONFIG['log_file'],
                maxBytes=20 * 1024 * 1024,
                backupCount=5,
                encoding='utf-8'
            )
            file_handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
    
    ############################################################
    # ‚úâÔ∏è TELEGRAM: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    ############################################################
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–¥–ª–∏–Ω–∞: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")
            response = requests.post(url, data=data)
            result = response.json()
            if result.get('ok'):
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {result}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    ############################################################
    # üí∞ –ë–ê–õ–ê–ù–°–´
    ############################################################
    def get_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã"""
        try:
            account_info = self.mex_api.get_account_info()
            balances = {}
            
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(account_info.get('balances', []))} –±–∞–ª–∞–Ω—Å–æ–≤ –æ—Ç API")
            
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if asset in ['BTC', 'ETH']:
                    logger.info(f"üîç {asset}: free={free}, locked={locked}, total={total}")
                
                if total > 0:
                    balances[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': total
                    }
            
            logger.info(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã: {list(balances.keys())}")
            return balances
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    ############################################################
    # üíπ –¢–ï–ö–£–©–ò–ï –¶–ï–ù–´
    ############################################################
    def get_current_price(self, symbol: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É"""
        try:
            price_info = self.mex_api.get_ticker_price(symbol)
            if 'price' in price_info:
                return float(price_info['price'])
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return None
    
    ############################################################
    # üìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê
    ############################################################
    def get_open_orders_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–∞—Ö"""
        try:
            open_orders = self.mex_api.get_open_orders()
            
            if not open_orders:
                return {
                    'total_orders': 0,
                    'buy_orders': 0,
                    'sell_orders': 0,
                    'total_value': 0.0,
                    'orders': []
                }
            
            orders_info = {
                'total_orders': len(open_orders),
                'buy_orders': 0,
                'sell_orders': 0,
                'total_value': 0.0,
                'orders': []
            }
            
            for order in open_orders:
                try:
                    symbol = order.get('symbol', '')
                    side = order.get('side', '')
                    quantity = float(order.get('origQty', 0))
                    price = float(order.get('price', 0))
                    order_id = order.get('orderId', '')
                    status = order.get('status', '')
                    order_type = order.get('type', '')
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞
                    order_value = quantity * price
                    orders_info['total_value'] += order_value
                    
                    # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –æ—Ä–¥–µ—Ä–æ–≤
                    if side == 'BUY':
                        orders_info['buy_orders'] += 1
                    elif side == 'SELL':
                        orders_info['sell_orders'] += 1
                    
                    orders_info['orders'].append({
                        'symbol': symbol,
                        'side': side,
                        'quantity': quantity,
                        'price': price,
                        'value': order_value,
                        'order_id': order_id,
                        'status': status,
                        'type': order_type
                    })
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
                    continue
            
            return orders_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {
                'total_orders': 0,
                'buy_orders': 0,
                'sell_orders': 0,
                'total_value': 0.0,
                'orders': []
            }
    
    ############################################################
    # üìú –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í
    ############################################################
    def get_order_history_analysis(self, limit: int = 50):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
            btc_history = self.mex_api.get_order_history('BTCUSDC', limit)
            eth_history = self.mex_api.get_order_history('ETHUSDC', limit)
            
            all_orders = []
            if isinstance(btc_history, list):
                all_orders.extend(btc_history)
            if isinstance(eth_history, list):
                all_orders.extend(eth_history)
            
            if not all_orders:
                return {
                    'total_orders': 0,
                    'completed_orders': 0,
                    'total_volume_usdc': 0.0,
                    'total_pnl': 0.0,
                    'buy_orders': 0,
                    'sell_orders': 0,
                    'recent_orders': []
                }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            all_orders.sort(key=lambda x: x.get('time', 0), reverse=True)
            
            analysis = {
                'total_orders': len(all_orders),
                'completed_orders': 0,
                'total_volume_usdc': 0.0,
                'total_pnl': 0.0,
                'buy_orders': 0,
                'sell_orders': 0,
                'recent_orders': [],
                'buy_volume': 0.0,
                'sell_volume': 0.0
            }
            
            for order in all_orders[:20]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
                try:
                    symbol = order.get('symbol', '')
                    side = order.get('side', '')
                    status = order.get('status', '')
                    quantity = float(order.get('executedQty', 0))
                    price = float(order.get('price', 0))
                    avg_price = float(order.get('cummulativeQuoteQty', 0)) / max(quantity, 0.000001)
                    order_time = order.get('time', 0)
                    
                    if status == 'FILLED' and quantity > 0:
                        analysis['completed_orders'] += 1
                        volume = quantity * avg_price
                        analysis['total_volume_usdc'] += volume
                        
                        if side == 'BUY':
                            analysis['buy_orders'] += 1
                            analysis['buy_volume'] += volume
                        elif side == 'SELL':
                            analysis['sell_orders'] += 1
                            analysis['sell_volume'] += volume
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
                        analysis['recent_orders'].append({
                            'symbol': symbol,
                            'side': side,
                            'quantity': quantity,
                            'price': price,
                            'avg_price': avg_price,
                            'volume': volume,
                            'time': order_time,
                            'order_id': order.get('orderId', ''),
                            'status': status
                        })
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    continue
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç
            analysis['total_pnl'] = self.calculate_real_pnl(analysis['recent_orders'])
            
            return analysis
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            return {
                'total_orders': 0,
                'completed_orders': 0,
                'total_volume_usdc': 0.0,
                'total_pnl': 0.0,
                'buy_orders': 0,
                'sell_orders': 0,
                'recent_orders': []
            }
    
    ############################################################
    # üìà PnL (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –æ—Ä–¥–µ—Ä–∞–º)
    ############################################################
    def calculate_real_pnl(self, orders: list) -> float:
        """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–Ω–µ—Ç"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            positions = {}  # symbol -> {'bought': quantity, 'cost': total_cost, 'sold': quantity, 'revenue': total_revenue}
            
            for order in orders:
                symbol = order['symbol']
                side = order['side']
                quantity = order['quantity']
                volume = order['volume']
                
                if symbol not in positions:
                    positions[symbol] = {
                        'bought': 0.0,
                        'cost': 0.0,
                        'sold': 0.0, 
                        'revenue': 0.0
                    }
                
                if side == 'BUY':
                    positions[symbol]['bought'] += quantity
                    positions[symbol]['cost'] += volume
                elif side == 'SELL':
                    positions[symbol]['sold'] += quantity
                    positions[symbol]['revenue'] += volume
            
            total_pnl = 0.0
            
            for symbol, pos in positions.items():
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                
                # 1. –ü—Ä–∏–±—ã–ª—å –æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
                sold_pnl = pos['revenue'] - (pos['cost'] * (pos['sold'] / max(pos['bought'], 0.000001)))
                
                # 2. –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–Ω–µ—Ç
                remaining_quantity = pos['bought'] - pos['sold']
                
                if remaining_quantity > 0:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        current_price = self.mex_api.get_ticker_price(symbol)
                        if current_price and 'price' in current_price:
                            current_value = remaining_quantity * float(current_price['price'])
                            avg_buy_price = pos['cost'] / max(pos['bought'], 0.000001)
                            cost_of_remaining = remaining_quantity * avg_buy_price
                            unrealized_pnl = current_value - cost_of_remaining
                        else:
                            unrealized_pnl = 0.0
                    except:
                        unrealized_pnl = 0.0
                else:
                    unrealized_pnl = 0.0
                
                symbol_pnl = sold_pnl + unrealized_pnl
                total_pnl += symbol_pnl
                
                logger.info(f"PnL –¥–ª—è {symbol}: –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ=${sold_pnl:.2f}, –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ=${unrealized_pnl:.2f}, –∏—Ç–æ–≥–æ=${symbol_pnl:.2f}")
            
            return total_pnl
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL: {e}")
            return 0.0
    
    ############################################################
    # üìà PnL –ê–ö–¢–ò–í–ê (FIFO)
    ############################################################
    def calculate_real_pnl_for_asset(self, asset: str, symbol: str, current_quantity: float, current_price: float) -> float:
        """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FIFO –º–µ—Ç–æ–¥–∞"""
        try:
            logger.info(f"üîç –†–∞—Å—á–µ—Ç PnL –¥–ª—è {asset} (FIFO –º–µ—Ç–æ–¥)...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            orders = self.mex_api.get_order_history(symbol, limit=100)
            if not orders:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {symbol}")
                return 0.0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            executed_orders = [order for order in orders if order['status'] == 'FILLED']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (FIFO)
            executed_orders.sort(key=lambda x: x['time'])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
            buy_orders = [order for order in executed_orders if order['side'] == 'BUY']
            sell_orders = [order for order in executed_orders if order['side'] == 'SELL']
            
            logger.info(f"üìä {asset}: {len(buy_orders)} –ø–æ–∫—É–ø–æ–∫, {len(sell_orders)} –ø—Ä–æ–¥–∞–∂")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–Ω–µ—Ç
            total_bought = sum(float(order.get('executedQty', 0)) for order in buy_orders)
            total_sold = sum(float(order.get('executedQty', 0)) for order in sell_orders)
            remaining_quantity = total_bought - total_sold
            
            logger.info(f"üìä {asset}: –∫—É–ø–ª–µ–Ω–æ {total_bought:.6f}, –ø—Ä–æ–¥–∞–Ω–æ {total_sold:.6f}, –æ—Å—Ç–∞—Ç–æ–∫ {remaining_quantity:.6f}")
            
            if remaining_quantity <= 0:
                logger.info(f"üìä {asset}: –≤—Å–µ –º–æ–Ω–µ—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã, PnL = 0")
                return 0.0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            total_cost = sum(float(order.get('cummulativeQuoteQty', 0)) for order in buy_orders)
            avg_buy_price = (total_cost / total_bought) if total_bought > 0 else 0.0
            
            logger.info(f"üí∞ {asset}: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ = ${avg_buy_price:.4f}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            current_value = current_quantity * current_price
            cost_basis = current_quantity * avg_buy_price
            pnl = current_value - cost_basis
            
            logger.info(f"üìà {asset}: —Ç–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å = ${current_value:.4f}, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å = ${cost_basis:.4f}, PnL = ${pnl:.4f}")
            
            return pnl
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {asset}: {e}")
            return 0.0
    
    ############################################################
    # üßÆ AVG-COST PnL (–∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫)
    ############################################################
    def _calculate_avg_cost_pnl(self, symbol: str, current_quantity: float, current_price: float) -> dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫ (moving average).
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å avg_buy_price, realized_pnl, unrealized_pnl, total_pnl."""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∏ –∫–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤ –∏–∑ —Å–∏–º–≤–æ–ª–∞
            base_asset = ''.join([c for c in symbol if not c.isdigit()]).replace('USDC', '').replace('USDT', '')
            quote_asset = 'USDC' if symbol.endswith('USDC') else ('USDT' if symbol.endswith('USDT') else 'USDT')
            
            trades = self.mex_adv.get_my_trades(symbol, limit=500) or []
            trades = sorted(trades, key=lambda t: t.get('time', 0))
            
            position_qty = 0.0
            cost_basis_total = 0.0  # –í –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ
            realized_pnl = 0.0
            
            def commission_in_quote(trade):
                commission = float(trade.get('commission', 0) or 0)
                commission_asset = trade.get('commissionAsset')
                price = float(trade.get('price', 0) or 0)
                if commission <= 0:
                    return 0.0
                if commission_asset == quote_asset:
                    return commission
                if commission_asset == base_asset and price > 0:
                    return commission * price
                # –ö–æ–º–∏—Å—Å–∏—è –≤ –¥—Ä—É–≥–æ–º –∞–∫—Ç–∏–≤–µ ‚Äî –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
                return 0.0
            
            for trade in trades:
                qty = float(trade.get('qty', 0) or 0)
                price = float(trade.get('price', 0) or 0)
                quote_qty = float(trade.get('quoteQty', 0) or 0)
                is_buyer = bool(trade.get('isBuyer', False))
                fee_q = commission_in_quote(trade)
                
                if is_buyer:
                    # –ü–æ–∫—É–ø–∫–∞: —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
                    total_cost = quote_qty + fee_q
                    new_position = position_qty + qty
                    if new_position > 0:
                        cost_basis_total = cost_basis_total + total_cost
                        position_qty = new_position
                else:
                    # –ü—Ä–æ–¥–∞–∂–∞: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
                    if position_qty <= 0:
                        continue
                    avg_price = cost_basis_total / position_qty if position_qty > 0 else 0.0
                    revenue = quote_qty - fee_q
                    realized_pnl += revenue - (avg_price * qty)
                    # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–∑—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                    cost_basis_total -= avg_price * qty
                    position_qty -= qty
                    if position_qty < 1e-12:
                        position_qty = 0.0
                        cost_basis_total = 0.0
            
            avg_buy_price = (cost_basis_total / position_qty) if position_qty > 0 else 0.0
            qty_for_pnl = min(current_quantity, position_qty) if position_qty > 0 else 0.0
            unrealized_pnl = (current_price - avg_buy_price) * qty_for_pnl
            total_pnl = realized_pnl + unrealized_pnl
            
            logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∞ {symbol}: ${avg_buy_price:.6f}; –ü–æ–∑–∏—Ü–∏—è={position_qty:.8f}; –ë–∞–ª–∞–Ω—Å={current_quantity:.8f}")
            logger.info(f"üìà PnL: —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π=${realized_pnl:.4f}, –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π=${unrealized_pnl:.4f}, –∏—Ç–æ–≥–æ=${total_pnl:.4f}")
            
            return {
                'avg_buy_price': avg_buy_price,
                'position_qty': position_qty,
                'realized_pnl': realized_pnl,
                'unrealized_pnl': unrealized_pnl,
                'total_pnl': total_pnl,
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ AvgCost PnL –¥–ª—è {symbol}: {e}")
            return {
                'avg_buy_price': 0.0,
                'position_qty': 0.0,
                'realized_pnl': 0.0,
                'unrealized_pnl': 0.0,
                'total_pnl': 0.0,
            }
    
    ############################################################
    # ‚öñÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò –ü–û–†–¢–§–ï–õ–Ø
    ############################################################
    async def check_portfolio_balance(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É—á–µ—Ç–æ–º PnL"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if current_time - self.last_balance_check < self.balance_check_interval:
                return
            
            self.last_balance_check = current_time
            
            logger.info("‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_pnl = 0.0
            status = self.get_current_status()
            
            # –ë–µ—Ä–µ–º –æ–±—â–∏–π PnL –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
            if 'total_pnl' in status:
                total_pnl = status['total_pnl']
            
            logger.info(f"üí∞ –û–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_pnl:.4f}")
            
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ–±—â–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL
            # –¢–µ–ø–µ—Ä—å PortfolioBalancer —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å/–ø–æ–∫—É–ø–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ PnL –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            logger.info(f"üí∞ –û–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_pnl:.4f} - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PortfolioBalancer")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
            if total_pnl < 0:
                info_message = (
                    "<b>‚ÑπÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –° –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ú PnL</b>\n\n"
                    f"üìâ –û–±—â–∏–π PnL: ${total_pnl:.4f}\n"
                    f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–ª—é—Å–µ\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    "üí° PortfolioBalancer –ø—Ä–æ–≤–µ—Ä–∏—Ç PnL –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"
                )
                self.send_telegram_message(info_message)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            result = await self.portfolio_balancer.execute_portfolio_rebalance()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            if result['success'] or result.get('reason') != 'not_needed':
                report = self.portfolio_balancer.format_rebalance_report(result)
                self.send_telegram_message(report)
                
                if result['success']:
                    logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.info(f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {result.get('error', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    ############################################################
    # ‚öñÔ∏è –°–ò–ù–•–†–û–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò
    ############################################################
    async def check_portfolio_balance_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if current_time - getattr(self, 'last_balance_check', 0) < getattr(self, 'balance_check_interval', 3600):
                return
            
            self.last_balance_check = current_time
            
            logger.info("‚öñÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_pnl = 0.0
            status = self.get_current_status()
            
            # –ë–µ—Ä–µ–º –æ–±—â–∏–π PnL –∏–∑ —Å—Ç–∞—Ç—É—Å–∞
            if 'total_pnl' in status:
                total_pnl = status['total_pnl']
            
            logger.info(f"üí∞ –û–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_pnl:.4f}")
            
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ–±—â–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL
            # –¢–µ–ø–µ—Ä—å PortfolioBalancer —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å/–ø–æ–∫—É–ø–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ PnL –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            logger.info(f"üí∞ –û–±—â–∏–π PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${total_pnl:.4f} - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PortfolioBalancer")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ)
            if total_pnl < 0:
                info_message = (
                    "<b>‚ÑπÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –° –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ú PnL</b>\n\n"
                    f"üìâ –û–±—â–∏–π PnL: ${total_pnl:.4f}\n"
                    f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–æ–≤ –≤ –ø–ª—é—Å–µ\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    "üí° PortfolioBalancer –ø—Ä–æ–≤–µ—Ä–∏—Ç PnL –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"
                )
                self.send_telegram_message(info_message)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            result = await self.portfolio_balancer.execute_portfolio_rebalance()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            if result['success'] or result.get('reason') != 'not_needed':
                report = self.portfolio_balancer.format_rebalance_report(result)
                self.send_telegram_message(report)
                
                if result['success']:
                    logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.info(f"‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {result.get('error', '–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
     
    ############################################################
    # üì® –û–¢–ß–Å–¢ –ü–û –ò–°–¢–û–†–ò–ò –û–†–î–ï–†–û–í
    ############################################################
    def format_history_report(self, analysis: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            message = "<b>üìú –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í</b>\n\n"
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            message += f"üìã –í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {analysis['total_orders']}\n"
            message += f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {analysis['completed_orders']}\n"
            message += f"üü¢ –ü–æ–∫—É–ø–æ–∫: {analysis['buy_orders']}\n"
            message += f"üî¥ –ü—Ä–æ–¥–∞–∂: {analysis['sell_orders']}\n"
            message += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${analysis['total_volume_usdc']:.2f}\n"
            
            if analysis['total_pnl'] != 0:
                pnl_emoji = "üìà" if analysis['total_pnl'] > 0 else "üìâ"
                message += f"{pnl_emoji} –ü—Ä–∏–º–µ—Ä–Ω—ã–π PnL: ${analysis['total_pnl']:.2f}\n"
            
            message += f"\nüí∞ <b>–û–ë–™–ï–ú–´:</b>\n"
            message += f"üü¢ –ü–æ–∫—É–ø–∫–∏: ${analysis.get('buy_volume', 0):.2f}\n"
            message += f"üî¥ –ü—Ä–æ–¥–∞–∂–∏: ${analysis.get('sell_volume', 0):.2f}\n\n"
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            if analysis['recent_orders']:
                message += f"üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï –û–†–î–ï–†–ê:</b>\n"
                
                for i, order in enumerate(analysis['recent_orders'][:10], 1):
                    side_emoji = "üü¢" if order['side'] == 'BUY' else "üî¥"
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
                    try:
                        from datetime import datetime
                        order_time = datetime.fromtimestamp(order['time'] / 1000).strftime('%H:%M:%S')
                    except:
                        order_time = "N/A"
                    
                    message += (
                        f"{i}. {side_emoji} <b>{order['symbol']}</b>\n"
                        f"   üí∞ {order['quantity']:.6f} @ ${order['avg_price']:.4f}\n"
                        f"   üíµ –û–±—ä–µ–º: ${order['volume']:.2f}\n"
                        f"   ‚è∞ {order_time}\n"
                        f"   üÜî <code>{order['order_id']}</code>\n\n"
                    )
                
                if len(analysis['recent_orders']) > 10:
                    message += f"... –∏ –µ—â–µ {len(analysis['recent_orders']) - 10} –æ—Ä–¥–µ—Ä–æ–≤\n\n"
            else:
                message += "üö´ –ù–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤\n\n"
            
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}"
    
    ############################################################
    # üìà PnL –ê–ö–¢–ò–í–ê (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤)
    ############################################################
    def calculate_pnl(self, asset: str, quantity: float, current_price: float):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL –¥–ª—è –∞–∫—Ç–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—É—é —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
            if asset == 'BTC':
                symbol = 'BTCUSDC'
            elif asset == 'ETH':
                symbol = 'ETHUSDC'
            else:
                return 0.0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            order_history = self.mex_api.get_order_history(symbol, limit=100)
            
            if not order_history:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {asset}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É")
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º
                avg_buy_price = current_price * 1.002  # +0.2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                logger.info(f"üìä {asset} –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞: ${avg_buy_price:.4f}")
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ BUY –æ—Ä–¥–µ—Ä–∞
                buy_orders = []
                for order in order_history:
                    if (order.get('status') == 'FILLED' and 
                        order.get('side') == 'BUY' and 
                        float(order.get('executedQty', 0)) > 0):
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                        executed_qty = float(order.get('executedQty', 0))
                        total_quote = float(order.get('cummulativeQuoteQty', 0))
                        
                        if executed_qty > 0 and total_quote > 0:
                            avg_price = total_quote / executed_qty
                            buy_orders.append({
                                'quantity': executed_qty,
                                'price': avg_price,
                                'total_value': total_quote
                            })
                
                if buy_orders:
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏
                    total_quantity = sum(order['quantity'] for order in buy_orders)
                    total_value = sum(order['total_value'] for order in buy_orders)
                    avg_buy_price = total_value / total_quantity
                    
                    logger.info(f"üìä {asset} —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${avg_buy_price:.4f} –∏–∑ {len(buy_orders)} –æ—Ä–¥–µ—Ä–æ–≤")
                    logger.info(f"üîç {asset} –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity:.6f}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {quantity:.6f}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç BUY –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {asset}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É")
                    avg_buy_price = current_price * 1.002
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
            pnl = (current_price - avg_buy_price) * quantity
            
            logger.info(f"üìà {asset} PnL —Ä–∞—Å—á–µ—Ç: —Ü–µ–Ω–∞=${current_price:.4f}, —Å—Ä–µ–¥–Ω—è—è=${avg_buy_price:.4f}, PnL=${pnl:.4f}")
            
            return pnl
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {asset}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É
            avg_buy_price = current_price * 1.002
            logger.warning(f"‚ö†Ô∏è Fallback –¥–ª—è {asset}: ${avg_buy_price:.4f}")
            return 0.0
    
    ############################################################
    # üßæ –ü–†–û–î–ê–ñ–ê: –õ–ò–ú–ò–¢ –ë–õ–ò–ó–ö–û –ö –†–´–ù–ö–£
    ############################################################
    def market_sell(self, symbol: str, quantity: float):
        """–õ–∏–º–∏—Ç–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ –±–ª–∏–∑–∫–æ –∫ —Ä—ã–Ω–∫—É"""
        try:
            logger.info(f"üöÄ –õ–∏–º–∏—Ç–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ {quantity} {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = self.get_current_price(symbol)
            if not current_price:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}")
                return None
            
            # –°—Ç–∞–≤–∏–º –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É —á—É—Ç—å –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            limit_price = current_price * 0.999  # -0.1% –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
            
            logger.info(f"üí∞ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
            logger.info(f"üéØ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${limit_price:.4f}")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            order = self.mex_api.place_order(
                symbol=symbol,
                side='SELL',
                quantity=quantity,
                price=limit_price  # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–∑–¥–∞–Ω: {order['orderId']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–ù–ï–ú–ï–î–õ–ï–ù–ù–û)
                message = (
                    f"üí∞ <b>–ü–†–û–î–ê–ñ–ê BTC/ETH</b>\n\n"
                    f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>\n"
                    f"üÜî ID: <code>{order['orderId']}</code>\n"
                    f"üí± –ü–∞—Ä–∞: {symbol}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                    f"üí∞ –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}\n"
                    f"üéØ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${limit_price:.4f}\n"
                    f"üìà –¢–∏–ø: –õ–ò–ú–ò–¢–ù–´–ô (-0.1%)\n\n"
                    f"üéØ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> PnL > $0.15\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(message)
                
                # –¢—Ä–∏–≥–≥–µ—Ä –ø–æ—Å—Ç-–ø—Ä–æ–¥–∞–∂–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50
                try:
                    balancer = PostSaleBalancer()
                    balance_result = balancer.rebalance_on_freed_funds()
                    logger.info(f"‚öñÔ∏è PostSaleBalancer: {balance_result}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ PostSaleBalancer: {e}")
                
                return order
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏: {order}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return None
    
    ############################################################
    # üîé –û–°–ù–û–í–ù–û–ô –®–ê–ì: –ü–†–û–í–ï–†–ö–ê PnL –ò –ü–†–û–î–ê–ñ–ê
    ############################################################
    def check_pnl_and_sell(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å PnL –∏ –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PnL...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_balances()
            logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã: {list(balances.keys())}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            pnl_data = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC –∏ ETH
            for asset in ['BTC', 'ETH']:
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {asset}...")
                
                if asset in balances:
                    quantity = balances[asset]['total']
                    logger.info(f"üìä {asset} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–∞—Ö, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
                    
                    if quantity > 0:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
                        if asset == 'BTC':
                            symbol = 'BTCUSDC'
                        else:
                            symbol = 'ETHUSDC'
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        current_price = self.get_current_price(symbol)
                        if not current_price:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                            continue
                        
                        # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç: PnL –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞–∫—É–ø–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
                        avg_cost_pnl = self._calculate_avg_cost_pnl(symbol, quantity, current_price)
                        pnl = avg_cost_pnl.get('unrealized_pnl', 0.0)
                        avg_buy_price = avg_cost_pnl.get('avg_buy_price', 0.0)
                        pnl_pct = 0.0
                        if avg_buy_price > 0:
                            pnl_pct = ((current_price - avg_buy_price) / avg_buy_price) * 100.0
                        
                        logger.info(f"üìä {asset}:")
                        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
                        logger.info(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                        logger.info(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—É–ø–∞: ${avg_buy_price:.4f}")
                        logger.info(f"   PnL (AvgCost): ${pnl:.4f}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ PnL –ø–æ—Ä–æ–≥ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –¥–æ–ª–ª–∞—Ä–æ–≤—ã–π)
                        meets_threshold = False
                        if self.profit_threshold_pct is not None and avg_buy_price > 0:
                            meets_threshold = pnl_pct >= float(self.profit_threshold_pct)
                        else:
                            meets_threshold = pnl > self.profit_threshold

                        if meets_threshold:
                            logger.info(f"üéØ PnL –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥! –ü—Ä–æ–¥–∞–µ–º {asset}...")
                            
                            # –†—ã–Ω–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞ (–ª–∏–º–∏—Ç–Ω–∞—è –æ–∫–æ–ª–æ —Ä—ã–Ω–∫–∞)
                            order = self.market_sell(symbol, quantity)
                            if order:
                                logger.info(f"‚úÖ {asset} –ø—Ä–æ–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                                try:
                                    saver = IncomeSaver(threshold_usdt=395.0)
                                    park_result = saver.try_park_usdt_to_usdp()
                                    logger.info(f"üíº IncomeSaver: {park_result}")
                                except Exception as e:
                                    logger.error(f"IncomeSaver –æ—à–∏–±–∫–∞: {e}")
                            else:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ {asset}")
                        else:
                            if self.profit_threshold_pct is not None and avg_buy_price > 0:
                                logger.info(f"üìà PnL {asset}: {pnl_pct:.2f}% (–ø–æ—Ä–æ–≥: {self.profit_threshold_pct}%)")
                            else:
                                logger.info(f"üìà PnL {asset}: ${pnl:.4f} (–ø–æ—Ä–æ–≥: ${self.profit_threshold})")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            pnl_data.append({
                                'asset': asset,
                                'quantity': quantity,
                                'current_price': current_price,
                                'pnl': pnl
                            })
                    else:
                        logger.info(f"‚ö†Ô∏è {asset} –Ω–∞–π–¥–µ–Ω, –Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0")
                else:
                    logger.info(f"‚ö†Ô∏è {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–∞—Ö")
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            current_time = time.time()
            if not hasattr(self, 'last_summary_time'):
                self.last_summary_time = 0
            
            if current_time - self.last_summary_time >= 300 and pnl_data:  # 5 –º–∏–Ω—É—Ç
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è BTC/ETH (–±–µ–∑ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤)
                try:
                    portfolio_value = sum((it['quantity'] * it['current_price']) for it in pnl_data)
                except Exception:
                    portfolio_value = 0.0
                
                # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–≤–∫–ª—é—á–∞—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã)
                usdt_balance = 0.0
                usdc_balance = 0.0
                total_portfolio = 0.0
                
                try:
                    account_info = self.mex_api.get_account_info()
                    if account_info and 'balances' in account_info:
                        for balance in account_info['balances']:
                            asset = balance['asset']
                            total = float(balance.get('free', 0)) + float(balance.get('locked', 0))
                            if total <= 0:
                                continue
                            if asset == 'USDT':
                                usdt_balance = total
                                total_portfolio += total
                            elif asset == 'USDC':
                                usdc_balance = total
                                total_portfolio += total
                            else:
                                try:
                                    ticker = self.mex_api.get_ticker_price(f"{asset}USDT")
                                    if ticker and 'price' in ticker:
                                        total_portfolio += total * float(ticker['price'])
                                except Exception:
                                    pass
                except Exception:
                    pass
                
                message_lines = [
                    "üìä <b>–ü–û–†–¢–§–ï–õ–¨ BTC/ETH</b>\n",
                    f"üíé <b>–°–¢–û–ò–ú–û–°–¢–¨ –ü–û–†–¢–§–ï–õ–Ø</b>: <code>${portfolio_value:.2f}</code>\n",
                    f"üè¶ <b>–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨</b>: <code>${total_portfolio:.2f}</code>\n\n",
                    f"üíµ <b>–°–¢–ê–ë–ò–õ–¨–ù–´–ï –ú–û–ù–ï–¢–´:</b>\n",
                    f"   üí∞ USDT: ${usdt_balance:.2f}\n",
                    f"   üí∞ USDC: ${usdc_balance:.2f}\n\n"
                ]
                for item in pnl_data:
                    pnl_status = "üìà" if item['pnl'] > 0 else "üìâ" if item['pnl'] < 0 else "‚û°Ô∏è"
                    message_lines.append(
                        f"{pnl_status} <b>{item['asset']}</b>:\n"
                        f"   üìä {item['quantity']:.6f} @ ${item['current_price']:.4f}\n"
                        f"   üíµ PnL: ${item['pnl']:.4f} (–ø–æ—Ä–æ–≥: $0.07)\n\n"
                    )
                message_lines.append(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 1 —á–∞—Å–∞)
                self.report_counter += 1
                if self.report_counter % 2 == 0:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –æ—Ç—á–µ—Ç
                    self.send_telegram_message("".join(message_lines))
                    logger.info("üìä –û—Ç—á–µ—Ç PnL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                else:
                    logger.info("üìä –û—Ç—á–µ—Ç PnL –ø—Ä–æ–ø—É—â–µ–Ω (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ø–∞–º–∞)")
                
                self.last_summary_time = current_time
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PnL: {e}")
    
    ############################################################
    # ‚ôªÔ∏è –¶–ò–ö–õ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê PnL
    ############################################################
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PnL"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PnL...")
            
            # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ intro.mp4)
            
            self.is_running = True
            
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL –∏ –ø—Ä–æ–¥–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    self.check_pnl_and_sell()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                    try:
                        # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                        await self.check_portfolio_balance_sync()
                    except Exception as balance_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {balance_error}")
                    
                    # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    time.sleep(self.check_interval)
                    
                except KeyboardInterrupt:
                    logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(60)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            stop_message = (
                f"üõë <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì PnL –û–°–¢–ê–ù–û–í–õ–ï–ù</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            self.send_telegram_message(stop_message)
    
    ############################################################
    # üõë –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    ############################################################
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PnL...")
    
    ############################################################
    # üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°
    ############################################################
    def get_current_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã –∏ PnL
            balances = self.get_balances()
            total_pnl = 0.0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π PnL
            for asset in ['BTC', 'ETH']:
                if asset in balances:
                    quantity = balances[asset]['total']
                    if quantity > 0:
                        symbol = 'BTCUSDC' if asset == 'BTC' else 'ETHUSDC'
                        current_price = self.get_current_price(symbol)
                        if current_price:
                            pnl = self.calculate_pnl(asset, quantity, current_price)
                            total_pnl += pnl
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–∞—Ö
            orders_info = self.get_open_orders_info()
            
            return {
                'monitoring_active': self.is_running,
                'auto_sell_enabled': True,
                'telegram_notifications_active': True,
                'total_pnl': total_pnl,
                'daily_pnl': total_pnl * 0.1,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'weekly_pnl': total_pnl * 0.3,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'monthly_pnl': total_pnl * 0.8,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                'check_interval': self.check_interval,
                'max_daily_purchases': 10,
                'profit_threshold': self.profit_threshold,
                'balances': balances,
                'orders': orders_info
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                'monitoring_active': False,
                'auto_sell_enabled': False,
                'telegram_notifications_active': False,
                'total_pnl': 0.0,
                'daily_pnl': 0.0,
                'weekly_pnl': 0.0,
                'monthly_pnl': 0.0,
                'check_interval': 60,
                'max_daily_purchases': 10,
                'profit_threshold': 0.40,
                'balances': {}
            }

async def main():
    monitor = PnLMonitor()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PnL
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        monitor.stop_monitoring()

if __name__ == "__main__":
    main() 