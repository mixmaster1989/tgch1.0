#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ USDT/USDC
–í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
"""

import time
import logging
from datetime import datetime
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class StablecoinBalancer:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.check_interval = 3600  # 1 —á–∞—Å
        self.min_balance_diff = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        self.last_balance_time = 0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {'chat_id': self.chat_id, 'text': message, 'parse_mode': 'HTML'}
        try:
            requests.post(url, data=data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
    
    def get_stablecoin_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã USDT –∏ USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            balances = {'USDT': 0.0, 'USDC': 0.0}
            
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                if asset in ['USDT', 'USDC']:
                    balances[asset] = float(balance['free'])
            
            return balances
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {'USDT': 0.0, 'USDC': 0.0}
    
    def calculate_rebalance(self, usdt_balance, usdc_balance):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É"""
        total = usdt_balance + usdc_balance
        target_each = total / 2
        
        usdt_diff = usdt_balance - target_each
        usdc_diff = usdc_balance - target_each
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        if abs(usdt_diff) < self.min_balance_diff:
            return None  # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        if usdt_diff > 0:
            # USDT –±–æ–ª—å—à–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDC
            return {
                'from': 'USDT',
                'to': 'USDC', 
                'amount': abs(usdt_diff),
                'symbol': 'USDCUSDT',
                'side': 'BUY'  # –ü–æ–∫—É–ø–∞–µ–º USDC –∑–∞ USDT
            }
        else:
            # USDC –±–æ–ª—å—à–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
            return {
                'from': 'USDC',
                'to': 'USDT',
                'amount': abs(usdc_diff),
                'symbol': 'USDCUSDT', 
                'side': 'SELL'  # –ü—Ä–æ–¥–∞–µ–º USDC –∑–∞ USDT
            }
    
    def execute_conversion(self, conversion):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤"""
        try:
            symbol = conversion['symbol']
            side = conversion['side']
            amount = conversion['amount']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if not ticker or 'price' not in ticker:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'}
            
            price = float(ticker['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if side == 'BUY':
                # –ü–æ–∫—É–ø–∞–µ–º USDC –∑–∞ USDT
                quantity = amount / price
            else:
                # –ü—Ä–æ–¥–∞–µ–º USDC –∑–∞ USDT
                quantity = amount
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –¥–ª—è —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
            quantity = round(quantity, 2)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            order = self.mex_api.place_market_order(
                symbol=symbol,
                side=side,
                quantity=quantity
            )
            
            if order and 'orderId' in order:
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': price,
                    'amount': amount
                }
            else:
                return {'success': False, 'error': f'API –æ—à–∏–±–∫–∞: {order}'}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def check_and_balance(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É"""
        try:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if current_time - self.last_balance_time < self.check_interval:
                return
            
            self.last_balance_time = current_time
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_stablecoin_balances()
            usdt_balance = balances['USDT']
            usdc_balance = balances['USDC']
            total_balance = usdt_balance + usdc_balance
            
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å—ã: USDT=${usdt_balance:.2f}, USDC=${usdc_balance:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            if total_balance < 20.0:
                logger.info("–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç–µ–π–±–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            conversion = self.calculate_rebalance(usdt_balance, usdc_balance)
            
            if not conversion:
                logger.info(f"–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ < ${self.min_balance_diff})")
                return
            
            logger.info(f"üîÑ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {conversion['from']} ‚Üí {conversion['to']}, ${conversion['amount']:.2f}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            result = self.execute_conversion(conversion)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            self.send_balance_report(balances, conversion, result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å—Ç–µ–π–±–ª–æ–≤: {e}")
    
    def send_balance_report(self, before_balances, conversion, result):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ"""
        try:
            if result['success']:
                message = (
                    f"<b>‚öñÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –°–¢–ï–ô–ë–õ–ö–û–ò–ù–û–í</b>\n\n"
                    f"üìä <b>–î–û:</b>\n"
                    f"üíö USDT: ${before_balances['USDT']:.2f}\n"
                    f"üíô USDC: ${before_balances['USDC']:.2f}\n"
                    f"üí∞ –í—Å–µ–≥–æ: ${sum(before_balances.values()):.2f}\n\n"
                    f"üîÑ <b>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø:</b>\n"
                    f"üì§ {conversion['from']} ‚Üí {conversion['to']}\n"
                    f"üíµ –°—É–º–º–∞: ${conversion['amount']:.2f}\n"
                    f"üìä –°–∏–º–≤–æ–ª: {conversion['symbol']}\n"
                    f"‚ö° –¢–∏–ø: {conversion['side']}\n"
                    f"üÜî –û—Ä–¥–µ—Ä: <code>{result['order_id']}</code>\n\n"
                    f"üéØ <b>–¶–ï–õ–¨:</b> –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ 50/50\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
            else:
                message = (
                    f"<b>‚ùå –û–®–ò–ë–ö–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò –°–¢–ï–ô–ë–õ–û–í</b>\n\n"
                    f"üíö USDT: ${before_balances['USDT']:.2f}\n"
                    f"üíô USDC: ${before_balances['USDC']:.2f}\n\n"
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞: {conversion['from']} ‚Üí {conversion['to']}\n"
                    f"üíµ –°—É–º–º–∞: ${conversion['amount']:.2f}\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
            
            self.send_telegram_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            f"<b>‚öñÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö –°–¢–ï–ô–ë–õ–û–í –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å\n"
            f"üìä –¶–µ–ª—å: 50% USDT / 50% USDC\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: ${self.min_balance_diff}\n"
            f"‚ö° –ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        )
        self.send_telegram_message(startup_message)
        
        while True:
            try:
                self.check_and_balance()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–æ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Ä–∞–∑ –≤ —á–∞—Å
            except KeyboardInterrupt:
                logger.info("üõë –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)

if __name__ == "__main__":
    balancer = StablecoinBalancer()
    balancer.start_monitoring()