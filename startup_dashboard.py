import requests
from datetime import datetime
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from portfolio_analyzer import PortfolioAnalyzer

class StartupDashboard:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.portfolio_analyzer = PortfolioAnalyzer()
    
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_startup_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–ª–∞—à–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            account_info = self.mex_api.get_account_info()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = self.mex_api.get_open_orders()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "<b>MEX Trading Bot –∑–∞–ø—É—â–µ–Ω!</b>\n"
            message += f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            
            # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if 'balances' in account_info:
                message += "<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> –ê–∫—Ç–∏–≤–Ω–æ\n"
                message += f"<b>–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_info.get('accountType', 'SPOT')}\n\n"
                
                # –ë–∞–ª–∞–Ω—Å
                message += "<b>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n"
                balances = [b for b in account_info['balances'] if float(b['free']) > 0 or float(b['locked']) > 0]
                
                if balances:
                    for balance in balances[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                        free = float(balance['free'])
                        locked = float(balance['locked'])
                        total = free + locked
                        message += f"  ‚Ä¢ {balance['asset']}: {total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ: {free:.4f})\n"
                else:
                    message += "  ‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤\n"
                
                # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
                message += f"\n<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞:</b> {len(open_orders) if isinstance(open_orders, list) else 0}\n"
                
                if isinstance(open_orders, list) and len(open_orders) > 0:
                    for order in open_orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        side_emoji = "[BUY]" if order['side'] == 'BUY' else "[SELL]"
                        message += f"  {side_emoji} {order['symbol']}: {order['side']} {float(order['origQty']):.4f} @ {float(order['price']):.6f}\n"
                
                # –†–∞–∑—Ä–µ—à–µ–Ω–∏—è
                permissions = account_info.get('permissions', [])
                message += f"\n<b>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è:</b> {', '.join(permissions)}\n"
                
                # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
                can_trade = account_info.get('canTrade', False)
                can_withdraw = account_info.get('canWithdraw', False)
                can_deposit = account_info.get('canDeposit', False)
                
                message += f"<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b> {'–î–ê' if can_trade else '–ù–ï–¢'}\n"
                message += f"<b>–í—ã–≤–æ–¥:</b> {'–î–ê' if can_withdraw else '–ù–ï–¢'}\n"
                message += f"<b>–î–µ–ø–æ–∑–∏—Ç:</b> {'–î–ê' if can_deposit else '–ù–ï–¢'}\n"
                
            else:
                message += "<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> –û—à–∏–±–∫–∞\n"
                message += f"<b>–û—à–∏–±–∫–∞:</b> {account_info}\n"
            
            message += "\n<b>–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n"
            message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            
            return message
            
        except Exception as e:
            error_message = "<b>MEX Trading Bot –∑–∞–ø—É—â–µ–Ω!</b>\n"
            error_message += f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            error_message += f"<b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:</b>\n{str(e)}\n\n"
            error_message += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π"
            return error_message
    
    def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        message = self.get_startup_info()
        result = self.send_telegram_message(message)
        
        if result and result.get('ok'):
            print("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        return result
    
    def send_auto_purchase_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫"""
        try:
            from auto_purchase_config import get_config
            
            config = get_config()
            balance_config = config['balance_monitor']
            allocation_config = config['allocation']
            
            message = "<b>ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–£–ü–ö–ò –ó–ê–ü–£–©–ï–ù–´</b>\n"
            message += "=" * 50 + "\n\n"
            
            message += "<b>üìä –ù–ê–°–¢–†–û–ô–ö–ò:</b>\n"
            message += f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_config['min_balance_threshold']}\n"
            message += f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance_config['max_purchase_amount']}\n"
            message += f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {balance_config['balance_check_interval']} —Å–µ–∫\n"
            message += f"üìà BTC: {allocation_config['btc_allocation']*100}% | ETH: {allocation_config['eth_allocation']*100}%\n\n"
            
            message += "<b>üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:</b>\n"
            message += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏: {balance_config['min_purchase_interval']} —Å–µ–∫\n"
            message += f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–æ–∫ –≤ –¥–µ–Ω—å: {balance_config['max_daily_purchases']}\n\n"
            
            message += "<b>üîÑ –°–¢–ê–¢–£–°:</b>\n"
            message += "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω\n"
            message += "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã\n"
            message += "‚úÖ –õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞\n"
            message += "‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã\n\n"
            
            message += "=" * 50 + "\n"
            message += "<b>üöÄ MEXCAITRADE - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø</b>"
            
            result = self.send_telegram_message(message)
            
            if result and result.get('ok'):
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–∫–∞—Ö: {e}")
    
    def send_extended_portfolio_report(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ —Å P&L"""
        try:
            print("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
            return self.portfolio_analyzer.send_portfolio_report()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False