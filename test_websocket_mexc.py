#!/usr/bin/env python3
"""
–¢–µ—Å—Ç WebSocket MEXC —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–∞–Ω–∞–ª–æ–≤
"""

import asyncio
import websockets
import json
import time

async def test_mexc_websocket():
    """–¢–µ—Å—Ç WebSocket MEXC —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
    print("üîç –¢–ï–°–¢ WEB SOCKET MEXC")
    print("=" * 60)
    
    url = "wss://wbs-api.mexc.com/ws"
    
    try:
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {url}...")
        websocket = await websockets.connect(url, timeout=10)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç ping/pong
        print("\nüèì –¢–µ—Å—Ç ping/pong...")
        ping_msg = {"method": "PING"}
        await websocket.send(json.dumps(ping_msg))
        
        try:
            pong = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì® PONG: {pong}")
        except asyncio.TimeoutError:
            print("‚è∞ PONG –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        print("\nüìä –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫–∏...")
        deals_subscription = {
            "method": "SUBSCRIPTION",
            "params": ["spot@public.aggre.deals.v3.api.pb@100ms@BTCUSDT"]
        }
        
        await websocket.send(json.dumps(deals_subscription))
        
        try:
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Å–¥–µ–ª–∫–∏: {response}")
        except asyncio.TimeoutError:
            print("‚è∞ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏")
        
        # –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        print("\nüìà –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–≤–µ—á–∏...")
        kline_subscription = {
            "method": "SUBSCRIPTION",
            "params": ["spot@public.kline.v3.api.pb@BTCUSDT@Min1"]
        }
        
        await websocket.send(json.dumps(kline_subscription))
        
        try:
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Å–≤–µ—á–∏: {response}")
        except asyncio.TimeoutError:
            print("‚è∞ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–µ—á–∏")
        
        # –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–ª—É–±–∏–Ω—É (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        print("\nüìö –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–ª—É–±–∏–Ω—É...")
        depth_subscription = {
            "method": "SUBSCRIPTION",
            "params": ["spot@public.aggre.depth.v3.api.pb@100ms@BTCUSDT"]
        }
        
        await websocket.send(json.dumps(depth_subscription))
        
        try:
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            print(f"üì® –û—Ç–≤–µ—Ç –Ω–∞ –≥–ª—É–±–∏–Ω—É: {response}")
        except asyncio.TimeoutError:
            print("‚è∞ –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥–ª—É–±–∏–Ω—É")
        
        # –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\n‚è≥ –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ (10 —Å–µ–∫—É–Ω–¥)...")
        start_time = time.time()
        data_count = 0
        
        while time.time() - start_time < 10:
            try:
                data = await asyncio.wait_for(websocket.recv(), timeout=2)
                data_count += 1
                print(f"üì® –î–∞–Ω–Ω—ã–µ #{data_count}: {data[:200]}...")
            except asyncio.TimeoutError:
                print("‚è∞ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö...")
                break
        
        print(f"\nüìä –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {data_count}")
        
        await websocket.close()
        print("‚úÖ WebSocket –∑–∞–∫—Ä—ã—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_mexc_websocket()) 