#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ ComprehensiveDataManager
"""

import asyncio
from datetime import datetime
from comprehensive_data_manager import ComprehensiveDataManager

async def check_comprehensive_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        print("üîç –ü–†–û–í–ï–†–ö–ê COMPREHENSIVE DATA MANAGER")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_manager = ComprehensiveDataManager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await data_manager.start()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
        await data_manager.subscribe_multiple_symbols(["ETHUSDT", "BTCUSDT", "ADAUSDT"])
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (10 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:")
        print("-" * 30)
        market_data = data_manager.get_market_data("ETHUSDT")
        if market_data:
            print(f"   –¶–µ–Ω–∞: ${market_data.price:.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.change_24h:.2f}%")
            print(f"   –û–±—ä–µ–º 24—á: {market_data.volume_24h:.2f}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º 24—á: ${market_data.high_24h:.2f}")
            print(f"   –ú–∏–Ω–∏–º—É–º 24—á: ${market_data.low_24h:.2f}")
        else:
            print("   ‚ùå –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("\nüìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:")
        print("-" * 30)
        indicators = data_manager.get_technical_indicators("ETHUSDT", "1m")
        if indicators:
            print(f"   RSI (14): {indicators.rsi_14:.2f}")
            print(f"   SMA (20): ${indicators.sma_20:.2f}")
            print(f"   EMA (12): ${indicators.ema_12:.2f}")
            print(f"   ATR (14): {indicators.atr_14:.4f}")
            print(f"   Volume SMA: {indicators.volume_sma:.2f}")
            
            # MACD
            if indicators.macd:
                macd_line = indicators.macd.get('macd', 0)
                signal_line = indicators.macd.get('signal', 0)
                histogram = indicators.macd.get('histogram', 0)
                print(f"   MACD: {macd_line:.4f}")
                print(f"   Signal: {signal_line:.4f}")
                print(f"   Histogram: {histogram:.4f}")
            
            # Bollinger Bands
            if indicators.bollinger:
                upper = indicators.bollinger.get('upper', 0)
                middle = indicators.bollinger.get('middle', 0)
                lower = indicators.bollinger.get('lower', 0)
                print(f"   Bollinger Upper: ${upper:.2f}")
                print(f"   Bollinger Middle: ${middle:.2f}")
                print(f"   Bollinger Lower: ${lower:.2f}")
        else:
            print("   ‚ùå –ù–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
        print("\nüìö ORDER BOOK:")
        print("-" * 30)
        orderbook = data_manager.get_orderbook_data("ETHUSDT")
        if orderbook:
            print(f"   –°–ø—Ä–µ–¥: ${orderbook.spread:.4f} ({orderbook.spread_percent:.4f}%)")
            print(f"   Bid –æ–±—ä–µ–º: {orderbook.bid_volume:.2f}")
            print(f"   Ask –æ–±—ä–µ–º: {orderbook.ask_volume:.2f}")
            print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {orderbook.volume_ratio:.2f}")
            print(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {orderbook.liquidity_score:.2f}")
            
            if orderbook.bids and orderbook.asks:
                print(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook.bids[0][0]:.2f} ({orderbook.bids[0][1]:.4f})")
                print(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook.asks[0][0]:.2f} ({orderbook.asks[0][1]:.4f})")
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–±—É–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        print("\nüí± –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö:")
        print("-" * 30)
        trade_history = data_manager.get_trade_history("ETHUSDT")
        if trade_history:
            print(f"   –ü–æ–∫—É–ø–∫–∏: {trade_history.buy_volume:.4f}")
            print(f"   –ü—Ä–æ–¥–∞–∂–∏: {trade_history.sell_volume:.4f}")
            print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {trade_history.volume_ratio:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {trade_history.avg_trade_size:.4f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(trade_history.trades)}")
        else:
            print("   ‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        print("\nüîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
        print("-" * 30)
        correlations = data_manager.get_correlation_data("ETHUSDT")
        if correlations:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            btc_corr = 0.0
            if 'market_regime' in correlations:
                btc_corr = correlations['market_regime'].get('btc_correlation', 0.0)
            
            volatility_rank = 0
            if 'volatility_analysis' in correlations:
                volatility_rank = correlations['volatility_analysis'].get('volatility_rank', 0)
            
            correlation_strength = 'unknown'
            if 'basic_correlations' in correlations and 'BTCUSDT' in correlations['basic_correlations']:
                correlation_strength = correlations['basic_correlations']['BTCUSDT'].get('strength', 'unknown')
            
            print(f"   BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {btc_corr:.4f}")
            print(f"   –†–∞–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {volatility_rank}")
            print(f"   –°–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {correlation_strength}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if 'market_regime' in correlations:
                regime = correlations['market_regime'].get('regime', 'unknown')
                print(f"   –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {regime}")
            
            if 'portfolio_recommendations' in correlations:
                recommendations = correlations['portfolio_recommendations']
                if recommendations:
                    print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations[0]}")
        else:
            print("   ‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        print("\nüì∞ –ù–û–í–û–°–¢–ò:")
        print("-" * 30)
        news_data = data_manager.get_news_data("ETHUSDT")
        if news_data:
            print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {news_data.get('sentiment', 'unknown')}")
            print(f"   –í–ª–∏—è–Ω–∏–µ: {news_data.get('impact_score', 0):.2f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_data.get('news', []))}")
        else:
            print("   ‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        print("\nüéØ –ö–ê–ù–î–ò–î–ê–¢–´ –î–õ–Ø –¢–û–†–ì–û–í–õ–ò:")
        print("-" * 30)
        candidates = data_manager.get_trading_candidates()
        if candidates:
            print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
            for i, candidate in enumerate(candidates[:5]):
                print(f"   {i+1}. {candidate['symbol']}: ${candidate['price']:.4f} (score: {candidate['score']:.2f})")
        else:
            print("   ‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await data_manager.stop()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_comprehensive_data()) 