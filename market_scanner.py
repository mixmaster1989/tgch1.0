#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed

from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
from anti_hype_filter import AntiHypeFilter
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MarketScanner:
    """–§–æ–Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.tech_indicators = TechnicalIndicators()
        self.anti_hype_filter = AntiHypeFilter()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.scan_interval = 600  # 10 –º–∏–Ω—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤)
        self.max_pairs = 200  # –ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 20 –¥–æ 200)
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        self.trading_pairs = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.scan_count = 0
        self.last_scan_time = None
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
        try:
            account_info = self.mex_api.get_account_info()
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0
    
    def get_top_trading_pairs(self, limit: int = 200) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤"""
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø {limit} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            
            # –ü–æ–ª—É—á–∞–µ–º 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º
            tickers = self.mex_api.get_24hr_ticker()
            if not isinstance(tickers, list):
                logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤")
                return self.get_fallback_pairs()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –æ–±—ä–µ–º–æ–º
            usdt_pairs = []
            for ticker in tickers:
                if (ticker['symbol'].endswith('USDT') and 
                    float(ticker.get('quoteVolume', 0)) > 10000):  # –ú–∏–Ω–∏–º—É–º $10k –æ–±—ä–µ–º–∞
                    usdt_pairs.append({
                        'symbol': ticker['symbol'],
                        'volume': float(ticker.get('quoteVolume', 0)),
                        'price': float(ticker.get('lastPrice', 0))
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤
            usdt_pairs.sort(key=lambda x: x['volume'], reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø –ø–∞—Ä
            top_pairs = [pair['symbol'] for pair in usdt_pairs[:limit]]
            
            # –ò–°–ö–õ–Æ–ß–ê–ï–ú BTCUSDT –∏ ETHUSDT
            top_pairs = [s for s in top_pairs if s not in ('BTCUSDT', 'ETHUSDT')]
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(top_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            logger.info(f"üìä –¢–æ–ø-5 –ø–æ –æ–±—ä–µ–º—É: {top_pairs[:5]}")
            
            return top_pairs
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return self.get_fallback_pairs()
    
    def get_fallback_pairs(self) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        return [
            # –ò—Å–∫–ª—é—á–µ–Ω—ã BTCUSDT –∏ ETHUSDT
            'BNBUSDT', 'ADAUSDT', 'SOLUSDT',
            'DOTUSDT', 'LINKUSDT', 'MATICUSDT', 'AVAXUSDT', 'UNIUSDT',
            'ATOMUSDT', 'LTCUSDT', 'XRPUSDT', 'BCHUSDT', 'ETCUSDT',
            'FILUSDT', 'NEARUSDT', 'ALGOUSDT', 'VETUSDT', 'ICPUSDT'
        ]
    
    def update_trading_pairs(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            self.trading_pairs = self.get_top_trading_pairs(self.max_pairs)
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –∏—Å–∫–ª—é—á–∞–µ–º BTCUSDT –∏ ETHUSDT, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–ª–∏
            self.trading_pairs = [s for s in self.trading_pairs if s not in ('BTCUSDT', 'ETHUSDT')]
            logger.info(f"üîÑ –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.trading_pairs)} –ø–∞—Ä")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            self.trading_pairs = self.get_fallback_pairs()
    
    def analyze_pair(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª) —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ä–µ—Ç—Ä–∞—è–º–∏
            klines = None
            for _ in range(3):
                klines = self.mex_api.get_klines(symbol, '15m', 24)
                if klines and len(klines) >= 20:
                    break
                time.sleep(0.4)
            if not klines or len(klines) < 20:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Ç—Ä–∞–∏)
            ticker = None
            for _ in range(3):
                ticker = self.mex_api.get_ticker_price(symbol)
                if ticker and 'price' in ticker:
                    break
                time.sleep(0.3)
            if not ticker or 'price' not in ticker:
                return None
            
            current_price = float(ticker['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.tech_indicators.calculate_all_indicators(klines, symbol)
            if not indicators:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
            filter_result = self.anti_hype_filter.check_buy_permission(symbol)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä
            score = 0
            reasons = []
            
            # RSI –∞–Ω–∞–ª–∏–∑
            rsi = indicators.get('rsi', 50)
            if rsi < 30:
                score += 3
                reasons.append("–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ")
            elif rsi < 45:
                score += 2
                reasons.append("–Ω–∏–∑–∫–∏–π_rsi")
            elif rsi > 70:
                score -= 1
                reasons.append("–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ")
            
            # –û–±—ä–µ–º –∞–Ω–∞–ª–∏–∑
            volume_ratio = indicators.get('volume_ratio', 1.0)
            if volume_ratio > 1.5:
                score += 2
                reasons.append("–≤—ã—Å–æ–∫–∏–π_–æ–±—ä–µ–º")
            elif volume_ratio > 1.2:
                score += 1
                reasons.append("–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π_–æ–±—ä–µ–º")
            
            # MACD –∞–Ω–∞–ª–∏–∑
            macd_signal = indicators.get('macd_signal', 'NEUTRAL')
            if macd_signal == 'BUY':
                score += 2
                reasons.append("macd_buy")
            elif macd_signal == 'SELL':
                score -= 1
                reasons.append("macd_sell")
            
            # Bollinger Bands –∞–Ω–∞–ª–∏–∑
            bb_position = indicators.get('bb_position', 0.5)
            if bb_position < 0.2:
                score += 2
                reasons.append("bb_–Ω–∏–∂–Ω—è—è")
            elif bb_position > 0.8:
                score -= 1
                reasons.append("bb_–≤–µ—Ä—Ö–Ω—è—è")
            
            # –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
            if not filter_result['allowed']:
                score = -10  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                reasons.append(f"–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω_{filter_result['reason']}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = max(0.1, min(0.9, (score + 5) / 10))
            
            return {
                'symbol': symbol,
                'price': current_price,
                'score': score,
                'confidence': confidence,
                'reasons': reasons,
                'rsi': rsi,
                'volume_ratio': volume_ratio,
                'macd_signal': macd_signal,
                'bb_position': bb_position,
                'filter_result': filter_result,
                'indicators': indicators
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def scan_market(self) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            self.update_trading_pairs()
            
            scan_results = {
                'timestamp': datetime.now(),
                'total_pairs': len(self.trading_pairs),
                'analyzed_pairs': 0,
                'buy_opportunities': [],
                'neutral_pairs': [],
                'blocked_pairs': [],
                'errors': []
            }
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
            max_workers = min(10, len(self.trading_pairs))  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ—Ç–æ–∫–æ–≤
            
            with ThreadPoolExecutor(max_workers=max_workers) as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–∞—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                future_to_symbol = {
                    executor.submit(self.analyze_pair, symbol): symbol 
                    for symbol in self.trading_pairs
                }
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for future in as_completed(future_to_symbol):
                    symbol = future_to_symbol[future]
                    try:
                        analysis = future.result()
                        if analysis:
                            scan_results['analyzed_pairs'] += 1
                            
                            if analysis['score'] > 2:
                                scan_results['buy_opportunities'].append(analysis)
                            elif analysis['score'] < -5:
                                scan_results['blocked_pairs'].append(analysis)
                            else:
                                scan_results['neutral_pairs'].append(analysis)
                        else:
                            scan_results['errors'].append(symbol)
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                        scan_results['errors'].append(symbol)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            scan_results['buy_opportunities'].sort(key=lambda x: x['score'], reverse=True)
            scan_results['neutral_pairs'].sort(key=lambda x: x['score'], reverse=True)
            
            logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {scan_results['analyzed_pairs']} –ø–∞—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return scan_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
            return None
    
    def format_scan_report(self, scan_results: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            usdt_balance = self.get_usdt_balance()
            
            report = f"üìä <b>–°–ö–ê–ù –†–´–ù–ö–ê #{self.scan_count}</b>\n"
            report += f"‚è∞ {scan_results['timestamp'].strftime('%d.%m.%Y %H:%M:%S')}\n"
            report += f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            report += f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {scan_results['analyzed_pairs']}/{scan_results['total_pairs']}\n"
            report += f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏: {len(scan_results['buy_opportunities'])}\n"
            report += f"‚ö†Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {len(scan_results['neutral_pairs'])}\n"
            report += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {len(scan_results['blocked_pairs'])}\n"
            report += f"‚ùå –û—à–∏–±–∫–∏: {len(scan_results['errors'])}\n\n"
            
            # –õ—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if scan_results['buy_opportunities']:
                report += f"üéØ <b>–õ–£–ß–®–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:</b>\n"
                for i, opp in enumerate(scan_results['buy_opportunities'][:5], 1):
                    report += f"{i}. <b>{opp['symbol']}</b> ${opp['price']:.4f}\n"
                    report += f"   ‚≠ê –°–∫–æ—Ä: {opp['score']} | RSI: {opp['rsi']:.1f}\n"
                    report += f"   üîç {', '.join(opp['reasons'][:3])}\n\n"
            
            # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø-3)
            if scan_results['neutral_pairs']:
                report += f"‚öñÔ∏è <b>–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ï (—Ç–æ–ø-3):</b>\n"
                for i, pair in enumerate(scan_results['neutral_pairs'][:3], 1):
                    report += f"{i}. {pair['symbol']} (—Å–∫–æ—Ä: {pair['score']}, RSI: {pair['rsi']:.1f})\n"
                report += "\n"
            
            # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã (—Ç–æ–ø-3)
            if scan_results['blocked_pairs']:
                report += f"üö´ <b>–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ï (—Ç–æ–ø-3):</b>\n"
                for i, pair in enumerate(scan_results['blocked_pairs'][:3], 1):
                    report += f"{i}. {pair['symbol']} - {pair['filter_result']['reason']}\n"
                report += "\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if usdt_balance >= 10.0:
                if scan_results['buy_opportunities']:
                    report += f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n"
                else:
                    report += f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> –ñ–¥–µ–º –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n"
            else:
                report += f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT (–Ω—É–∂–Ω–æ $10+)\n"
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"
    
    async def scan_cycle(self):
        """–¶–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.scan_count += 1
            self.last_scan_time = datetime.now()
            
            logger.info(f"üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{self.scan_count}...")
            
            # –ù–µ —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å USDT < $6
            try:
                usdt_balance = self.get_usdt_balance()
            except Exception:
                usdt_balance = 0.0
            if usdt_balance < 6.0:
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: USDT=${usdt_balance:.2f} < $6.00")
                return
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            scan_results = self.scan_market()
            
            if scan_results:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = self.format_scan_report(scan_results)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                self.send_telegram_message(report)
                
                # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ö–£–ü–ö–ê
                await self.auto_buy_opportunities(scan_results)
                
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç #{self.scan_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def auto_buy_opportunities(self, scan_results: Dict):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            buy_opportunities = scan_results.get('buy_opportunities', [])
            if not buy_opportunities:
                logger.info("‚ùå –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.get_usdt_balance()
            if usdt_balance < 10.0:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: ${usdt_balance:.2f}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
                insufficient_message = (
                    f"üí∞ <b>–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –î–õ–Ø –ü–û–ö–£–ü–ö–ò</b>\n\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(buy_opportunities)}\n"
                    f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: $10.00\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(insufficient_message)
                return
            
            # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            best_opportunity = buy_opportunities[0]
            symbol = best_opportunity['symbol']
            score = best_opportunity['score']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏ –º–∞–ª–æ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤
            if usdt_balance < 20.0:
                # –ü—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—å—à–µ $20 –∏—Å–ø–æ–ª—å–∑—É–µ–º 60% —Å—Ä–µ–¥—Å—Ç–≤
                purchase_amount = usdt_balance * 0.6
            else:
                # –ü—Ä–∏ –±–æ–ª—å—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞, –º–∞–∫—Å–∏–º—É–º $50
                purchase_amount = min(usdt_balance * 0.3, 50.0)
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É $5
            if purchase_amount < 5.0 and usdt_balance >= 5.0:
                purchase_amount = 5.0
            
            if purchase_amount < 5.0:
                logger.info("‚ùå –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª–æ–π —Å—É–º–º–µ
                small_amount_message = (
                    f"üí∞ <b>–°–£–ú–ú–ê –ü–û–ö–£–ü–ö–ò –°–õ–ò–®–ö–û–ú –ú–ê–õ–ê</b>\n\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(buy_opportunities)}\n"
                    f"üíµ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${purchase_amount:.2f}\n"
                    f"üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: $5.00\n\n"
                    f"üí° <b>–†–ï–®–ï–ù–ò–ï:</b> –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ $10+ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(small_amount_message)
                return
            
            logger.info(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ {symbol} –Ω–∞ ${purchase_amount:.2f}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏
            start_purchase_message = (
                f"üõí <b>–ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ö–£–ü–ö–£</b>\n\n"
                f"üìà <b>{symbol}</b>\n"
                f"üí∞ –°—É–º–º–∞: ${purchase_amount:.2f} USDT\n"
                f"‚≠ê –°–∫–æ—Ä: {score}\n"
                f"üìä RSI: {best_opportunity['rsi']:.1f}\n"
                f"üîç –ü—Ä–∏—á–∏–Ω—ã: {', '.join(best_opportunity['reasons'][:3])}\n\n"
                f"‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É..."
            )
            self.send_telegram_message(start_purchase_message)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            result = await self.execute_purchase(symbol, purchase_amount, best_opportunity)
            
            if result['success']:
                logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol}")
                # –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ execute_purchase
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {result['error']}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = (
                    f"‚ùå <b>–û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò</b>\n\n"
                    f"üìà <b>{symbol}</b>\n"
                    f"üí∞ –°—É–º–º–∞: ${purchase_amount:.2f} USDT\n"
                    f"‚≠ê –°–∫–æ—Ä: {score}\n"
                    f"üìä RSI: {best_opportunity['rsi']:.1f}\n\n"
                    f"üö´ <b>–û–®–ò–ë–ö–ê:</b>\n"
                    f"{result['error']}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(error_message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            critical_error_message = (
                f"üí• <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–í–¢–û–ü–û–ö–£–ü–ö–ò</b>\n\n"
                f"üö´ <b>–û–®–ò–ë–ö–ê:</b>\n"
                f"{str(e)}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            self.send_telegram_message(critical_error_message)
    
    async def execute_purchase(self, symbol: str, usdt_amount: float, opportunity: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
        try:
            logger.info(f"üõí –ü–æ–∫—É–ø–∫–∞ {symbol} –Ω–∞ ${usdt_amount:.2f} USDT...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
            retry_message = (
                f"üîÑ <b>–ü–û–ö–£–ü–ö–ê –° –†–ï–¢–†–ê–Ø–ú–ò</b>\n\n"
                f"üìà <b>{symbol}</b>\n"
                f"üí∞ –°—É–º–º–∞: ${usdt_amount:.2f} USDT\n"
                f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ 1/3..."
            )
            self.send_telegram_message(retry_message)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if not ticker or 'price' not in ticker:
                error_msg = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'
                self.send_telegram_message(f"‚ùå <b>–û–®–ò–ë–ö–ê:</b> {error_msg}")
                return {'success': False, 'error': error_msg}
            
            current_price = float(ticker['price'])
            raw_quantity = usdt_amount / current_price
            
            # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ç—Ä–∞–µ–≤
            rounding_methods = [
                {'name': '–ü—Ä–∞–≤–∏–ª–∞ –±–∏—Ä–∂–∏', 'method': 'rules'},
                {'name': '3 –∑–Ω–∞–∫–∞', 'method': '3_digits'},
                {'name': '4 –∑–Ω–∞–∫–∞', 'method': '4_digits'},
                {'name': '5 –∑–Ω–∞–∫–æ–≤', 'method': '5_digits'},
                {'name': '6 –∑–Ω–∞–∫–æ–≤', 'method': '6_digits'},
                {'name': '2 –∑–Ω–∞–∫–∞', 'method': '2_digits'}
            ]
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            for attempt, method_info in enumerate(rounding_methods, 1):
                try:
                    method_name = method_info['name']
                    method = method_info['method']
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                    if method == 'rules':
                        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–∞–≤–∏–ª–∞ –±–∏—Ä–∂–∏
                        try:
                            from mexc_advanced_api import MexAdvancedAPI
                            advanced_api = MexAdvancedAPI()
                            symbol_rules = advanced_api.get_symbol_rules(symbol)
                            
                            if symbol_rules:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º precision –∏–∑ –ø—Ä–∞–≤–∏–ª
                                quantity_precision = symbol_rules.get('quantityPrecision', 8)
                                step_size = symbol_rules.get('stepSize', 1e-08)
                                min_qty = symbol_rules.get('minQty', 0)
                                
                                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                                quantity = round(raw_quantity, quantity_precision)
                                
                                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –º—ã –º–µ–Ω—å—à–µ –µ–≥–æ
                                if min_qty > 0 and quantity < min_qty:
                                    quantity = min_qty
                                    
                                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —à–∞–≥–∞
                                if step_size > 0:
                                    quantity = round(quantity / step_size) * step_size
                            else:
                                quantity = round(raw_quantity, 3)
                        except:
                            quantity = round(raw_quantity, 3)
                            
                    elif method == '3_digits':
                        quantity = round(raw_quantity, 3)
                    elif method == '4_digits':
                        quantity = round(raw_quantity, 4)
                    elif method == '5_digits':
                        quantity = round(raw_quantity, 5)
                    elif method == '6_digits':
                        quantity = round(raw_quantity, 6)
                    elif method == '2_digits':
                        quantity = round(raw_quantity, 2)
                    
                    if quantity <= 0:
                        continue
                    
                    # –ù–µ —Å–ª–∞—Ç—å –≤ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö; –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª
                    # (—Ä–∞–Ω–µ–µ –∑–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ)
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                    order = self.mex_api.place_order(
                        symbol=symbol,
                        side='BUY',
                        quantity=quantity,
                        price=None  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                    )
                    
                    if 'orderId' in order:
                        # –£—Å–ø–µ—Ö!
                        success_message = (
                            f"‚úÖ <b>–ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê!</b>\n\n"
                            f"üìà <b>{symbol}</b>\n"
                            f"üí∞ –°—É–º–º–∞: ${usdt_amount:.2f} USDT\n"
                            f"üìä –ú–µ—Ç–æ–¥: {method_name}\n"
                            f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n"
                            f"üíµ –¶–µ–Ω–∞: ${current_price:.6f}\n"
                            f"üÜî –û—Ä–¥–µ—Ä: <code>{order['orderId']}</code>\n\n"
                            f"üéØ <b>–ê–ù–ê–õ–ò–ó:</b>\n"
                            f"‚≠ê –°–∫–æ—Ä: {opportunity['score']}\n"
                            f"üìä RSI: {opportunity['rsi']:.1f}\n"
                            f"üîç –ü—Ä–∏—á–∏–Ω—ã: {', '.join(opportunity['reasons'][:3])}\n\n"
                            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                        )
                        self.send_telegram_message(success_message)
                        
                        return {
                            'success': True,
                            'order_id': order['orderId'],
                            'symbol': symbol,
                            'quantity': quantity,
                            'price': current_price,
                            'amount': usdt_amount,
                            'method': method_name,
                            'attempt': attempt
                        }
                    else:
                        # –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, —Ç–æ–ª—å–∫–æ –ª–æ–≥
                        error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}"
                        logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                        
                except Exception as e:
                    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–ø—ã—Ç–∫–µ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, —Ç–æ–ª—å–∫–æ –ª–æ–≥
                    error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ {attempt}: {e}"
                    logger.error(f"‚ùå {error_msg}")
            
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            return {'success': False, 'error': '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã'}
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}"
            logger.error(error_msg)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            critical_message = (
                f"üí• <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò</b>\n\n"
                f"üìà <b>{symbol}</b>\n"
                f"üí∞ –°—É–º–º–∞: ${usdt_amount:.2f} USDT\n\n"
                f"üö´ <b>–û–®–ò–ë–ö–ê:</b>\n"
                f"{str(e)}\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            self.send_telegram_message(critical_message)
            
            return {'success': False, 'error': error_msg}
    
    async def start_scanning(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞...")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.scan_interval} —Å–µ–∫")
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã: {len(self.trading_pairs)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            f"ü§ñ <b>–§–û–ù–û–í–´–ô –°–ö–ê–ù–ï–† –†–´–ù–ö–ê –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.scan_interval} —Å–µ–∫ (5 –º–∏–Ω—É—Ç)\n"
            f"üìä –ü–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(self.trading_pairs)}\n"
            f"üì± –û—Ç—á–µ—Ç—ã –≤ Telegram –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç\n\n"
            f"üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ..."
        )
        self.send_telegram_message(startup_message)
        
        while True:
            try:
                await self.scan_cycle()
                await asyncio.sleep(self.scan_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –°–∫–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    scanner = MarketScanner()
    await scanner.start_scanning()

if __name__ == "__main__":
    asyncio.run(main()) 
 