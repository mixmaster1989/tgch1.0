#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ BTC/ETH
"""

def integrate_btc_eth_balancer():
    # –ß–∏—Ç–∞–µ–º active_50_50_balancer.py
    with open('active_50_50_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç PortfolioBalancer
    import_line = "from portfolio_balancer import PortfolioBalancer\n"
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    lines = content.split('\n')
    insert_index = 0
    for i, line in enumerate(lines):
        if line.startswith('from config import'):
            insert_index = i + 1
            break
    
    lines.insert(insert_index, import_line)
    content = '\n'.join(lines)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –≤ __init__
    init_pattern = '        self.report_counter = 0'
    replacement = '        self.report_counter = 0\n        self.btc_eth_balancer = PortfolioBalancer()'
    content = content.replace(init_pattern, replacement)
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ buy_btceth_with_usdc –¥–ª—è –∑–∞–ø—É—Å–∫–∞ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    old_end_method = '''            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC/ETH: {e}")
            return False'''
    
    new_end_method = '''            # üî• –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            if success_count > 0:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π...")
                try:
                    btc_eth_result = self.btc_eth_balancer.execute_portfolio_rebalance_sync()
                    if btc_eth_result.get('success'):
                        logger.info("‚úÖ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ
                        btc_eth_message = (
                            f"‚öñÔ∏è <b>BTC-ETH –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\\n\\n"
                            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {btc_eth_result.get('message', '–£—Å–ø–µ—à–Ω–æ')}\\n"
                            f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${btc_eth_result.get('total_spent', 0):.2f}\\n"
                            f"üîÑ –û–ø–µ—Ä–∞—Ü–∏–π: {btc_eth_result.get('trades_executed', 0)}\\n\\n"
                            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                        )
                        self.send_telegram_message(btc_eth_message)
                    else:
                        logger.warning(f"‚ö†Ô∏è BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {btc_eth_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC/ETH: {e}")
            return False'''
    
    content = content.replace(old_end_method, new_end_method)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('active_50_50_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ active_50_50_balancer.py –æ–±–Ω–æ–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º")

if __name__ == "__main__":
    integrate_btc_eth_balancer()
