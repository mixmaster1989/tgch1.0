#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ market_scanner.py - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
"""

def modify_market_scanner():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('market_scanner.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
    import_line = "from active_50_50_balancer import Active5050Balancer\n"
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    lines = content.split('\n')
    insert_index = 0
    for i, line in enumerate(lines):
        if line.startswith('from config import'):
            insert_index = i + 1
            break
    
    lines.insert(insert_index, import_line)
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞—Å—Å MarketScanner
    modified_content = '\n'.join(lines)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –≤ __init__
    init_pattern = '        self.anti_hype_filter = AntiHypeFilter()'
    replacement = '        self.anti_hype_filter = AntiHypeFilter()\n        self.balancer = Active5050Balancer()'
    modified_content = modified_content.replace(init_pattern, replacement)
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é auto_buy_opportunities
    old_auto_buy = '''    async def auto_buy_opportunities(self, scan_results: Dict):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            buy_opportunities = scan_results.get('buy_opportunities', [])
            if not buy_opportunities:
                logger.info("‚ùå –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.get_usdt_balance()
            if usdt_balance < 6.0:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: ${usdt_balance:.2f}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
                insufficient_message = (
                    f"üí∞ <b>–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –î–õ–Ø –ü–û–ö–£–ü–ö–ò</b>\\n\\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(buy_opportunities)}\\n"
                    f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}\\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: $6.00\\n\\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(insufficient_message)
                return'''
    
    new_auto_buy = '''    async def auto_buy_opportunities(self, scan_results: Dict):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            buy_opportunities = scan_results.get('buy_opportunities', [])
            if not buy_opportunities:
                logger.info("‚ùå –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.get_usdt_balance()
            if usdt_balance < 6.0:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: ${usdt_balance:.2f}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
                insufficient_message = (
                    f"üí∞ <b>–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –î–õ–Ø –ü–û–ö–£–ü–ö–ò</b>\\n\\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(buy_opportunities)}\\n"
                    f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}\\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: $6.00\\n\\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(insufficient_message)
                return
            
            # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            best_opportunity = buy_opportunities[0]
            symbol = best_opportunity['symbol']
            score = best_opportunity['score']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ USDT —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –Ω–∞ –º–∏–Ω–∏–º—É–º
            purchase_amount = usdt_balance * (PURCHASE_PCT_OF_USDT / 100.0)
            if usdt_balance >= PURCHASE_MIN_USDT:
                purchase_amount = max(PURCHASE_MIN_USDT, purchase_amount)
            purchase_amount = min(purchase_amount, PURCHASE_MAX_USDT)
            
            if purchase_amount < PURCHASE_MIN_USDT:
                logger.info("‚ùå –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª–æ–π —Å—É–º–º–µ
                small_amount_message = (
                    f"üí∞ <b>–°–£–ú–ú–ê –ü–û–ö–£–ü–ö–ò –°–õ–ò–®–ö–û–ú –ú–ê–õ–ê</b>\\n\\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(buy_opportunities)}\\n"
                    f"ÔøΩÔøΩ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞: ${purchase_amount:.2f}\\n"
                    f"üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${usdt_balance:.2f}\\n"
                    f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${PURCHASE_MIN_USDT:.2f}\\n\\n"
                    f"üí° <b>–†–ï–®–ï–ù–ò–ï:</b> –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ $6+ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫\\n\\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(small_amount_message)
                return
            
            # üî• –ù–û–í–û–ï: –ü–†–û–í–ï–†–Ø–ï–ú –†–ê–ó–†–ï–®–ï–ù–ò–ï –£ –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê
            logger.info(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol}...")
            permission = self.balancer.check_purchase_permission(purchase_amount, "ALTS")
            
            if not permission['allowed']:
                logger.warning(f"üö´ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–∫—É–ø–∫—É: {permission['reason']}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                blocked_message = (
                    f"üö´ <b>–ü–û–ö–£–ü–ö–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–û–ú</b>\\n\\n"
                    f"üìà <b>{symbol}</b>\\n"
                    f"üí∞ –°—É–º–º–∞: ${purchase_amount:.2f} USDT\\n"
                    f"‚≠ê –°–∫–æ—Ä: {score}\\n\\n"
                    f"‚öñÔ∏è <b>–ü–†–ò–ß–ò–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ò:</b>\\n"
                    f"{permission['reason']}\\n\\n"
                    f"üìä <b>–¢–ï–ö–£–©–ò–ï –ü–†–û–ü–û–†–¶–ò–ò:</b>\\n"
                    f"–ê–ª—å—Ç—ã: {permission['current_alts_ratio']*100:.1f}%\\n"
                    f"BTC/ETH: {permission['current_btceth_ratio']*100:.1f}%\\n\\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(blocked_message)
                return
            
            logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–∑—Ä–µ—à–∏–ª –ø–æ–∫—É–ø–∫—É: {permission['reason']}")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    modified_content = modified_content.replace(old_auto_buy, new_auto_buy)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('market_scanner.py', 'w', encoding='utf-8') as f:
        f.write(modified_content)
    
    print("‚úÖ market_scanner.py –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞")

if __name__ == "__main__":
    modify_market_scanner()
