#!/usr/bin/env python3
"""
–ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ BTC/ETH
–ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π, –Ω–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –ø–∏–∫–∞—Ö
"""

import numpy as np
from typing import Dict, List, Optional
from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
import logging

logger = logging.getLogger(__name__)

class RebalancerAntiHypeFilter:
    def __init__(self):
        self.mex_api = MexAPI()
        self.tech_indicators = TechnicalIndicators()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ò–ï –î–õ–Ø –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò
        self.atr_impulse_multiplier = 3.0  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π - 3√óATR –≤–º–µ—Å—Ç–æ 2√ó
        self.atr_dca_multiplier = 1.5      # –î–ª—è DCA –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏
        self.rsi_overbought = 70           # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π - 70 –≤–º–µ—Å—Ç–æ 60
        self.rsi_oversold = 35             # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π - 35 –≤–º–µ—Å—Ç–æ 40
        self.rsi_neutral = 55              # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π - 55 –≤–º–µ—Å—Ç–æ 50
        self.ema_deviation = 0.03          # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π - 3% –≤–º–µ—Å—Ç–æ 2%
        
        # –ú–ï–ù–ï–ï –°–¢–†–û–ì–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–û–¢–ò–í –•–ê–ô–ü–û–í
        self.max_historical_deviation = 0.02  # 2% –æ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ = –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–≤–º–µ—Å—Ç–æ 5%)
        self.recent_high_threshold = 0.01     # 1% –æ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ = –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (–≤–º–µ—Å—Ç–æ 3%)
        self.volume_hype_threshold = 3.0      # –û–±—ä–µ–º –≤ 3 —Ä–∞–∑–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ = —Ö–∞–π–ø (–≤–º–µ—Å—Ç–æ 2√ó)
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    def _get_klines_cached(self, symbol: str, interval: str, limit: int = 100) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{interval}_{limit}"
        
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        klines = self.mex_api.get_klines(symbol, interval, limit)
        self.cache[cache_key] = klines
        return klines
    
    def _calculate_atr(self, klines: List, period: int = 14) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR (Average True Range)"""
        if len(klines) < period + 1:
            return 0.0
        
        try:
            highs = [float(k[2]) for k in klines[-period-1:]]
            lows = [float(k[3]) for k in klines[-period-1:]]
            closes = [float(k[4]) for k in klines[-period-1:]]
            
            true_ranges = []
            for i in range(1, len(highs)):
                tr1 = highs[i] - lows[i]
                tr2 = abs(highs[i] - closes[i-1])
                tr3 = abs(lows[i] - closes[i-1])
                true_ranges.append(max(tr1, tr2, tr3))
            
            return sum(true_ranges) / len(true_ranges) if true_ranges else 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return 0.0
    
    def _calculate_rsi(self, klines: List, period: int = 14) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI"""
        if len(klines) < period + 1:
            return 50.0
        
        try:
            closes = [float(k[4]) for k in klines[-period-1:]]
            
            gains = []
            losses = []
            
            for i in range(1, len(closes)):
                change = closes[i] - closes[i-1]
                if change > 0:
                    gains.append(change)
                    losses.append(0)
                else:
                    gains.append(0)
                    losses.append(abs(change))
            
            avg_gain = sum(gains) / len(gains) if gains else 0
            avg_loss = sum(losses) / len(losses) if losses else 0
            
            if avg_loss == 0:
                return 100.0
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            return 50.0
    
    def _calculate_ema(self, klines: List, period: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å EMA"""
        if len(klines) < period:
            return 0.0
        
        try:
            closes = [float(k[4]) for k in klines[-period:]]
            multiplier = 2 / (period + 1)
            
            ema = closes[0]
            for close in closes[1:]:
                ema = (close * multiplier) + (ema * (1 - multiplier))
            
            return ema
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
            return 0.0
    
    def _get_historical_max(self, klines: List, days: int = 30) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å–∏–º—É–º –∑–∞ N –¥–Ω–µ–π"""
        try:
            if len(klines) < days:
                return 0.0
            
            highs = [float(k[2]) for k in klines[-days:]]
            return max(highs) if highs else 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞: {e}")
            return 0.0
    
    def _get_recent_high(self, klines: List, hours: int = 24) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–π –º–∞–∫—Å–∏–º—É–º –∑–∞ N —á–∞—Å–æ–≤"""
        try:
            if len(klines) < hours:
                return 0.0
            
            highs = [float(k[2]) for k in klines[-hours:]]
            return max(highs) if highs else 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞: {e}")
            return 0.0
    
    def _check_volume_hype(self, klines: List, period: int = 20) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö–∞–π–ø –ø–æ –æ–±—ä–µ–º—É"""
        try:
            if len(klines) < period:
                return False
            
            volumes = [float(k[5]) for k in klines[-period:]]
            current_volume = volumes[-1]
            avg_volume = sum(volumes[:-1]) / len(volumes[:-1])
            
            return current_volume > avg_volume * self.volume_hype_threshold
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä–µ–º–∞: {e}")
            return False
    
    def check_buy_permission(self, symbol: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            klines_1h = self._get_klines_cached(symbol, '1h', 100)
            klines_4h = self._get_klines_cached(symbol, '4h', 100)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 4h
            
            if not klines_1h or not klines_4h:
                return {'allowed': True, 'multiplier': 1.0, 'reason': 'no_data_fallback'}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            current_price = float(klines_1h[-1][4])
            atr_4h = self._calculate_atr(klines_4h, 14)
            rsi_1h = self._calculate_rsi(klines_1h, 14)
            ema20_1h = self._calculate_ema(klines_1h, 20)
            ema200_4h = self._calculate_ema(klines_4h, 200)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 4 —á–∞—Å–∞
            price_4h_ago = float(klines_4h[-2][4]) if len(klines_4h) > 1 else current_price
            price_change_4h = ((current_price - price_4h_ago) / price_4h_ago) * 100
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–∞–∫—Å–∏–º—É–º—ã
            historical_max = self._get_historical_max(klines_1h, 30)
            recent_high = self._get_recent_high(klines_1h, 24)
            volume_hype = self._check_volume_hype(klines_1h, 20)
            
            logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: —Ü–µ–Ω–∞=${current_price:.4f}, ATR={atr_4h:.4f}, RSI={rsi_1h:.1f}")
            logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ 4—á={price_change_4h:.2f}%, EMA20=${ema20_1h:.4f}")
            logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞–∫—Å=${historical_max:.4f}, –Ω–µ–¥–∞–≤–Ω–∏–π –º–∞–∫—Å=${recent_high:.4f}")
            logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –æ–±—ä–µ–º —Ö–∞–π–ø={'–î–ê' if volume_hype else '–ù–ï–¢'}")
            
            # 0. –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ì–û –ú–ê–ö–°–ò–ú–£–ú–ê (–ë–õ–û–ö–ò–†–û–í–ö–ê) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø
            if historical_max > 0 and current_price > historical_max * (1 - self.max_historical_deviation):
                logger.warning(f"üö´ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ë–õ–ò–ó–ö–û –ö –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ú–£ –ú–ê–ö–°–ò–ú–£–ú–£! –¶–µ–Ω–∞ ${current_price:.4f} vs –º–∞–∫—Å ${historical_max:.4f}")
                return {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'rebalancer_historical_max_block_{current_price:.0f}vs{historical_max:.0f}'
                }
            
            # 1. –ü–†–û–í–ï–†–ö–ê –ù–ï–î–ê–í–ù–ï–ì–û –ú–ê–ö–°–ò–ú–£–ú–ê (–û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–û–ï
            if recent_high > 0 and current_price > recent_high * (1 - self.recent_high_threshold):
                logger.warning(f"‚ö†Ô∏è –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ë–õ–ò–ó–ö–û –ö –ù–ï–î–ê–í–ù–ï–ú–£ –ú–ê–ö–°–ò–ú–£–ú–£! –¶–µ–Ω–∞ ${current_price:.4f} vs –Ω–µ–¥–∞–≤–Ω–∏–π ${recent_high:.4f}")
                return {
                    'allowed': True, 
                    'multiplier': 0.5,  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                    'reason': f'rebalancer_recent_high_limit_{current_price:.0f}vs{recent_high:.0f}'
                }
            
            # 2. –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ú–ê –•–ê–ô–ü–ê (–ë–õ–û–ö–ò–†–û–í–ö–ê) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø
            if volume_hype:
                logger.warning(f"üö´ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –•–ê–ô–ü –ü–û –û–ë–™–ï–ú–£! –û–±—ä–µ–º –≤ {self.volume_hype_threshold}x –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ")
                return {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'rebalancer_volume_hype_block_{self.volume_hype_threshold}x'
                }
            
            # 3. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–£–õ–¨–°–ê –í–í–ï–†–• (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø
            atr_threshold = (atr_4h / current_price) * 100 * self.atr_impulse_multiplier
            if price_change_4h > atr_threshold:
                logger.warning(f"üö´ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ò–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö {price_change_4h:.2f}% > {atr_threshold:.2f}% (3√óATR)")
                return {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'rebalancer_hype_block_impulse_{price_change_4h:.1f}%'
                }
            
            # 4. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–ò (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø
            if rsi_1h > self.rsi_overbought and current_price > ema20_1h * (1 + self.ema_deviation):
                logger.warning(f"üö´ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å RSI={rsi_1h:.1f} –∏ —Ü–µ–Ω–∞ –≤—ã—à–µ EMA20+3%")
                return {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'rebalancer_hype_block_overbought_RSI{rsi_1h:.0f}'
                }
            
            # 5. –ü–†–û–í–ï–†–ö–ê –ú–ï–î–í–ï–ñ–¨–ï–ì–û –¢–†–ï–ù–î–ê (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ê–Ø
            if current_price < ema200_4h * 0.95:  # –î–æ–ø—É—Å–∫–∞–µ–º 5% –Ω–∏–∂–µ EMA200
                logger.warning(f"üö´ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –¶–µ–Ω–∞ —Å–∏–ª—å–Ω–æ –Ω–∏–∂–µ EMA200 (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)")
                return {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': 'rebalancer_bear_trend_below_ema200'
                }
            
            # 6. –ü–†–û–í–ï–†–ö–ê DCA –ù–ê –ü–ê–î–ï–ù–ò–ò (—É—Å–∏–ª–µ–Ω–∏–µ) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–û–ï
            atr_dca_threshold = (atr_4h / current_price) * 100 * self.atr_dca_multiplier
            if price_change_4h < -atr_dca_threshold and rsi_1h < self.rsi_oversold:
                logger.info(f"üöÄ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: DCA —É—Å–∏–ª–µ–Ω–∏–µ! –ü–∞–¥–µ–Ω–∏–µ {price_change_4h:.2f}% –∏ RSI={rsi_1h:.1f}")
                return {
                    'allowed': True, 
                    'multiplier': 1.5, 
                    'reason': f'rebalancer_dca_boost_fall_{abs(price_change_4h):.1f}%'
                }
            
            # 7. –ë–ê–ó–û–í–´–ï –ü–û–ö–£–ü–ö–ò (–Ω–æ—Ä–º–∞) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–ò–ï
            if rsi_1h < self.rsi_neutral:
                logger.info(f"‚úÖ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, RSI={rsi_1h:.1f}")
                return {
                    'allowed': True, 
                    'multiplier': 1.0, 
                    'reason': f'rebalancer_normal_buy_RSI{rsi_1h:.0f}'
                }
            
            # 8. –ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ó–û–ù–ê (—É–º–µ—Ä–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ) - –ú–ï–ù–ï–ï –°–¢–†–û–ì–û–ï
            logger.info(f"‚ö†Ô∏è –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê {symbol}: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞, RSI={rsi_1h:.1f}")
            return {
                'allowed': True, 
                'multiplier': 0.7,  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                'reason': f'rebalancer_neutral_zone_RSI{rsi_1h:.0f}'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è {symbol}: {e}")
            return {'allowed': True, 'multiplier': 1.0, 'reason': 'rebalancer_error_fallback'}
    
    def get_filter_status(self, symbols: List[str]) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        results = {}
        for symbol in symbols:
            results[symbol] = self.check_buy_permission(symbol)
        return results

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    filter = RebalancerAntiHypeFilter()
    
    test_symbols = ['BTCUSDC', 'ETHUSDC']
    for symbol in test_symbols:
        result = filter.check_buy_permission(symbol)
        print(f"{symbol}: {result}") 