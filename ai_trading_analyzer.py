#!/usr/bin/env python3
"""
AI Trading Analyzer - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 3 —ç–∫—Å–ø–µ—Ä—Ç–∞ (OpenAI, Anthropic, Google) + —Å—É–¥—å—è (Claude Opus)

üîß –†–ï–ñ–ò–ú –ó–ê–ì–õ–£–®–ï–ö:
- self.STUBS_MODE = True  -> –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∏ (—ç–∫–æ–Ω–æ–º–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤)
- self.STUBS_MODE = False -> –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–∫–∏

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–∫:
1. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã OpenRouter
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å self.STUBS_MODE = False
3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É

–ó–∞–≥–ª—É—à–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from openrouter_manager import OpenRouterManager
from perplexity_analyzer import PerplexityAnalyzer
from comprehensive_data_manager import ComprehensiveDataManager

class AITradingAnalyzer:
    """AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    
    def __init__(self):
        self.openrouter = OpenRouterManager()
        self.perplexity = PerplexityAnalyzer()
        self.data_manager = ComprehensiveDataManager()
        
        # –ú–æ–¥–µ–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        self.expert_models = {
            "openai": "openai/gpt-4o-mini",
            "anthropic": "anthropic/claude-3.5-haiku", 
            "google": "google/gemini-2.5-flash-lite"
        }
        
        # –ú–æ–¥–µ–ª—å —Å—É–¥—å–∏
        self.judge_model = "anthropic/claude-opus-4"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.min_confidence = 0.7
        self.max_risk_per_trade = 5.0  # $5
        self.stop_loss_percent = 2.0
        self.take_profit_percent = 4.0
        
        # üîß –†–ï–ñ–ò–ú –ó–ê–ì–õ–£–®–ï–ö (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤)
        self.STUBS_MODE = True  # True = –∑–∞–≥–ª—É—à–∫–∏, False = —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω–∫–∏
    
    def prepare_data_for_analysis(self, market_data: Dict, perplexity_data: Dict) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ market_data (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
            if hasattr(market_data, 'symbol'):
                symbol = market_data.symbol
            elif isinstance(market_data, dict):
                symbol = market_data.get("symbol", "UNKNOWN")
            else:
                symbol = "UNKNOWN"
                
            return {
                "symbol": symbol,
                "market_data": market_data,
                "perplexity_data": perplexity_data,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _create_expert_prompt(self, data: Dict, expert_name: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        symbol = data["symbol"]
        market_data = data["market_data"]
        perplexity_data = data["perplexity_data"]
        
        prompt = f"""
        –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏ –ø—Ä–∏–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
        
        –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
        - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${getattr(market_data, 'price', 'N/A')}
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {getattr(market_data, 'change_24h', 'N/A')}%
        - –û–±—ä–µ–º 24—á: ${getattr(market_data, 'volume_24h', 'N/A'):,.0f}
        - RSI: {getattr(market_data, 'rsi', 'N/A')}
        - MACD: {getattr(market_data, 'macd', 'N/A')}
        - –¢—Ä–µ–Ω–¥: {getattr(market_data, 'trend', 'N/A')}
        
        –ù–û–í–û–°–¢–ù–û–ô –ê–ù–ê–õ–ò–ó (Perplexity):
        - –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {perplexity_data.get('overall_sentiment', 'N/A')}
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {perplexity_data.get('overall_confidence', 'N/A')}
        - Impact Score: {perplexity_data.get('impact_score', 'N/A')}
        
        –î–ï–¢–ê–õ–ò –ù–û–í–û–°–¢–ï–ô:
        {json.dumps(perplexity_data.get('news_analysis', {}), indent=2, ensure_ascii=False)}
        
        –ù–ê–°–¢–†–û–ï–ù–ò–Ø –†–´–ù–ö–ê:
        {json.dumps(perplexity_data.get('sentiment_analysis', {}), indent=2, ensure_ascii=False)}
        
        –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
        {json.dumps(perplexity_data.get('technical_analysis', {}), indent=2, ensure_ascii=False)}
        
        –ü–ê–†–ê–ú–ï–¢–†–´ –¢–û–†–ì–û–í–õ–ò:
        - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –∑–∞ —Å–¥–µ–ª–∫—É: ${self.max_risk_per_trade}
        - –°—Ç–æ–ø-–ª–æ—Å—Å: {self.stop_loss_percent}%
        - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.take_profit_percent}%
        
        –í–µ—Ä–Ω–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "decision": "BUY/SELL/HOLD",
            "confidence": 0.0-1.0,
            "reason": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            "risk_level": "LOW/MEDIUM/HIGH",
            "order": {{
                "type": "LIMIT",
                "side": "BUY/SELL",
                "quantity": 0.0,
                "price": 0.0,
                "stop_loss": 0.0,
                "take_profit": 0.0
            }},
            "expert": "{expert_name}"
        }}
        
        –£—á—Ç–∏ –≤—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã, –Ω–æ–≤–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Ä–∏—Å–∫–∏.
        """
        
        return prompt
    
    async def _get_expert_decision(self, data: Dict, expert_name: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞"""
        try:
            prompt = self._create_expert_prompt(data, expert_name)
            model = self.expert_models[expert_name]
            
            # üîß –†–ï–ñ–ò–ú –ó–ê–ì–õ–£–®–ï–ö
            if self.STUBS_MODE:
                print(f"üîß –ó–ê–ì–õ–£–®–ö–ê: {expert_name} —ç–∫—Å–ø–µ—Ä—Ç (—Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤)")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
                if expert_name == "openai":
                    return {
                        "decision": "BUY",
                        "confidence": 0.75,
                        "reason": f"[–ó–ê–ì–õ–£–®–ö–ê] OpenAI GPT-4o-mini: –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞. RSI –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—É—é –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å, –Ω–æ MACD –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π.",
                        "risk_level": "MEDIUM",
                        "order": {
                            "type": "LIMIT",
                            "side": "BUY",
                            "quantity": 0.001,
                            "price": 3908.28,
                            "stop_loss": 3830.11,
                            "take_profit": 4064.61
                        },
                        "expert": expert_name
                    }
                elif expert_name == "anthropic":
                    return {
                        "decision": "HOLD",
                        "confidence": 0.60,
                        "reason": f"[–ó–ê–ì–õ–£–®–ö–ê] Anthropic Claude 3.5 Haiku: –†—ã–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–º–µ—à–∞–Ω–Ω—ã–µ, –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω —É–º–µ—Ä–µ–Ω–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∂–∏–¥–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.",
                        "risk_level": "LOW",
                        "order": None,
                        "expert": expert_name
                    }
                elif expert_name == "google":
                    return {
                        "decision": "SELL",
                        "confidence": 0.65,
                        "reason": f"[–ó–ê–ì–õ–£–®–ö–ê] Google Gemini 2.5 Flash Lite: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç. RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏, –æ–±—ä–µ–º—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏.",
                        "risk_level": "MEDIUM",
                        "order": {
                            "type": "LIMIT",
                            "side": "SELL",
                            "quantity": 0.001,
                            "price": 3908.28,
                            "stop_loss": 3986.45,
                            "take_profit": 3751.95
                        },
                        "expert": expert_name
                    }
                else:
                    return {
                        "decision": "HOLD",
                        "confidence": 0.0,
                        "reason": f"[–ó–ê–ì–õ–£–®–ö–ê] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç {expert_name}",
                        "risk_level": "HIGH",
                        "order": None,
                        "expert": expert_name
                    }
            
            # üîß –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú (–µ—Å–ª–∏ STUBS_MODE = False)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º silver keys –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            result = self.openrouter.request_with_silver_keys(prompt, model)
            
            if result['success']:
                content = result['response']
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                try:
                    if '{' in content and '}' in content:
                        json_start = content.find('{')
                        json_end = content.rfind('}') + 1
                        json_str = content[json_start:json_end]
                        decision = json.loads(json_str)
                        decision['expert'] = expert_name
                        return decision
                    else:
                        return {
                            "decision": "HOLD",
                            "confidence": 0.0,
                            "reason": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {expert_name}",
                            "risk_level": "HIGH",
                            "order": None,
                            "expert": expert_name
                        }
                except json.JSONDecodeError:
                    return {
                        "decision": "HOLD",
                        "confidence": 0.0,
                        "reason": f"–û—à–∏–±–∫–∞ JSON –æ—Ç {expert_name}: {content[:100]}",
                        "risk_level": "HIGH",
                        "order": None,
                        "expert": expert_name
                    }
            else:
                return {
                    "decision": "HOLD",
                    "confidence": 0.0,
                    "reason": f"–û—à–∏–±–∫–∞ API –æ—Ç {expert_name}: {result['response']}",
                    "risk_level": "HIGH",
                    "order": None,
                    "expert": expert_name
                }
                
        except Exception as e:
            return {
                "decision": "HOLD",
                "confidence": 0.0,
                "reason": f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–∞ {expert_name}: {str(e)}",
                "risk_level": "HIGH",
                "order": None,
                "expert": expert_name
            }
    
    def _create_judge_prompt(self, data: Dict, expert_decisions: List[Dict]) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–¥—å–∏"""
        symbol = data["symbol"]
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON
        safe_data = {
            "symbol": data["symbol"],
            "timestamp": data["timestamp"],
            "perplexity_data": data["perplexity_data"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        market_data = data["market_data"]
        if hasattr(market_data, '__dict__'):
            safe_data["market_data"] = {
                "symbol": market_data.symbol,
                "price": market_data.price,
                "change_24h": market_data.change_24h,
                "volume_24h": market_data.volume_24h,
                "high_24h": market_data.high_24h,
                "low_24h": market_data.low_24h,
                "timestamp": market_data.timestamp.isoformat(),
                "source": market_data.source.value
            }
        else:
            safe_data["market_data"] = market_data
        
        prompt = f"""
        –¢—ã –≥–ª–∞–≤–Ω—ã–π —Å—É–¥—å—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {symbol} –∏ —Ä–µ—à–µ–Ω–∏—è –æ—Ç 3 —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
        
        –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
        {json.dumps(safe_data, indent=2, ensure_ascii=False)}
        
        –†–ï–®–ï–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–û–í:
        {json.dumps(expert_decisions, indent=2, ensure_ascii=False)}
        
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω—è—Ç—å –§–ò–ù–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ.
        
        –ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:
        1. –ö–∞—á–µ—Å—Ç–≤–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        3. –£—á–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        5. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
        
        –í–µ—Ä–Ω–∏ –§–ò–ù–ê–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "final_decision": "BUY/SELL/HOLD",
            "confidence": 0.0-1.0,
            "reason": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è",
            "expert_analysis": {{
                "best_expert": "–∏–º—è –ª—É—á—à–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞",
                "expert_agreement": "—Å–æ–≥–ª–∞—Å–Ω—ã –ª–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã",
                "risk_assessment": "–æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"
            }},
            "order": {{
                "type": "LIMIT",
                "side": "BUY/SELL",
                "quantity": 0.0,
                "price": 0.0,
                "stop_loss": 0.0,
                "take_profit": 0.0
            }},
            "judge": "Claude Opus 4"
        }}
        
        –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω –∏ –ø—Ä–∏–Ω–∏–º–∞–π —Ä–µ—à–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
        """
        
        return prompt
    
    async def _get_judge_decision(self, data: Dict, expert_decisions: List[Dict]) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç —Å—É–¥—å–∏"""
        try:
            prompt = self._create_judge_prompt(data, expert_decisions)
            
            # üîß –†–ï–ñ–ò–ú –ó–ê–ì–õ–£–®–ï–ö
            if self.STUBS_MODE:
                print(f"üîß –ó–ê–ì–õ–£–®–ö–ê: –°—É–¥—å—è Claude Opus 4 (—Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤)")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏
                buy_votes = sum(1 for d in expert_decisions if d.get('decision') == 'BUY')
                sell_votes = sum(1 for d in expert_decisions if d.get('decision') == 'SELL')
                hold_votes = sum(1 for d in expert_decisions if d.get('decision') == 'HOLD')
                
                avg_confidence = sum(d.get('confidence', 0) for d in expert_decisions) / len(expert_decisions)
                
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                if buy_votes > sell_votes and buy_votes > hold_votes:
                    final_decision = "BUY"
                    confidence = min(0.85, avg_confidence + 0.1)
                    reason = f"[–ó–ê–ì–õ–£–®–ö–ê] –°—É–¥—å—è: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ({buy_votes}/{len(expert_decisions)}) —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø–æ–∫—É–ø–∫—É. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥."
                elif sell_votes > buy_votes and sell_votes > hold_votes:
                    final_decision = "SELL"
                    confidence = min(0.85, avg_confidence + 0.1)
                    reason = f"[–ó–ê–ì–õ–£–®–ö–ê] –°—É–¥—å—è: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ({sell_votes}/{len(expert_decisions)}) —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –ø—Ä–æ–¥–∞–∂—É. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}. –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –º–µ–¥–≤–µ–∂—å–∏ —Å–∏–≥–Ω–∞–ª—ã."
                else:
                    final_decision = "HOLD"
                    confidence = min(0.75, avg_confidence + 0.05)
                    reason = f"[–ó–ê–ì–õ–£–®–ö–ê] –°—É–¥—å—è: –ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å—Ä–µ–¥–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (BUY:{buy_votes}, SELL:{sell_votes}, HOLD:{hold_votes}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–∂–∏–¥–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."
                
                return {
                    "final_decision": final_decision,
                    "confidence": confidence,
                    "reason": reason,
                    "expert_analysis": {
                        "best_expert": "google" if any(d.get('expert') == 'google' for d in expert_decisions) else "openai",
                        "expert_agreement": f"BUY:{buy_votes}, SELL:{sell_votes}, HOLD:{hold_votes}",
                        "risk_assessment": "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —á–µ—Ç–∫–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"
                    },
                    "order": None,  # –°—É–¥—å—è –Ω–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é
                    "judge": "Claude Opus 4"
                }
            
            # üîß –†–ï–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú (–µ—Å–ª–∏ STUBS_MODE = False)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º golden key –¥–ª—è —Å—É–¥—å–∏
            result = self.openrouter.request_with_golden_key(prompt, self.judge_model)
            
            if result['success']:
                content = result['response']
                
                try:
                    if '{' in content and '}' in content:
                        json_start = content.find('{')
                        json_end = content.rfind('}') + 1
                        json_str = content[json_start:json_end]
                        decision = json.loads(json_str)
                        decision['judge'] = "Claude Opus 4"
                        return decision
                    else:
                        return {
                            "final_decision": "HOLD",
                            "confidence": 0.0,
                            "reason": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å—É–¥—å–∏",
                            "expert_analysis": {},
                            "order": None,
                            "judge": "Claude Opus 4"
                        }
                except json.JSONDecodeError:
                    return {
                        "final_decision": "HOLD",
                        "confidence": 0.0,
                        "reason": f"–û—à–∏–±–∫–∞ JSON —Å—É–¥—å–∏: {content[:100]}",
                        "expert_analysis": {},
                        "order": None,
                        "judge": "Claude Opus 4"
                    }
            else:
                return {
                    "final_decision": "HOLD",
                    "confidence": 0.0,
                    "reason": f"–û—à–∏–±–∫–∞ API —Å—É–¥—å–∏: {result['response']}",
                    "expert_analysis": {},
                    "order": None,
                    "judge": "Claude Opus 4"
                }
                
        except Exception as e:
            return {
                "final_decision": "HOLD",
                "confidence": 0.0,
                "reason": f"–û—à–∏–±–∫–∞ —Å—É–¥—å–∏: {str(e)}",
                "expert_analysis": {},
                "order": None,
                "judge": "Claude Opus 4"
            }
    
    async def analyze_and_decide(self, market_data: Dict, perplexity_data: Dict) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ market_data (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
            if hasattr(market_data, 'symbol'):
                symbol = market_data.symbol
            elif isinstance(market_data, dict):
                symbol = market_data.get("symbol", "UNKNOWN")
            else:
                symbol = "UNKNOWN"
            print(f"ü§ñ –ê–Ω–∞–ª–∏–∑ {symbol} - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
            data = self.prepare_data_for_analysis(market_data, perplexity_data)
            if not data:
                return {
                    "symbol": symbol,
                    "final_decision": "HOLD",
                    "confidence": 0.0,
                    "reason": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                    "timestamp": datetime.now().isoformat()
                }
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –æ—Ç 3 —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            expert_tasks = [
                self._get_expert_decision(data, "openai"),
                self._get_expert_decision(data, "anthropic"),
                self._get_expert_decision(data, "google")
            ]
            
            expert_decisions = await asyncio.gather(*expert_tasks)
            
            print(f"üë®‚Äçüíº –†–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:")
            for decision in expert_decisions:
                print(f"   {decision['expert']}: {decision['decision']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision['confidence']:.2f})")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Ç —Å—É–¥—å–∏
            print(f"‚öñÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏...")
            final_decision = await self._get_judge_decision(data, expert_decisions)
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MarketData –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            market_data_dict = {}
            if hasattr(data["market_data"], '__dict__'):
                market_data_dict = data["market_data"].__dict__.copy()
                # –£–±–∏—Ä–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
                if 'timestamp' in market_data_dict:
                    market_data_dict['timestamp'] = market_data_dict['timestamp'].isoformat()
                if 'source' in market_data_dict:
                    market_data_dict['source'] = market_data_dict['source'].value
            else:
                market_data_dict = data["market_data"]
                
            result = {
                "symbol": symbol,
                "timestamp": datetime.now().isoformat(),
                "input_data": {
                    "market_data": market_data_dict,
                    "perplexity_data": data["perplexity_data"]
                },
                "expert_analysis": {
                    "prompts": {
                        "openai": self._create_expert_prompt(data, "openai"),
                        "anthropic": self._create_expert_prompt(data, "anthropic"),
                        "google": self._create_expert_prompt(data, "google")
                    },
                    "responses": expert_decisions
                },
                "judge_analysis": {
                    "prompt": self._create_judge_prompt(data, expert_decisions),
                    "response": final_decision
                },
                "final_result": {
                    "decision": final_decision.get("final_decision"),
                    "confidence": final_decision.get("confidence", 0),
                    "should_trade": final_decision.get("confidence", 0) >= self.min_confidence
                }
            }
            
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {final_decision.get('final_decision')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision.get('confidence', 0):.2f})")
            
            return result
            
        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –æ—à–∏–±–∫–∏
            error_symbol = "UNKNOWN"
            if hasattr(market_data, 'symbol'):
                error_symbol = market_data.symbol
            elif isinstance(market_data, dict):
                error_symbol = market_data.get("symbol", "UNKNOWN")
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {error_symbol}: {e}")
            return {
                "symbol": error_symbol,
                "final_decision": "HOLD",
                "confidence": 0.0,
                "reason": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
ai_trading_analyzer = AITradingAnalyzer()
