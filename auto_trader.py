#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç MEXCAITRADE
–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ + DeepSeek + –ê–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª—è
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from decimal import Decimal
import json

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from comprehensive_data_manager import ComprehensiveDataManager
# from perplexity_analyzer import PerplexityAnalyzer  # –£–±—Ä–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
from correlation_analyzer import CorrelationAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutoTrader:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç"""
    
    def __init__(self):
        self.data_manager = ComprehensiveDataManager()
        # self.perplexity = PerplexityAnalyzer()  # –£–±—Ä–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        self.rest_api = MexAPI()
        self.technical_indicators = TechnicalIndicators()
        self.correlation_analyzer = CorrelationAnalyzer()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.symbol = "ETHUSDT"
        self.min_profit_percent = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç 0.5%
        self.commission = 0.001  # –ö–æ–º–∏—Å—Å–∏—è 0.1%
        self.min_lot_size = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç ETH
        self.max_investment = 0.001  # –¢–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç!
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.active_orders = {}
        self.trade_history = []
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            await self.data_manager.start()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã
            await self.data_manager.subscribe_multiple_symbols([self.symbol])
            
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.trading_loop()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await self.send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            self.is_running = False
            await self.data_manager.stop()
            await self.send_telegram_message("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    async def trading_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        while self.is_running:
            try:
                logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                market_analysis = await self.analyze_market()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                news_analysis = await self.get_news_analysis()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ Telegram
                from telegram_trading_bot import telegram_bot
                await telegram_bot.send_market_analysis(market_analysis)
                await telegram_bot.send_news_analysis(news_analysis)
                
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                decision = await self.make_trading_decision(market_analysis, news_analysis)
                
                if decision['action'] == 'BUY':
                    await self.execute_buy_order(decision)
                elif decision['action'] == 'SELL':
                    await self.execute_sell_order(decision)
                elif decision['action'] == 'HOLD':
                    logger.info("‚è∏Ô∏è –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                await asyncio.sleep(300)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(60)
    
    async def analyze_market(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.data_manager.get_market_data(self.symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.data_manager.get_technical_indicators(self.symbol, '1h')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlations = self.data_manager.get_correlation_data(self.symbol)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
            orderbook = self.data_manager.get_orderbook_data(self.symbol)
            
            analysis = {
                'symbol': self.symbol,
                'price': market_data.price if market_data else 0,
                'change_24h': market_data.change_24h if market_data else 0,
                'volume_24h': market_data.volume_24h if market_data else 0,
                'indicators': indicators.to_dict() if indicators else {},
                'correlations': correlations,
                'orderbook': orderbook.to_dict() if orderbook else {},
                'timestamp': datetime.now()
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üìä –î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê:")
            logger.info(f"   –¶–µ–Ω–∞: ${analysis['price']:.2f}")
            logger.info(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {analysis['change_24h']:.2f}%")
            logger.info(f"   –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {len(analysis['indicators'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            logger.info(f"   –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {len(analysis['correlations'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            logger.info(f"   OrderBook: {len(analysis['orderbook'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {}
    
    async def get_news_analysis(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞ - Perplexity —É–±—Ä–∞–Ω)"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis = {
                'sentiment': 'neutral',
                'impact_score': 0.0,
                'recent_news': [],
                'timestamp': datetime.now()
            }
            
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return {'sentiment': 'neutral', 'impact_score': 0}
    
    async def make_trading_decision(self, market_analysis: Dict, news_analysis: Dict) -> Dict:
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        try:
            decision = {
                'action': 'HOLD',
                'reason': '–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤',
                'confidence': 0.0,
                'price': 0.0,
                'quantity': 0.0
            }
            
            if not market_analysis:
                return decision
            
            price = market_analysis.get('price', 0)
            if price == 0:
                return decision
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = market_analysis.get('indicators', {})
            rsi = indicators.get('rsi_14', 50)
            macd_histogram = indicators.get('macd', {}).get('histogram', 0)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            sentiment = news_analysis.get('sentiment', 'neutral')
            impact_score = news_analysis.get('impact_score', 0)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
            orderbook = market_analysis.get('orderbook', {})
            spread_percent = orderbook.get('spread_percent', 0)
            
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            buy_signals = 0
            sell_signals = 0
            
            # RSI —Å–∏–≥–Ω–∞–ª—ã
            if rsi < 30:
                buy_signals += 1
            elif rsi > 70:
                sell_signals += 1
            
            # MACD —Å–∏–≥–Ω–∞–ª—ã
            if macd_histogram > 0:
                buy_signals += 1
            elif macd_histogram < 0:
                sell_signals += 1
            
            # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if sentiment == 'positive' and impact_score > 0.3:
                buy_signals += 1
            elif sentiment == 'negative' and impact_score > 0.3:
                sell_signals += 1
            
            # –°–ø—Ä–µ–¥ —Å–∏–≥–Ω–∞–ª—ã
            if spread_percent < 0.1:  # –ù–∏–∑–∫–∏–π —Å–ø—Ä–µ–¥ - —Ö–æ—Ä–æ—à–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                buy_signals += 0.5
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"üìä –°–ò–ì–ù–ê–õ–´ –ê–ù–ê–õ–ò–ó–ê:")
            logger.info(f"   RSI: {rsi:.1f} (–ø–æ–∫—É–ø–∫–∞: {rsi < 30}, –ø—Ä–æ–¥–∞–∂–∞: {rsi > 70})")
            logger.info(f"   MACD: {macd_histogram:.4f} (–ø–æ–∫—É–ø–∫–∞: {macd_histogram > 0}, –ø—Ä–æ–¥–∞–∂–∞: {macd_histogram < 0})")
            logger.info(f"   –ù–æ–≤–æ—Å—Ç–∏: {sentiment} (–≤–ª–∏—è–Ω–∏–µ: {impact_score:.2f})")
            logger.info(f"   –°–ø—Ä–µ–¥: {spread_percent:.4f}% (–ø–æ–∫—É–ø–∫–∞: {spread_percent < 0.1})")
            logger.info(f"   –ü–æ–∫—É–ø–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {buy_signals}")
            logger.info(f"   –ü—Ä–æ–¥–∞–∂–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {sell_signals}")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ–∫—É–ø–∫–∏: {self.has_active_buy_order()}")
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            if buy_signals >= 1.5 and not self.has_active_buy_order():
                decision = {
                    'action': 'BUY',
                    'reason': f'–ü–æ–∫—É–ø–∫–∞: RSI={rsi:.1f}, MACD={macd_histogram:.4f}, –ù–æ–≤–æ—Å—Ç–∏={sentiment}',
                    'confidence': min(buy_signals / 3, 1.0),
                    'price': price * 0.999,  # –ü–æ–∫—É–ø–∞–µ–º —á—É—Ç—å –Ω–∏–∂–µ —Ä—ã–Ω–∫–∞
                    'quantity': self.calculate_quantity(price)
                }
                logger.info(f"üöÄ –†–ï–®–ï–ù–ò–ï: –ü–û–ö–£–ü–ö–ê! –ü—Ä–∏—á–∏–Ω–∞: {decision['reason']}")
            elif sell_signals >= 2 and self.has_active_buy_order():
                decision = {
                    'action': 'SELL',
                    'reason': f'–ü—Ä–æ–¥–∞–∂–∞: RSI={rsi:.1f}, MACD={macd_histogram:.4f}, –ù–æ–≤–æ—Å—Ç–∏={sentiment}',
                    'confidence': min(sell_signals / 3, 1.0),
                    'price': price * 1.005,  # –ü—Ä–æ–¥–∞–µ–º —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º 0.5%
                    'quantity': self.get_bought_quantity()
                }
                logger.info(f"üìâ –†–ï–®–ï–ù–ò–ï: –ü–†–û–î–ê–ñ–ê! –ü—Ä–∏—á–∏–Ω–∞: {decision['reason']}")
            else:
                logger.info(f"‚è∏Ô∏è –†–ï–®–ï–ù–ò–ï: –£–î–ï–†–ñ–ê–ù–ò–ï (–ø–æ–∫—É–ø–∫–∞: {buy_signals}/2, –ø—Ä–æ–¥–∞–∂–∞: {sell_signals}/2)")
            
            return decision
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: {e}")
            return {'action': 'HOLD', 'reason': f'–û—à–∏–±–∫–∞: {e}', 'confidence': 0.0}
    
    def calculate_quantity(self, price: float) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –¢–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç!
            quantity = self.min_lot_size
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤
            return round(quantity, 3)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            return self.min_lot_size
    
    def has_active_buy_order(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        return any(order['side'] == 'BUY' and order['status'] == 'NEW' 
                  for order in self.active_orders.values())
    
    def get_bought_quantity(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ ETH"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç
        return self.min_lot_size
    
    async def execute_buy_order(self, decision: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            logger.info(f"üìà –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {decision['reason']}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = await self.create_limit_order(
                symbol=self.symbol,
                side='BUY',
                quantity=decision['quantity'],
                price=decision['price']
            )
            
            if order:
                self.active_orders[order['orderId']] = {
                    'orderId': order['orderId'],
                    'symbol': self.symbol,
                    'side': 'BUY',
                    'quantity': decision['quantity'],
                    'price': decision['price'],
                    'status': 'NEW',
                    'timestamp': datetime.now()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ Telegram
                from telegram_trading_bot import telegram_bot
                await telegram_bot.send_trading_decision(decision)
                await telegram_bot.send_order_created(order)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {e}")
            await self.send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
    
    async def execute_sell_order(self, decision: Dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        try:
            logger.info(f"üìâ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {decision['reason']}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = await self.create_limit_order(
                symbol=self.symbol,
                side='SELL',
                quantity=decision['quantity'],
                price=decision['price']
            )
            
            if order:
                self.active_orders[order['orderId']] = {
                    'orderId': order['orderId'],
                    'symbol': self.symbol,
                    'side': 'SELL',
                    'quantity': decision['quantity'],
                    'price': decision['price'],
                    'status': 'NEW',
                    'timestamp': datetime.now()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ Telegram
                from telegram_trading_bot import telegram_bot
                await telegram_bot.send_trading_decision(decision)
                await telegram_bot.send_order_created(order)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {e}")
            await self.send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
    
    async def create_limit_order(self, symbol: str, side: str, quantity: float, price: float) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í MEXC API
            order = self.rest_api.place_order(
                symbol=symbol,
                side=side,
                quantity=quantity,
                price=price
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –†–ï–ê–õ–¨–ù–´–ô –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order}")
                return order
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {order}")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    async def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            from telegram_trading_bot import telegram_bot
            await telegram_bot.send_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            # Fallback - –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"üì± [{timestamp}] {message}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    trader = AutoTrader()
    
    try:
        await trader.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        await trader.stop()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await trader.stop()

if __name__ == "__main__":
    asyncio.run(main()) 