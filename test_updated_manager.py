#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–≤–æ–∏–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º
"""

import asyncio
import logging
from comprehensive_data_manager import ComprehensiveDataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def orderbook_callback(orderbook_data):
    """Callback –¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
    print(f"üìö OrderBook {orderbook_data.symbol}:")
    print(f"  –°–ø—Ä–µ–¥: {orderbook_data.spread:.2f} ({orderbook_data.spread_percent:.4f}%)")
    print(f"  Bid –æ–±—ä–µ–º: {orderbook_data.bid_volume:.2f}")
    print(f"  Ask –æ–±—ä–µ–º: {orderbook_data.ask_volume:.2f}")
    print(f"  –£—Ä–æ–≤–Ω–µ–π –ø–æ–∫—É–ø–∫–∏: {len(orderbook_data.bids)}")
    print(f"  –£—Ä–æ–≤–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏: {len(orderbook_data.asks)}")

async def trade_callback(trade_data):
    """Callback –¥–ª—è —Å–¥–µ–ª–æ–∫"""
    print(f"üí± Trade {trade_data.symbol}: {trade_data.side} {trade_data.quantity} @ {trade_data.price}")

async def market_callback(market_data):
    """Callback –¥–ª—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üìä Market update: {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    for symbol, data in list(market_data.items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"  {symbol}: ${data.price:.6f}")

async def test_updated_manager():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üß™ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê")
    print("=" * 60)
    
    manager = ComprehensiveDataManager()
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ callbacks
    manager.subscribe_orderbook_updates(orderbook_callback)
    manager.subscribe_trade_updates(trade_callback)
    manager.subscribe_market_updates(market_callback)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        await manager.start()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
        await manager.subscribe_multiple_symbols(['BTCUSDT', 'ETHUSDT'])
        
        # –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(30)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –ü–û–õ–£–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = manager.get_market_data()
        print(f"  –†—ã–Ω–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(market_data)}")
        
        # –û—Ä–¥–µ—Ä–±—É–∫
        btc_orderbook = manager.get_orderbook_data('BTCUSDT')
        if btc_orderbook:
            print(f"  BTC OrderBook: {len(btc_orderbook.bids)} bids, {len(btc_orderbook.asks)} asks")
            print(f"  –°–ø—Ä–µ–¥: {btc_orderbook.spread:.2f} ({btc_orderbook.spread_percent:.4f}%)")
        
        # –°–¥–µ–ª–∫–∏
        btc_trades = manager.get_trade_history('BTCUSDT')
        if btc_trades:
            print(f"  BTC —Å–¥–µ–ª–æ–∫: {len(btc_trades.trades)}")
        
        # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        candidates = manager.get_trading_candidates()
        print(f"  –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(candidates)}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        await manager.stop()

if __name__ == "__main__":
    asyncio.run(test_updated_manager()) 