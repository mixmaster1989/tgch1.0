from PyQt5.QtWidgets import (QFrame, QVBoxLayout, QHBoxLayout, 
                            QLabel, QComboBox, QLineEdit, QToolButton,
                            QApplication)
from PyQt5.QtCore import Qt, QPoint, QMimeData
from PyQt5.QtGui import QFont, QDrag
from constants import BLOCK_TYPES

class BlockWidget(QFrame):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ PyQt5"""
    
    def __init__(self, block, parent=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–∞ –±–ª–æ–∫–∞
        
        Args:
            block: –ë–ª–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
        """
        super().__init__(parent)
        self.block = block
        self.drag_start_position = None
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        self.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
        self.setStyleSheet("""
            QFrame {
                background-color: #2b2b2b;
                border: 2px solid #3d3d3d;
                border-radius: 10px;
                padding: 10px;
                margin: 5px;
            }
            QFrame:hover {
                border: 2px solid #4a4a4a;
            }
            QLabel {
                color: #ffffff;
                font-size: 14px;
            }
            QLineEdit, QComboBox {
                background-color: #3d3d3d;
                color: #ffffff;
                border: 1px solid #4a4a4a;
                border-radius: 5px;
                padding: 5px;
                font-size: 14px;
            }
            QLineEdit:focus, QComboBox:focus {
                border: 1px solid #5a5a5a;
            }
            QToolButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-size: 14px;
            }
            QToolButton:hover {
                color: #00ff00;
            }
        """)
        
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
        header = QHBoxLayout()
        icon_label = QLabel(BLOCK_TYPES[self.block.type]["icon"])
        icon_label.setFont(QFont("Arial", 16))
        title_label = QLabel(self.block.type)
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        description_label = QLabel(BLOCK_TYPES[self.block.type]["description"])
        description_label.setWordWrap(True)
        description_label.setStyleSheet("color: #aaaaaa; font-size: 12px;")
        
        header.addWidget(icon_label)
        header.addWidget(title_label)
        header.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QToolButton()
        delete_btn.setText("‚ùå")
        delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫")
        delete_btn.clicked.connect(self.delete_block)
        header.addWidget(delete_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        duplicate_btn = QToolButton()
        duplicate_btn.setText("üìã")
        duplicate_btn.setToolTip("–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫")
        duplicate_btn.clicked.connect(self.duplicate_block)
        header.addWidget(duplicate_btn)
        
        layout.addLayout(header)
        layout.addWidget(description_label)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞
        for param in BLOCK_TYPES[self.block.type]["params"]:
            param_layout = QVBoxLayout()
            row = QHBoxLayout()
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            name_label = QLabel(param["name"])
            name_label.setMinimumWidth(150)
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞
            help_btn = QToolButton()
            help_btn.setText("‚ùì")
            help_btn.setToolTip(param.get("help", ""))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            if "values" in param:
                input_widget = QComboBox()
                input_widget.addItems(param["values"])
                if param["name"] in self.block.params:
                    input_widget.setCurrentText(str(self.block.params[param["name"]]))
                input_widget.currentTextChanged.connect(
                    lambda text, p=param["name"]: self.update_param(p, text))
            else:
                input_widget = QLineEdit()
                if param["name"] in self.block.params:
                    input_widget.setText(str(self.block.params[param["name"]]))
                input_widget.textChanged.connect(
                    lambda text, p=param["name"]: self.update_param(p, text))
                if "placeholder" in param:
                    input_widget.setPlaceholderText(param["placeholder"])
            
            row.addWidget(name_label)
            row.addWidget(help_btn)
            row.addWidget(input_widget)
            param_layout.addLayout(row)
            
            # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä
            if "description" in param:
                desc = QLabel(param["description"])
                desc.setStyleSheet("color: #aaa; font-size: 12px;")
                param_layout.addWidget(desc)
            
            if "help" in param:
                example = QLabel("–ü—Ä–∏–º–µ—Ä: " + param["help"].split("\\n")[0])
                example.setStyleSheet("color: #6cf; font-size: 12px;")
                param_layout.addWidget(example)
            
            layout.addLayout(param_layout)
        
        self.setLayout(layout)
    
    def update_param(self, name, value):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –±–ª–æ–∫–∞"""
        self.block.update_param(name, value)
    
    def delete_block(self):
        """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫"""
        if self.parent():
            self.parent().remove_block(self)
            
    def duplicate_block(self):
        """–î—É–±–ª–∏—Ä—É–µ—Ç –±–ª–æ–∫"""
        if self.parent():
            self.parent().duplicate_block(self)
    
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Drag&Drop
    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        if event.button() == Qt.LeftButton:
            self.drag_start_position = event.pos()
    
    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º—ã—à–∏"""
        if not (event.buttons() & Qt.LeftButton) or not self.drag_start_position:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–ª–µ–∫–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –º—ã—à—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (event.pos() - self.drag_start_position).manhattanLength() < QApplication.startDragDistance():
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        drag = QDrag(self)
        mime_data = QMimeData()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        index = self.parent().layout().indexOf(self)
        mime_data.setText(str(index))
        
        drag.setMimeData(mime_data)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        pixmap = self.grab()
        drag.setPixmap(pixmap)
        drag.setHotSpot(event.pos())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        drop_action = drag.exec_(Qt.MoveAction)
    
    def dragEnterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        if event.mimeData().hasText():
            event.acceptProposedAction()
    
    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        if event.mimeData().hasText():
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –±–ª–æ–∫–∞
            source_index = int(event.mimeData().text())
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ (–∫—É–¥–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º)
            target_index = self.parent().layout().indexOf(self)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –±–ª–æ–∫ –≤ —Å–ø–∏—Å–∫–µ
            if self.parent() and hasattr(self.parent(), 'move_block'):
                self.parent().move_block(source_index, target_index)
                
            event.acceptProposedAction()