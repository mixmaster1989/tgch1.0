#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–∞—Ä—à–µ 10 –¥–Ω–µ–π —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏ –∏ P&L
"""

from mexc_advanced_api import MexAdvancedAPI
from mex_api import MexAPI
import time
from datetime import datetime
import json

def main():
    api = MexAPI()
    advanced_api = MexAdvancedAPI()
    
    print("üîç –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –°–¢–ê–†–®–ï 10 –î–ù–ï–ô")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    account_info = api.get_account_info()
    
    if not isinstance(account_info, dict) or 'balances' not in account_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    active_assets = []
    for balance in account_info['balances']:
        free = float(balance.get('free', 0))
        locked = float(balance.get('locked', 0))
        if free > 0 or locked > 0:
            active_assets.append((balance['asset'], free, locked))
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    pairs_to_check = []
    for asset, free, locked in active_assets:
        if asset != 'USDT' and (free > 0 or locked > 0):
            pairs_to_check.append(f"{asset}USDT")
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(pairs_to_check)} –ø–∞—Ä...")
    
    old_positions = []
    
    for i, symbol in enumerate(pairs_to_check):
        print(f"[{i+1:2d}/{len(pairs_to_check)}] {symbol}...", end=" ")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
            trades = advanced_api.get_my_trades(symbol, limit=1000)
            
            if not trades:
                print("‚ùå")
                continue
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = analyze_positions_for_symbol(symbol, trades)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞—Ä—à–µ 10 –¥–Ω–µ–π
            old_pos = [p for p in positions if p['duration_days'] >= 10.0]
            
            if old_pos:
                print(f"‚úÖ {len(old_pos)} –ø–æ–∑–∏—Ü–∏–π —Å—Ç–∞—Ä—à–µ 10 –¥–Ω–µ–π")
                old_positions.extend(old_pos)
            else:
                print("‚ùå")
                
        except Exception as e:
            print(f"‚ùå {e}")
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)
    
    if not old_positions:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–∞—Ä—à–µ 10 –¥–Ω–µ–π")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    old_positions.sort(key=lambda x: x['duration_days'], reverse=True)
    
    print(f"\nüìä –ù–ê–ô–î–ï–ù–û {len(old_positions)} –ü–û–ó–ò–¶–ò–ô –°–¢–ê–†–®–ï 10 –î–ù–ï–ô")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
    print("\nüîç –ü–æ–ª—É—á–∞—é —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã...")
    
    for i, position in enumerate(old_positions, 1):
        symbol = position['symbol']
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price_data = api.get_ticker_price(symbol)
            current_price = None
            
            if isinstance(price_data, dict) and 'price' in price_data:
                current_price = float(price_data['price'])
            
            if current_price is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                current_price = 0
                pnl = 0
                pnl_percent = 0
            else:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                if position['type'] == 'LONG':
                    pnl = (current_price - position['start_price']) * position['quantity']
                    pnl_percent = ((current_price - position['start_price']) / position['start_price']) * 100 if position['start_price'] > 0 else 0
                else:  # SHORT
                    pnl = (position['start_price'] - current_price) * position['quantity']
                    pnl_percent = ((position['start_price'] - current_price) / position['start_price']) * 100 if position['start_price'] > 0 else 0
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            status = "üü¢ –û–¢–ö–†–´–¢–ê" if position.get('end_price') is None else "üî¥ –ó–ê–ö–†–´–¢–ê"
            pnl_color = "üü¢" if pnl >= 0 else "üî¥"
            
            print(f"\n#{i:2d}. {symbol} - {status}")
            print(f"    –¢–∏–ø: {position['type']}")
            print(f"    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {position['duration_days']:.1f} –¥–Ω–µ–π")
            print(f"    –ù–∞—á–∞–ª–æ: {datetime.fromtimestamp(position['start_time']/1000).strftime('%Y-%m-%d %H:%M:%S')}")
            if position.get('end_time'):
                print(f"    –ö–æ–Ω–µ—Ü: {datetime.fromtimestamp(position['end_time']/1000).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position['quantity']:.6f}")
            print(f"    –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {position['start_price']:.6f}")
            if position.get('end_price'):
                print(f"    –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {position['end_price']:.6f}")
            else:
                print(f"    –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.6f}")
            
            if position.get('end_price'):
                # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç–Ω—ã–π P&L
                if position.get('pnl') is not None:
                    print(f"    P&L: {position['pnl']:.2f} USDT")
                else:
                    print(f"    P&L: –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω")
            else:
                # –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π P&L
                print(f"    {pnl_color} P&L: {pnl:.2f} USDT ({pnl_percent:+.2f}%)")
            
            print("-" * 60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Ü–µ–Ω
        time.sleep(0.2)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    
    open_positions = [p for p in old_positions if p.get('end_price') is None]
    closed_positions = [p for p in old_positions if p.get('end_price') is not None]
    
    print(f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π —Å—Ç–∞—Ä—à–µ 10 –¥–Ω–µ–π: {len(old_positions)}")
    print(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_positions)}")
    print(f"–ó–∞–∫—Ä—ã—Ç—ã—Ö: {len(closed_positions)}")
    
    if old_positions:
        avg_duration = sum(p['duration_days'] for p in old_positions) / len(old_positions)
        print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –¥–Ω–µ–π")
        
        longest = old_positions[0]
        print(f"–°–∞–º–∞—è –¥–æ–ª–≥–∞—è: {longest['symbol']} - {longest['duration_days']:.1f} –¥–Ω–µ–π")

def analyze_positions_for_symbol(symbol: str, trades: list) -> list:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    trades.sort(key=lambda x: x['time'])
    
    positions = []
    current_position = 0  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    position_start_time = None
    position_start_price = 0
    position_quantity = 0
    
    for trade in trades:
        trade_time = trade['time']
        trade_price = trade['price']
        trade_qty = trade['qty']
        is_buy = trade['isBuyer']
        
        if is_buy:
            # –ü–æ–∫—É–ø–∫–∞
            if current_position <= 0:  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                if current_position < 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                    if position_start_time:
                        duration_days = (trade_time - position_start_time) / (1000 * 60 * 60 * 24)
                        positions.append({
                            'symbol': symbol,
                            'type': 'SHORT',
                            'start_time': position_start_time,
                            'end_time': trade_time,
                            'duration_days': duration_days,
                            'start_price': position_start_price,
                            'end_price': trade_price,
                            'quantity': abs(position_quantity),
                            'pnl': (position_start_price - trade_price) * abs(position_quantity)
                        })
                
                # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                current_position = trade_qty
                position_start_time = trade_time
                position_start_price = trade_price
                position_quantity = trade_qty
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                current_position += trade_qty
                position_quantity += trade_qty
        else:
            # –ü—Ä–æ–¥–∞–∂–∞
            if current_position >= 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                if current_position > 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                    if position_start_time:
                        duration_days = (trade_time - position_start_time) / (1000 * 60 * 60 * 24)
                        positions.append({
                            'symbol': symbol,
                            'type': 'LONG',
                            'start_time': position_start_time,
                            'end_time': trade_time,
                            'duration_days': duration_days,
                            'start_price': position_start_price,
                            'end_price': trade_price,
                            'quantity': position_quantity,
                            'pnl': (trade_price - position_start_price) * position_quantity
                        })
                
                # –ù–∞—á–∏–Ω–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                current_position = -trade_qty
                position_start_time = trade_time
                position_start_price = trade_price
                position_quantity = -trade_qty
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                current_position -= trade_qty
                position_quantity -= trade_qty
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å—á–∏—Ç–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—É—â—É—é
    if current_position != 0 and position_start_time:
        current_time = int(time.time() * 1000)
        duration_days = (current_time - position_start_time) / (1000 * 60 * 60 * 24)
        positions.append({
            'symbol': symbol,
            'type': 'LONG' if current_position > 0 else 'SHORT',
            'start_time': position_start_time,
            'end_time': current_time,
            'duration_days': duration_days,
            'start_price': position_start_price,
            'end_price': None,  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            'quantity': abs(current_position),
            'pnl': None  # –ù–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        })
    
    return positions

if __name__ == "__main__":
    main()
