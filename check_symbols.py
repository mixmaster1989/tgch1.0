#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ MEX
"""

from mex_api import MexAPI
import json

def main():
    api = MexAPI()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ MEX...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–µ
        exchange_info = api.get_exchange_info()
        
        if 'symbols' in exchange_info:
            symbols = exchange_info['symbols']
            print(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤:")
            for i, symbol in enumerate(symbols[:5]):
                status = symbol.get('status', 'N/A')
                print(f"   {i+1}. {symbol['symbol']} - –°—Ç–∞—Ç—É—Å: {status} (—Ç–∏–ø: {type(status)})")
                print(f"      –ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤: {symbol.get('baseAsset', 'N/A')}")
                print(f"      –ö–æ—Ç–∏—Ä—É–µ–º—ã–π –∞–∫—Ç–∏–≤: {symbol.get('quoteAsset', 'N/A')}")
                print(f"      –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {symbol.get('orderTypes', [])}")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            statuses = {}
            for symbol in symbols:
                status = symbol.get('status', 'UNKNOWN')
                statuses[status] = statuses.get(status, 0) + 1
            
            print(f"\nüìä –°—Ç–∞—Ç—É—Å—ã —Å–∏–º–≤–æ–ª–æ–≤:")
            for status, count in statuses.items():
                print(f"   {status} (—Ç–∏–ø: {type(status)}): {count}")
            
            # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (—Å—Ç–∞—Ç—É—Å '1' = –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è)
            trading_symbols = [s for s in symbols if s.get('status') == '1']
            print(f"\n‚úÖ –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(trading_symbols)}")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º USDT –ø–∞—Ä—ã
            usdt_trading_pairs = [s for s in trading_symbols if s['symbol'].endswith('USDT')]
            print(f"üí± USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {len(usdt_trading_pairs)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            print(f"\nüìã –ü–µ—Ä–≤—ã–µ 10 USDT —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
            for i, symbol in enumerate(usdt_trading_pairs[:10]):
                print(f"   {i+1}. {symbol['symbol']} ({symbol.get('baseAsset', 'N/A')}/{symbol.get('quoteAsset', 'N/A')})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT']
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
            for symbol_name in test_symbols:
                found = False
                for symbol_info in usdt_trading_pairs:
                    if symbol_info['symbol'] == symbol_name:
                        found = True
                        print(f"‚úÖ {symbol_name}: –°—Ç–∞—Ç—É—Å {symbol_info['status']}")
                        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {symbol_info.get('orderTypes', [])}")
                        break
                
                if not found:
                    print(f"‚ùå {symbol_name}: –ù–ï –ù–ê–ô–î–ï–ù")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {exchange_info}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 