#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
from datetime import datetime
from comprehensive_data_manager import comprehensive_data_manager, MarketData, DataSource
from perplexity_analyzer import PerplexityAnalyzer
from ai_trading_analyzer import AITradingAnalyzer

# –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º)
class MockPerplexityAnalyzer:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    async def get_comprehensive_analysis(self, symbol: str) -> dict:
        print(f"   üîÑ [–ó–ê–ì–õ–£–®–ö–ê] –î–∞–Ω–Ω—ã–µ –æ—Ç Perplexity –¥–ª—è {symbol}...")
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        return {
            "symbol": symbol,
            "overall_sentiment": "positive",
            "overall_confidence": 0.8,
            "impact_score": 0.7,
            "news_analysis": {
                "sentiment": "positive",
                "impact_score": 0.7,
                "key_events": [
                    {
                        "title": "–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å",
                        "impact": "medium",
                        "sentiment": "positive",
                        "summary": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    }
                ],
                "market_outlook": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑",
                "confidence": 0.8
            },
            "sentiment_analysis": {
                "social_sentiment": "positive",
                "analyst_sentiment": "positive",
                "correlation_analysis": "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è",
                "confidence": 0.8,
                "summary": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
            },
            "technical_analysis": {
                "technical_score": 0.75,
                "on_chain_metrics": {
                    "active_addresses": "up",
                    "large_transactions": "10",
                    "network_health": "good"
                },
                "defi_metrics": {
                    "tvl_trend": "up",
                    "volume_trend": "up"
                },
                "analysis": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            },
            "timestamp": datetime.now().isoformat(),
            "source": "mock_perplexity"
        }

class MockAITradingAnalyzer:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è AI —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    async def analyze_and_decide(self, market_data, perplexity_data: dict) -> dict:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª –∏–∑ market_data (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º)
        symbol = "UNKNOWN"
        if hasattr(market_data, 'symbol'):
            symbol = market_data.symbol
        elif isinstance(market_data, dict):
            symbol = market_data.get('symbol', 'UNKNOWN')
        
        print(f"   üîÑ [–ó–ê–ì–õ–£–®–ö–ê] –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è {symbol}...")
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        
        return {
            "symbol": symbol,
            "timestamp": datetime.now().isoformat(),
            "input_data": {
                "market_data": market_data,
                "perplexity_data": perplexity_data
            },
            "expert_analysis": {
                "prompts": {
                    "openai": "[–ó–ê–ì–õ–£–®–ö–ê] –ü—Ä–æ–º–ø—Ç OpenAI",
                    "anthropic": "[–ó–ê–ì–õ–£–®–ö–ê] –ü—Ä–æ–º–ø—Ç Anthropic", 
                    "google": "[–ó–ê–ì–õ–£–®–ö–ê] –ü—Ä–æ–º–ø—Ç Google"
                },
                "responses": [
                    {
                        "expert": "OpenAI GPT-4o-mini",
                        "decision": "BUY",
                        "confidence": 0.85,
                        "reason": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ OpenAI"
                    },
                    {
                        "expert": "Anthropic Claude 3.5 Haiku",
                        "decision": "BUY", 
                        "confidence": 0.82,
                        "reason": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ Anthropic"
                    },
                    {
                        "expert": "Google Gemini 2.5 Flash Lite",
                        "decision": "HOLD",
                        "confidence": 0.78,
                        "reason": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ Google"
                    }
                ]
            },
            "judge_analysis": {
                "prompt": "[–ó–ê–ì–õ–£–®–ö–ê] –ü—Ä–æ–º–ø—Ç —Å—É–¥—å–∏",
                "response": {
                    "final_decision": "BUY",
                    "confidence": 0.83,
                    "reason": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏"
                }
            },
            "final_result": {
                "decision": "BUY",
                "confidence": 0.83,
                "should_trade": True
            }
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∑–∞–≥–ª—É—à–µ–∫
perplexity_analyzer = MockPerplexityAnalyzer()
ai_trading_analyzer = MockAITradingAnalyzer()

async def test_full_ai_analysis():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ (—Å –∑–∞–≥–ª—É—à–∫–∞–º–∏)...")
    
    try:
        symbol = "ETHUSDT"
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"full_ai_analysis_{symbol}_{timestamp}.txt"
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        # 1. –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ comprehensive_data_manager
        print("   üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–¥–∏–Ω —Ä–∞–∑)...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –û–î–ò–ù –†–ê–ó —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        market_data = comprehensive_data_manager.get_market_data(symbol)
        if market_data:
            print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${market_data.price}")
        else:
            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            market_data = None
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        perplexity_analyzer = PerplexityAnalyzer()
        ai_trading_analyzer = AITradingAnalyzer()
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º perplexity_analyzer –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("   üîÑ –î–∞–Ω–Ω—ã–µ –æ—Ç Perplexity...")
        perplexity_data = await perplexity_analyzer.get_comprehensive_analysis(symbol)
        
        # 4. –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ai_trading_analyzer
        print("   üîÑ –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ...")
        trading_result = await ai_trading_analyzer.analyze_and_decide(market_data, perplexity_data)
        
        # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        print(f"üíæ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {filename}")
        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"=== –ü–û–õ–ù–´–ô AI –ê–ù–ê–õ–ò–ó {symbol} ===\n")
            f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–¢–∏–ø —Ç–µ—Å—Ç–∞: full_ai_analysis_with_mocks\n\n")
            
            # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            f.write("üìä –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:\n")
            if market_data:
                f.write(f"   –°–∏–º–≤–æ–ª: {getattr(market_data, 'symbol', 'N/A')}\n")
                f.write(f"   –¶–µ–Ω–∞: ${getattr(market_data, 'price', 0):.2f}\n")
                f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {getattr(market_data, 'change_24h', 0):.2f}%\n")
                f.write(f"   –û–±—ä–µ–º 24—á: ${getattr(market_data, 'volume_24h', 0):,.0f}\n")
                f.write(f"   –ú–∞–∫—Å–∏–º—É–º 24—á: ${getattr(market_data, 'high_24h', 0):.2f}\n")
                f.write(f"   –ú–∏–Ω–∏–º—É–º 24—á: ${getattr(market_data, 'low_24h', 0):.2f}\n")
                f.write(f"   –í—Ä–µ–º—è: {getattr(market_data, 'timestamp', 'N/A')}\n")
            else:
                f.write("   ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
            f.write("\n")
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            f.write("üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:\n")
            indicators = comprehensive_data_manager.get_technical_indicators(symbol, '1m')
            if indicators:
                f.write(f"   RSI (14): {indicators.rsi_14:.2f}\n")
                f.write(f"   SMA (20): ${indicators.sma_20:.2f}\n")
                f.write(f"   EMA (12): ${indicators.ema_12:.2f}\n")
                f.write(f"   MACD: {indicators.macd}\n")
                f.write(f"   Bollinger: {indicators.bollinger}\n")
                f.write(f"   ATR (14): {indicators.atr_14:.6f}\n")
                f.write(f"   Volume SMA: {indicators.volume_sma:.2f}\n")
            else:
                f.write("   ‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
            f.write("\n")
            
            # Orderbook –¥–∞–Ω–Ω—ã–µ
            f.write("üìö ORDERBOOK –î–ê–ù–ù–´–ï:\n")
            try:
                orderbook = await comprehensive_data_manager.get_orderbook_data(symbol)
                if orderbook:
                    f.write(f"   –û–±—ä–µ–∫—Ç orderbook: {type(orderbook)}\n")
                    f.write(f"   –ê—Ç—Ä–∏–±—É—Ç—ã: {dir(orderbook)}\n")
                    if hasattr(orderbook, '__dict__'):
                        f.write(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {orderbook.__dict__}\n")
                    
                    if hasattr(orderbook, 'spread'):
                        f.write(f"   –°–ø—Ä–µ–¥: ${orderbook.spread:.6f}\n")
                        f.write(f"   –°–ø—Ä–µ–¥ %: {orderbook.spread_percent:.4f}%\n")
                        f.write(f"   –û–±—ä–µ–º bids: ${orderbook.bid_volume:.2f}\n")
                        f.write(f"   –û–±—ä–µ–º asks: ${orderbook.ask_volume:.2f}\n")
                        f.write(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {orderbook.volume_ratio:.2f}\n")
                        f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {orderbook.liquidity_score:.2f}\n")
                    else:
                        f.write("   ‚ùå –ê—Ç—Ä–∏–±—É—Ç 'spread' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")
                        print(f"‚ö†Ô∏è Orderbook –¥–ª—è {symbol}: –æ–±—ä–µ–∫—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç 'spread'")
                        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã: {[attr for attr in dir(orderbook) if not attr.startswith('_')]}")
                else:
                    f.write("   ‚ùå Orderbook –æ–±—ä–µ–∫—Ç None\n")
                    print(f"‚ö†Ô∏è Orderbook –¥–ª—è {symbol}: –æ–±—ä–µ–∫—Ç None")
            except Exception as e:
                f.write(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook: {e}\n")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook –¥–ª—è {symbol}: {e}")
            f.write("\n")
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            f.write("üîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n")
            try:
                correlations = comprehensive_data_manager.get_correlation_data(symbol)
                if correlations:
                    for asset, corr in correlations.items():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                        if isinstance(corr, (int, float)):
                            f.write(f"   {asset}: {corr:.4f}\n")
                        else:
                            f.write(f"   {asset}: {corr}\n")
                else:
                    f.write("   ‚ùå –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
                    print(f"‚ö†Ô∏è –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            except Exception as e:
                f.write(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}\n")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è {symbol}: {e}")
            f.write("\n")
            
            # Perplexity –¥–∞–Ω–Ω—ã–µ
            f.write("üîç –ê–ù–ê–õ–ò–ó PERPLEXITY:\n")
            f.write(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {perplexity_data.get('overall_sentiment', 'N/A')}\n")
            f.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {perplexity_data.get('overall_confidence', 0):.2f}\n")
            f.write(f"   Impact Score: {perplexity_data.get('impact_score', 0):.2f}\n")
            f.write("\n")
            
            # –ü–†–û–ú–ü–¢–´ –ö –ù–ï–ô–†–û–°–ï–¢–Ø–ú
            f.write("ü§ñ –ü–†–û–ú–ü–¢–´ –ö –ù–ï–ô–†–û–°–ï–¢–Ø–ú:\n\n")
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è Perplexity
            f.write("üì∞ –ü–†–û–ú–ü–¢ –î–õ–Ø PERPLEXITY:\n")
            perplexity_prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–∑–ª–æ–º—ã, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)
2. –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (ETF, –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)
3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
4. –†—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "sentiment": "positive/negative/neutral",
    "impact_score": 0.0-1.0,
    "key_events": [
        {{
            "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è",
            "impact": "high/medium/low",
            "sentiment": "positive/negative/neutral",
            "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        }}
    ],
    "market_outlook": "–∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
    "confidence": 0.0-1.0
}}
"""
            f.write(perplexity_prompt)
            f.write("\n\n")
            
            # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            f.write("üë®‚Äçüíº –ü–†–û–ú–ü–¢–´ –î–õ–Ø –¢–û–†–ì–û–í–´–• –≠–ö–°–ü–ï–†–¢–û–í:\n")
            expert_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∏ –ø—Ä–∏–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${getattr(market_data, 'price', 0):.2f}
- –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {getattr(market_data, 'change_24h', 0):.2f}%
- –û–±—ä–µ–º 24—á: ${getattr(market_data, 'volume_24h', 0):,.0f}
- RSI: {indicators.rsi_14 if indicators else 'N/A'}
- MACD: {indicators.macd if indicators else 'N/A'}
- –°–ø—Ä–µ–¥: ${orderbook.spread if orderbook and hasattr(orderbook, 'spread') else 0:.6f}

–ù–û–í–û–°–¢–ù–û–ô –ê–ù–ê–õ–ò–ó (Perplexity):
- –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {perplexity_data.get('overall_sentiment', 'N/A')}
- –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {perplexity_data.get('overall_confidence', 0):.2f}
- Impact Score: {perplexity_data.get('impact_score', 0):.2f}

–í–µ—Ä–Ω–∏ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "decision": "BUY/SELL/HOLD",
    "confidence": 0.0-1.0,
    "reason": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è",
    "risk_level": "LOW/MEDIUM/HIGH"
}}
"""
            f.write(expert_prompt)
            f.write("\n\n")
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å—É–¥—å–∏
            f.write("‚öñÔ∏è –ü–†–û–ú–ü–¢ –î–õ–Ø –°–£–î–¨–ò (Claude Opus):\n")
            judge_prompt = f"""
–¢—ã —Å—É–¥—å—è –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ—à–µ–Ω–∏—è 3 —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol} –∏ –ø—Ä–∏–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

–†–ï–®–ï–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–û–í:
1. OpenAI GPT-4o-mini: BUY (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0.85)
2. Anthropic Claude 3.5 Haiku: BUY (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0.82)  
3. Google Gemini 2.5 Flash Lite: HOLD (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 0.78)

–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
- –¶–µ–Ω–∞: ${getattr(market_data, 'price', 0):.2f}
- RSI: {indicators.rsi_14 if indicators else 'N/A'}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {perplexity_data.get('overall_sentiment', 'N/A')}

–ü—Ä–∏–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "final_decision": "BUY/SELL/HOLD",
    "confidence": 0.0-1.0,
    "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"
}}
"""
            f.write(judge_prompt)
            f.write("\n\n")
            
            # –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            f.write("ü§ñ –¢–û–†–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï:\n")
            if trading_result and isinstance(trading_result, dict):
                final_result = trading_result.get('final_result', {})
                if isinstance(final_result, dict):
                    f.write(f"   –†–µ—à–µ–Ω–∏–µ: {final_result.get('decision', 'N/A')}\n")
                    f.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_result.get('confidence', 0):.2f}\n")
                    f.write(f"   –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {final_result.get('should_trade', False)}\n")
                else:
                    f.write(f"   –†–µ—à–µ–Ω–∏–µ: {final_result}\n")
            else:
                f.write("   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ\n")
            f.write("\n")
            
            # –≠–∫—Å–ø–µ—Ä—Ç—ã
            f.write("üë®‚Äçüíº –†–ï–®–ï–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–û–í:\n")
            if trading_result and isinstance(trading_result, dict):
                expert_responses = trading_result.get('expert_analysis', {}).get('responses', [])
                for expert in expert_responses:
                    f.write(f"   {expert.get('expert', 'N/A')}: {expert.get('decision', 'N/A')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {expert.get('confidence', 0):.2f})\n")
            f.write("\n")
            
            f.write("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù\n")
        
        # 6. –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –§–∞–π–ª: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if trading_result and isinstance(trading_result, dict):
            final_result = trading_result.get('final_result', {})
            if isinstance(final_result, dict):
                print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {final_result.get('decision', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_result.get('confidence', 0):.2f}")
                print(f"   –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {final_result.get('should_trade', False)}")
            else:
                print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {final_result}")
        else:
            print(f"   –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    asyncio.run(test_full_ai_analysis())
