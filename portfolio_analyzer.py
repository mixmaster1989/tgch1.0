#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è MEXCAITRADE
P&L –ø–æ –º–æ–Ω–µ—Ç–∞–º, –æ–±—â–∏–π P&L, –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç API –±–∏—Ä–∂–∏
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from decimal import Decimal
import requests

from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

class PortfolioAnalyzer:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
        self.price_cache = {}
        self.last_update = {}
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
            current_time = time.time()
            if (symbol in self.price_cache and 
                symbol in self.last_update and 
                current_time - self.last_update[symbol] < 30):
                return self.price_cache[symbol]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if 'price' in ticker:
                price = float(ticker['price'])
                self.price_cache[symbol] = price
                self.last_update[symbol] = current_time
                return price
            
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return None
    
    def get_24h_change(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞"""
        try:
            ticker = self.mex_api.get_24hr_ticker(symbol)
            if isinstance(ticker, dict) and 'priceChangePercent' in ticker:
                return float(ticker['priceChangePercent'])
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è 24h –∏–∑–º–µ–Ω–µ–Ω–∏—è {symbol}: {e}")
            return None
    
    def calculate_portfolio_pnl(self, balances: List[Dict]) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            portfolio_data = {
                'total_usdt_value': 0.0,
                'positions': [],
                'total_pnl_usdt': 0.0,
                'total_pnl_percent': 0.0,
                'best_performer': None,
                'worst_performer': None,
                'total_positions': 0,
                'profitable_positions': 0,
                'losing_positions': 0
            }
            
            best_pnl = -float('inf')
            worst_pnl = float('inf')
            
            for balance in balances:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total <= 0 or asset == 'USDT':
                    continue
                
                symbol = f"{asset}USDT"
                current_price = self.get_current_price(symbol)
                
                if current_price is None:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                position_value = total * current_price
                
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ = —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ * 0.99
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
                estimated_avg_price = current_price * 0.99
                pnl_usdt = position_value - (total * estimated_avg_price)
                pnl_percent = (pnl_usdt / (total * estimated_avg_price)) * 100 if estimated_avg_price > 0 else 0
                
                position_data = {
                    'asset': asset,
                    'symbol': symbol,
                    'quantity': total,
                    'current_price': current_price,
                    'position_value_usdt': position_value,
                    'estimated_avg_price': estimated_avg_price,
                    'pnl_usdt': pnl_usdt,
                    'pnl_percent': pnl_percent,
                    '24h_change': self.get_24h_change(symbol),
                    'free': free,
                    'locked': locked
                }
                
                portfolio_data['positions'].append(position_data)
                portfolio_data['total_usdt_value'] += position_value
                portfolio_data['total_pnl_usdt'] += pnl_usdt
                portfolio_data['total_positions'] += 1
                
                if pnl_usdt > 0:
                    portfolio_data['profitable_positions'] += 1
                else:
                    portfolio_data['losing_positions'] += 1
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ª—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if pnl_percent > best_pnl:
                    best_pnl = pnl_percent
                    portfolio_data['best_performer'] = position_data
                
                if pnl_percent < worst_pnl:
                    worst_pnl = pnl_percent
                    portfolio_data['worst_performer'] = position_data
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç P&L
            if portfolio_data['total_usdt_value'] > 0:
                portfolio_data['total_pnl_percent'] = (
                    portfolio_data['total_pnl_usdt'] / 
                    (portfolio_data['total_usdt_value'] - portfolio_data['total_pnl_usdt'])
                ) * 100
            
            return portfolio_data
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {}
    
    def get_account_full_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = self.mex_api.get_account_info()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            open_orders = self.mex_api.get_open_orders()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—Ä–¥–µ—Ä–æ–≤)
            trade_history = self.get_trade_history()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_pnl = {}
            if 'balances' in account_info:
                portfolio_pnl = self.calculate_portfolio_pnl(account_info['balances'])
            
            return {
                'account_info': account_info,
                'open_orders': open_orders,
                'trade_history': trade_history,
                'portfolio_pnl': portfolio_pnl,
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {e}")
            return {}
    
    def get_trade_history(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–æ—Ä–≥–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            timestamp = int(time.time() * 1000)
            query_string = f'ttimestamp={timestamp}'
            
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ MexAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            return []
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤: {e}")
            return []
    
    def format_portfolio_report(self, account_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        try:
            if not account_data:
                return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è"
            
            account_info = account_data.get('account_info', {})
            portfolio_pnl = account_data.get('portfolio_pnl', {})
            open_orders = account_data.get('open_orders', [])
            
            message = "<b>üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ü–û–†–¢–§–ï–õ–Ø MEXCAITRADE</b>\n"
            message += "=" * 50 + "\n\n"
            
            # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += "<b>üí∞ –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n"
            message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"üè¶ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info.get('accountType', 'SPOT')}\n"
            message += f"üîì –†–∞–∑—Ä–µ—à–µ–Ω–∏—è: {', '.join(account_info.get('permissions', []))}\n\n"
            
            # P&L –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if portfolio_pnl:
                total_value = portfolio_pnl.get('total_usdt_value', 0)
                total_pnl = portfolio_pnl.get('total_pnl_usdt', 0)
                total_pnl_percent = portfolio_pnl.get('total_pnl_percent', 0)
                
                message += "<b>üìà P&L –ü–û–†–¢–§–ï–õ–Ø:</b>\n"
                message += f"üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:.2f} USDT\n"
                
                pnl_emoji = "üü¢" if total_pnl >= 0 else "üî¥"
                message += f"{pnl_emoji} –û–±—â–∏–π P&L: ${total_pnl:.2f} USDT ({total_pnl_percent:+.2f}%)\n"
                
                profitable = portfolio_pnl.get('profitable_positions', 0)
                losing = portfolio_pnl.get('losing_positions', 0)
                total_pos = portfolio_pnl.get('total_positions', 0)
                
                message += f"üìä –ü–æ–∑–∏—Ü–∏–π: {total_pos} (üü¢ {profitable} | üî¥ {losing})\n\n"
                
                # –õ—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                best = portfolio_pnl.get('best_performer')
                worst = portfolio_pnl.get('worst_performer')
                
                if best:
                    message += "<b>üèÜ –õ–£–ß–®–ê–Ø –ü–û–ó–ò–¶–ò–Ø:</b>\n"
                    message += f"  {best['asset']}: +${best['pnl_usdt']:.2f} ({best['pnl_percent']:+.2f}%)\n"
                
                if worst:
                    message += f"<b>üìâ –•–£–î–®–ê–Ø –ü–û–ó–ò–¶–ò–Ø:</b>\n"
                    message += f"  {worst['asset']}: {worst['pnl_usdt']:.2f} ({worst['pnl_percent']:+.2f}%)\n"
                
                message += "\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–π
            if portfolio_pnl and portfolio_pnl.get('positions'):
                message += "<b>üìã –î–ï–¢–ê–õ–ò –ü–û–ó–ò–¶–ò–ô:</b>\n"
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ P&L
                positions = sorted(portfolio_pnl['positions'], 
                                 key=lambda x: x['pnl_percent'], reverse=True)
                
                for i, pos in enumerate(positions[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                    pnl_emoji = "üü¢" if pos['pnl_percent'] >= 0 else "üî¥"
                    change_emoji = "üìà" if pos.get('24h_change', 0) >= 0 else "üìâ"
                    
                    message += f"{i+1}. {pnl_emoji} {pos['asset']}:\n"
                    message += f"   üí∞ {pos['quantity']:.4f} √ó ${pos['current_price']:.4f}\n"
                    message += f"   üíµ ${pos['position_value_usdt']:.2f} USDT\n"
                    message += f"   üìä P&L: ${pos['pnl_usdt']:.2f} ({pos['pnl_percent']:+.2f}%)\n"
                    
                    if pos.get('24h_change') is not None:
                        message += f"   {change_emoji} 24—á: {pos['24h_change']:+.2f}%\n"
                    
                    message += "\n"
                
                if len(positions) > 10:
                    message += f"... –∏ –µ—â–µ {len(positions) - 10} –ø–æ–∑–∏—Ü–∏–π\n\n"
            
            # –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            if open_orders:
                message += "<b>üìã –û–¢–ö–†–´–¢–´–ï –û–†–î–ï–†–ê:</b>\n"
                for order in open_orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    side_emoji = "üü¢" if order['side'] == 'BUY' else "üî¥"
                    message += f"{side_emoji} {order['symbol']}: {order['side']} {float(order['origQty']):.4f} @ ${float(order['price']):.6f}\n"
                
                if len(open_orders) > 5:
                    message += f"... –∏ –µ—â–µ {len(open_orders) - 5} –æ—Ä–¥–µ—Ä–æ–≤\n"
                
                message += "\n"
            
            # –ë–∞–ª–∞–Ω—Å USDT
            usdt_balance = 0.0
            if 'balances' in account_info:
                for balance in account_info['balances']:
                    if balance['asset'] == 'USDT':
                        usdt_balance = float(balance['free'])
                        break
            
            message += f"<b>üíµ –ë–ê–õ–ê–ù–° USDT:</b> ${usdt_balance:.2f}\n\n"
            
            # –°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏
            can_trade = account_info.get('canTrade', False)
            can_withdraw = account_info.get('canWithdraw', False)
            can_deposit = account_info.get('canDeposit', False)
            
            message += "<b>üîß –°–¢–ê–¢–£–° –¢–û–†–ì–û–í–õ–ò:</b>\n"
            message += f"üìà –¢–æ—Ä–≥–æ–≤–ª—è: {'‚úÖ' if can_trade else '‚ùå'}\n"
            message += f"üí∏ –í—ã–≤–æ–¥: {'‚úÖ' if can_withdraw else '‚ùå'}\n"
            message += f"üí≥ –î–µ–ø–æ–∑–∏—Ç: {'‚úÖ' if can_deposit else '‚ùå'}\n\n"
            
            message += "=" * 50 + "\n"
            message += "<b>üöÄ MEXCAITRADE - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê</b>\n"
            
            return message
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"
    
    def send_portfolio_report(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ"""
        try:
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            account_data = self.get_account_full_info()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.format_portfolio_report(account_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            result = self.send_telegram_message(report)
            
            if result and result.get('ok'):
                print("‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {e}")
            return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_portfolio_analyzer():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    analyzer = PortfolioAnalyzer()
    analyzer.send_portfolio_report()

if __name__ == "__main__":
    test_portfolio_analyzer() 