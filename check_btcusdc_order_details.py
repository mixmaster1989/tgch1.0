#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–æ–≤ BTCUSDC
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∏—Å—Å–∏–∏, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
"""

import sys
import logging
from datetime import datetime
from typing import Dict, List, Optional
from mex_api import MexAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class BTCOrderAnalyzer:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ä–¥–µ—Ä–æ–≤ BTCUSDC"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.symbol = 'BTCUSDC'
        
    def get_order_details(self, order_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–¥–µ—Ä–µ
            timestamp = int(datetime.now().timestamp() * 1000)
            query_string = f'symbol={self.symbol}&orderId={order_id}&timestamp={timestamp}'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = self.mex_api._generate_signature(query_string)
            url = f"{self.mex_api.base_url}/api/v3/order?{query_string}&signature={signature}"
            
            response = self.mex_api._make_request_with_retry('GET', url, headers=self.mex_api._get_headers(True))
            
            if response and 'orderId' in response:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ {order_id}")
                return response
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order_id}: {response}")
                return {}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ—Ä–¥–µ—Ä–∞: {e}")
            return {}
    
    def analyze_order_execution(self, order: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            if not order:
                return {}
            
            order_id = order.get('orderId', 'N/A')
            side = order.get('side', 'N/A')
            status = order.get('status', 'N/A')
            symbol = order.get('symbol', 'N/A')
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            orig_qty = float(order.get('origQty', 0))
            executed_qty = float(order.get('executedQty', 0))
            cummulative_quote_qty = float(order.get('cummulativeQuoteQty', 0))
            
            # –¶–µ–Ω—ã
            price = float(order.get('price', 0))
            avg_price = float(order.get('avgPrice', 0)) if order.get('avgPrice') else 0
            
            # –ö–æ–º–∏—Å—Å–∏–∏
            commission = float(order.get('commission', 0))
            commission_asset = order.get('commissionAsset', 'N/A')
            
            # –í—Ä–µ–º—è
            time_ms = int(order.get('time', 0))
            update_time_ms = int(order.get('updateTime', 0))
            
            time_str = datetime.fromtimestamp(time_ms/1000).strftime('%d.%m.%Y %H:%M:%S')
            update_time_str = datetime.fromtimestamp(update_time_ms/1000).strftime('%d.%m.%Y %H:%M:%S')
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_percent = (executed_qty / orig_qty * 100) if orig_qty > 0 else 0
            remaining_qty = orig_qty - executed_qty
            
            # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–Ω—ã
            if executed_qty > 0 and cummulative_quote_qty > 0:
                effective_price = cummulative_quote_qty / executed_qty
            else:
                effective_price = price
            
            return {
                'order_id': order_id,
                'side': side,
                'status': status,
                'symbol': symbol,
                'orig_qty': orig_qty,
                'executed_qty': executed_qty,
                'remaining_qty': remaining_qty,
                'execution_percent': execution_percent,
                'price': price,
                'avg_price': avg_price,
                'effective_price': effective_price,
                'cummulative_quote_qty': cummulative_quote_qty,
                'commission': commission,
                'commission_asset': commission_asset,
                'time': time_str,
                'update_time': update_time_str,
                'time_ms': time_ms,
                'update_time_ms': update_time_ms
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return {}
    
    def format_order_report(self, order_analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –æ—Ä–¥–µ—Ä–µ"""
        try:
            if not order_analysis:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
            message = f"<b>üìã –î–ï–¢–ê–õ–ò –û–†–î–ï–†–ê {order_analysis['symbol']}</b>\n"
            message += "=" * 50 + "\n\n"
            
            message += f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_analysis['order_id']}\n"
            message += f"üìä –°—Ç–æ—Ä–æ–Ω–∞: {order_analysis['side']}\n"
            message += f"üìà –°—Ç–∞—Ç—É—Å: {order_analysis['status']}\n"
            message += f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order_analysis['time']}\n"
            message += f"üîÑ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {order_analysis['update_time']}\n\n"
            
            message += "<b>üí∞ –ö–û–õ–ò–ß–ï–°–¢–í–û:</b>\n"
            message += f"   –ò—Å—Ö–æ–¥–Ω–æ–µ: {order_analysis['orig_qty']:.6f} BTC\n"
            message += f"   –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {order_analysis['executed_qty']:.6f} BTC\n"
            message += f"   –û—Å—Ç–∞–ª–æ—Å—å: {order_analysis['remaining_qty']:.6f} BTC\n"
            message += f"   –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {order_analysis['execution_percent']:.1f}%\n\n"
            
            message += "<b>üíµ –¶–ï–ù–´:</b>\n"
            message += f"   –£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${order_analysis['price']:.2f} USDC\n"
            message += f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${order_analysis['avg_price']:.2f} USDC\n"
            message += f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞: ${order_analysis['effective_price']:.2f} USDC\n"
            message += f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${order_analysis['cummulative_quote_qty']:.2f} USDC\n\n"
            
            message += "<b>üí∏ –ö–û–ú–ò–°–°–ò–ò:</b>\n"
            message += f"   –°—É–º–º–∞: {order_analysis['commission']:.6f} {order_analysis['commission_asset']}\n"
            
            if order_analysis['commission'] > 0:
                commission_percent = (order_analysis['commission'] / order_analysis['cummulative_quote_qty'] * 100) if order_analysis['cummulative_quote_qty'] > 0 else 0
                message += f"   –í % –æ—Ç —Å–¥–µ–ª–∫–∏: {commission_percent:.4f}%\n"
            
            message += "\n" + "=" * 50 + "\n"
            message += "<b>üìã –î–ï–¢–ê–õ–ò –û–†–î–ï–†–ê</b>"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def analyze_recent_orders(self, limit: int = 10) -> None:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        try:
            print(f"üöÄ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–†–î–ï–†–û–í {self.symbol}")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            orders = self.mex_api.get_order_history(symbol=self.symbol, limit=limit)
            
            if not orders or 'code' in orders:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤")
                return
            
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –æ—Ä–¥–µ—Ä–æ–≤")
            print()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
            for i, order in enumerate(orders, 1):
                order_id = order.get('orderId', 'N/A')
                side = order.get('side', 'N/A')
                status = order.get('status', 'N/A')
                executed_qty = float(order.get('executedQty', 0))
                price = float(order.get('price', 0))
                commission = float(order.get('commission', 0))
                time_str = datetime.fromtimestamp(int(order.get('time', 0))/1000).strftime('%d.%m %H:%M:%S')
                
                print(f"üîç –û–†–î–ï–† #{i}: {order_id}")
                print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {side}")
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {executed_qty:.6f} BTC")
                print(f"   –¶–µ–Ω–∞: ${price:.2f} USDC")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è: {commission:.6f}")
                print(f"   –í—Ä–µ–º—è: {time_str}")
                
                # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏
                if status == 'FILLED' and executed_qty > 0:
                    print(f"   üìã –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏...")
                    details = self.get_order_details(order_id)
                    if details:
                        analysis = self.analyze_order_execution(details)
                        if analysis:
                            print(f"   ‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                            print(f"      –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞: ${analysis['effective_price']:.2f} USDC")
                            print(f"      –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${analysis['cummulative_quote_qty']:.2f} USDC")
                            if analysis['commission'] > 0:
                                commission_percent = (analysis['commission'] / analysis['cummulative_quote_qty'] * 100) if analysis['cummulative_quote_qty'] > 0 else 0
                                print(f"      –ö–æ–º–∏—Å—Å–∏—è: {analysis['commission']:.6f} {analysis['commission_asset']} ({commission_percent:.4f}%)")
                        else:
                            print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
                    else:
                        print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏")
                
                print()
            
            print("=" * 60)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = BTCOrderAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ä–¥–µ—Ä–æ–≤
    analyzer.analyze_recent_orders(limit=10)

if __name__ == "__main__":
    main() 