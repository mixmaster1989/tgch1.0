#!/usr/bin/env python3
"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–©–ò –ü–†–û–ï–ö–¢–ê MEXCAITRADE
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ 3 –º–æ–Ω–µ—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
"""

import asyncio
import json
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from comprehensive_data_manager import ComprehensiveDataManager
from perplexity_analyzer import PerplexityAnalyzer
from technical_indicators import TechnicalIndicators
from correlation_analyzer import CorrelationAnalyzer
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

class PowerDemoScript:
    def __init__(self):
        self.data_manager = ComprehensiveDataManager()
        self.perplexity = PerplexityAnalyzer()
        self.technical_indicators = TechnicalIndicators()
        self.correlation_analyzer = CorrelationAnalyzer()
        
        # –í—ã–±–∏—Ä–∞–µ–º 3 –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self.demo_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.telegram_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
    async def collect_comprehensive_data(self, symbol: str) -> Dict:
        """–°–±–æ—Ä –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª—É"""
        print(f"üîç –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        data = {
            'symbol': symbol,
            'timestamp': datetime.now().isoformat(),
            'market_data': None,
            'technical_indicators': None,
            'news_data': None,
            'correlations': None,
            'orderbook': None,
            'trade_history': None
        }
        
        try:
            # 1. –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.data_manager.get_market_data(symbol)
            if market_data:
                data['market_data'] = {
                    'price': market_data.price,
                    'change_24h': market_data.change_24h,
                    'volume_24h': market_data.volume_24h,
                    'high_24h': market_data.high_24h,
                    'low_24h': market_data.low_24h
                }
            
            # 2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.data_manager.get_technical_indicators(symbol, '1m')
            if indicators:
                data['technical_indicators'] = indicators.to_dict()
            
            # 3. –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Perplexity
            try:
                news_data = await self.perplexity.collect_coin_data(symbol)
                if news_data:
                    data['news_data'] = news_data
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
            
            # 4. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            correlations = self.data_manager.get_correlation_data(symbol)
            if correlations:
                data['correlations'] = correlations
            
            # 5. Order Book
            orderbook = self.data_manager.get_orderbook_data(symbol)
            if orderbook:
                data['orderbook'] = orderbook.to_dict()
            
            # 6. –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
            trade_history = self.data_manager.get_trade_history(symbol)
            if trade_history:
                data['trade_history'] = trade_history.to_dict()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        
        return data
    
    def format_market_data(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not data.get('market_data'):
            return "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        md = data['market_data']
        change_emoji = "üìà" if md['change_24h'] > 0 else "üìâ" if md['change_24h'] < 0 else "‚û°Ô∏è"
        
        return f"""
üí∞ **–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï**
{change_emoji} –¶–µ–Ω–∞: ${md['price']:.6f}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {md['change_24h']:.2f}%
üìà –ú–∞–∫—Å–∏–º—É–º 24—á: ${md['high_24h']:.6f}
üìâ –ú–∏–Ω–∏–º—É–º 24—á: ${md['low_24h']:.6f}
üíé –û–±—ä–µ–º 24—á: ${md['volume_24h']:,.0f}"""
    
    def format_technical_indicators(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if not data.get('technical_indicators'):
            return "‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        ti = data['technical_indicators']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        rsi_signal = "üü¢ –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if ti['rsi_14'] < 30 else "üî¥ –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if ti['rsi_14'] > 70 else "üü° –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        
        macd_signal = "üü¢ –ë—ã—á–∏–π" if ti['macd']['histogram'] > 0 else "üî¥ –ú–µ–¥–≤–µ–∂–∏–π"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        current_price = data.get('market_data', {}).get('price', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Bollinger Bands
        bollinger = ti.get('bollinger', {})
        if isinstance(bollinger, dict) and 'lower' in bollinger and 'upper' in bollinger:
            bb_position = "üü¢ –ù–∏–∂–Ω—è—è –ø–æ–ª–æ—Å–∞" if current_price <= bollinger['lower'] else "üî¥ –í–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ—Å–∞" if current_price >= bollinger['upper'] else "üü° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞"
        else:
            bb_position = "üü° –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞"
        
        return f"""
üìä **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´**
üî¢ RSI (14): {ti['rsi_14']:.2f} {rsi_signal}
üìà SMA (20): ${ti['sma_20']:.6f}
üìä EMA (12): ${ti['ema_12']:.6f}
üéØ MACD: {macd_signal} (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {ti['macd']['histogram']:.2f})
üìè Bollinger Bands: {bb_position}
üìä ATR (14): {ti['atr_14']:.6f}
üìà Volume SMA: {ti['volume_sma']:.2f}"""
    
    def format_news_data(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not data.get('news_data'):
            return "‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        news = data['news_data']
        sentiment_emoji = {
            'positive': 'üü¢',
            'negative': 'üî¥', 
            'neutral': 'üü°'
        }.get(news.get('social_sentiment', 'neutral'), 'üü°')
        
        result = f"""
üì∞ **–ù–û–í–û–°–¢–ù–û–ô –ê–ù–ê–õ–ò–ó (Perplexity AI)**
{sentiment_emoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {news.get('social_sentiment', 'neutral').title()}
üéØ –í–ª–∏—è–Ω–∏–µ: {news.get('impact_score', 0):.2f}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        recent_news = news.get('recent_news', [])
        if recent_news:
            result += "\n\nüì∞ **–ü–û–°–õ–ï–î–ù–ò–ï –ù–û–í–û–°–¢–ò:**"
            for i, news_item in enumerate(recent_news[:3], 1):
                impact_emoji = "üü¢" if news_item.get('impact') == 'positive' else "üî¥" if news_item.get('impact') == 'negative' else "üü°"
                result += f"\n{i}. {impact_emoji} {news_item.get('title', 'N/A')[:50]}..."
        
        return result
    
    def format_correlations(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        if not data.get('correlations'):
            return "‚ùå –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        corr = data['correlations']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        def get_correlation_strength(corr_value):
            if abs(corr_value) > 0.8:
                return "üî¥ –°–∏–ª—å–Ω–∞—è"
            elif abs(corr_value) > 0.5:
                return "üü° –°—Ä–µ–¥–Ω—è—è"
            else:
                return "üü¢ –°–ª–∞–±–∞—è"
        
        return f"""
üîó **–ö–û–†–†–ï–õ–Ø–¶–ò–û–ù–ù–´–ô –ê–ù–ê–õ–ò–ó**
üìä BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {corr.get('correlation_btc', 0):.3f} {get_correlation_strength(corr.get('correlation_btc', 0))}
üìà ETH –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {corr.get('correlation_eth', 0):.3f} {get_correlation_strength(corr.get('correlation_eth', 0))}
üìä –†–∞–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {corr.get('volatility_rank', 0)}
üéØ –°–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {corr.get('correlation_strength', 'neutral')}"""
    
    def format_orderbook(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        if not data.get('orderbook'):
            return "‚ùå Order Book –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        ob = data['orderbook']
        
        return f"""
üìö **–°–¢–ê–ö–ê–ù –ó–ê–Ø–í–û–ö (Order Book)**
üí∞ –°–ø—Ä–µ–¥: ${ob['spread']:.6f} ({ob['spread_percent']:.2f}%)
üìä Bid –æ–±—ä–µ–º: {ob['bid_volume']:.2f}
üìà Ask –æ–±—ä–µ–º: {ob['ask_volume']:.2f}
‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {ob['volume_ratio']:.2f}
üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {ob['liquidity_score']:.2f}"""
    
    def format_trade_history(self, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        if not data.get('trade_history'):
            return "‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        th = data['trade_history']
        
        return f"""
üí± **–ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö**
üìä –ü–æ–∫—É–ø–∫–∏: {th['buy_volume']:.2f}
üìà –ü—Ä–æ–¥–∞–∂–∏: {th['sell_volume']:.2f}
‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {th['volume_ratio']:.2f}
üìä –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {th['avg_trade_size']:.2f}"""
    
    def create_comprehensive_report(self, symbol_data: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        symbol = symbol_data['symbol']
        
        report = f"""
üöÄ **–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó {symbol}** üöÄ
{'='*50}

{self.format_market_data(symbol_data)}

{self.format_technical_indicators(symbol_data)}

{self.format_correlations(symbol_data)}

{self.format_orderbook(symbol_data)}

{self.format_trade_history(symbol_data)}

{self.format_news_data(symbol_data)}

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {symbol_data['timestamp']}
{'='*50}"""
        
        return report
    
    async def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=30)
            
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ú–û–©–ò –ü–†–û–ï–ö–¢–ê")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("üîå –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await self.data_manager.start()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
        await self.data_manager.subscribe_multiple_symbols(self.demo_symbols)
        
        # –ñ–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (45 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(45)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        all_reports = []
        
        for symbol in self.demo_symbols:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol_data = await self.collect_comprehensive_data(symbol)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = self.create_comprehensive_report(symbol_data)
            all_reports.append(report)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            await asyncio.sleep(5)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"""
üéØ **–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–û–©–ò MEXCAITRADE** üéØ
ü§ñ **–ò–ò + –ê–õ–ì–û–†–ò–¢–ú–ò–ö–ê + REAL-TIME –î–ê–ù–ù–´–ï**

üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(self.demo_symbols)}
üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: MEX API + Perplexity AI + WebSocket
‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'='*60}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –≤ Telegram...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        await self.send_telegram_message(header)
        await asyncio.sleep(2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        for i, report in enumerate(all_reports, 1):
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ {i}/{len(all_reports)}...")
            await self.send_telegram_message(report)
            await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        footer = f"""
üèÜ **–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê** üèÜ

‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(self.demo_symbols)} —Å–∏–º–≤–æ–ª–æ–≤
‚úÖ –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ: –†—ã–Ω–æ—á–Ω—ã–µ + –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ + –ù–æ–≤–æ—Å—Ç–Ω—ã–µ + –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: MEX API + Perplexity AI + WebSocket + PostgreSQL + Redis
‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}

üöÄ **MEXCAITRADE - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê** üöÄ

üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ üìä Real-time –¥–∞–Ω–Ω—ã–µ —Å MEX
‚Ä¢ ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Perplexity
‚Ä¢ üìà –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ üíæ –ù–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

üéØ –ì–æ—Ç–æ–≤–æ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ! üéØ
"""
        
        await self.send_telegram_message(footer)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await self.data_manager.stop()
        
        print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = PowerDemoScript()
    await demo.run_demo()

if __name__ == "__main__":
    asyncio.run(main()) 