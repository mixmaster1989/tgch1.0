#!/usr/bin/env python3
"""
–ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –ø–∏–∫–∞—Ö
–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR, RSI –∏ EMA
"""

import numpy as np
from typing import Dict, List, Optional
from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
import logging

logger = logging.getLogger(__name__)

class AntiHypeFilter:
    def __init__(self):
        self.mex_api = MexAPI()
        self.tech_indicators = TechnicalIndicators()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ - –£–°–ò–õ–ï–ù–´ –ù–ê 10% –î–õ–Ø –ê–õ–¨–¢-–°–ï–ó–û–ù–ê
        self.atr_impulse_multiplier = 2.7  # –£—Å–∏–ª–µ–Ω–æ —Å 3.0 (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–º–ø—É–ª—å—Å–∞)
        self.atr_dca_multiplier = 1.8      # –£—Å–∏–ª–µ–Ω–æ —Å 2.0 (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π DCA)
        self.rsi_overbought = 58           # –£—Å–∏–ª–µ–Ω–æ —Å 65 (–±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏)
        self.rsi_oversold = 50             # –£—Å–∏–ª–µ–Ω–æ —Å 45 (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏)
        self.rsi_neutral = 50              # –£—Å–∏–ª–µ–Ω–æ —Å 55 (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI)
        self.ema_deviation = 0.027         # –£—Å–∏–ª–µ–Ω–æ —Å 0.03 (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç EMA20)
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –§–ò–õ–¨–¢–† –ü–†–û–¢–ò–í –•–ê–ô–ü–ê - –ó–ê–ü–†–ï–¢ –ü–û–ö–£–ü–û–ö –ë–õ–ò–ó–ö–û –ö –î–ù–ï–í–ù–û–ú–£ –•–ê–Æ
        self.daily_high_safety_margin = 0.01  # 1% –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–∞—è
        self.daily_high_block_threshold = 0.002  # 0.2% –æ—Ç —Ö–∞—è = –ø–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        
        # –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = {}
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        # –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.result_cache = {}
        self.result_cache_ttl = 120  # 2 –º–∏–Ω—É—Ç—ã –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    def _get_klines_cached(self, symbol: str, interval: str, limit: int = 100) -> List:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        cache_key = f"{symbol}_{interval}_{limit}"
        
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        klines = self.mex_api.get_klines(symbol, interval, limit)
        self.cache[cache_key] = klines
        return klines
    
    def _calculate_atr(self, klines: List, period: int = 14) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å ATR (Average True Range)"""
        if len(klines) < period + 1:
            return 0.0
        
        try:
            highs = [float(k[2]) for k in klines[-period-1:]]
            lows = [float(k[3]) for k in klines[-period-1:]]
            closes = [float(k[4]) for k in klines[-period-1:]]
            
            true_ranges = []
            for i in range(1, len(highs)):
                tr1 = highs[i] - lows[i]
                tr2 = abs(highs[i] - closes[i-1])
                tr3 = abs(lows[i] - closes[i-1])
                true_ranges.append(max(tr1, tr2, tr3))
            
            return sum(true_ranges) / len(true_ranges) if true_ranges else 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return 0.0
    
    def _calculate_rsi(self, klines: List, period: int = 14) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSI"""
        if len(klines) < period + 1:
            return 50.0
        
        try:
            closes = [float(k[4]) for k in klines[-period-1:]]
            
            gains = []
            losses = []
            
            for i in range(1, len(closes)):
                change = closes[i] - closes[i-1]
                if change > 0:
                    gains.append(change)
                    losses.append(0)
                else:
                    gains.append(0)
                    losses.append(abs(change))
            
            avg_gain = sum(gains) / len(gains) if gains else 0
            avg_loss = sum(losses) / len(losses) if losses else 0
            
            if avg_loss == 0:
                return 100.0
            
            rs = avg_gain / avg_loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ RSI: {e}")
            return 50.0
    
    def _calculate_ema(self, klines: List, period: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å EMA"""
        if len(klines) < period:
            return 0.0
        
        try:
            closes = [float(k[4]) for k in klines[-period:]]
            multiplier = 2 / (period + 1)
            ema = closes[0]
            
            for close in closes[1:]:
                ema = (close * multiplier) + (ema * (1 - multiplier))
            
            return ema
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ EMA: {e}")
            return 0.0
    
    def _get_price_change_4h(self, klines_4h: List) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 4 —á–∞—Å–∞ –≤ %"""
        if len(klines_4h) < 2:
            return 0.0
        
        try:
            current_price = float(klines_4h[-1][4])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            price_4h_ago = float(klines_4h[-2][4])   # –¶–µ–Ω–∞ 4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            
            change_percent = ((current_price - price_4h_ago) / price_4h_ago) * 100
            return change_percent
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 0.0
    
    def _get_cached_result(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        import time
        cache_key = f"result_{symbol}"
        if cache_key in self.result_cache:
            cached_time, result = self.result_cache[cache_key]
            if time.time() - cached_time < self.result_cache_ttl:
                return result
            else:
                del self.result_cache[cache_key]
        return None
    
    def _cache_result(self, symbol: str, result: Dict):
        """–ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        import time
        cache_key = f"result_{symbol}"
        self.result_cache[cache_key] = (time.time(), result)
    
    def _check_daily_high_protection(self, symbol: str, current_price: float) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–∫—É–ø–æ–∫ –±–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ö–∞—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –°–ï–ì–û–î–ù–Ø–®–ù–ï–ì–û –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–∞—è
            hourly_klines = self._get_klines_cached(symbol, '1h', 24)
            if not hourly_klines or len(hourly_klines) < 1:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                return {'blocked': False, 'reason': 'no_hourly_data'}
            
            # –ù–∞—Ö–æ–¥–∏–º –°–ï–ì–û–î–ù–Ø–®–ù–ò–ô –¥–Ω–µ–≤–Ω–æ–π —Ö–∞–π –∏–∑ —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
            daily_high = max([float(k[2]) for k in hourly_klines])  # high price
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ö–∞—è
            distance_from_high = (daily_high - current_price) / daily_high
            distance_percent = distance_from_high * 100
            
            logger.info(f"üìä {symbol}: –¥–Ω–µ–≤–Ω–æ–π —Ö–∞–π=${daily_high:.4f}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞=${current_price:.4f}, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è={distance_percent:.2f}%")
            
            # –ü–æ–ª–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ —Ö–∞—é
            if distance_from_high < self.daily_high_block_threshold:
                logger.warning(f"üö´ {symbol}: –ü–û–õ–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê! –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ö–∞—é: {distance_percent:.2f}% < {self.daily_high_block_threshold*100:.1f}%")
                return {
                    'blocked': True, 
                    'reason': f'daily_high_too_close_{distance_percent:.1f}%',
                    'daily_high': daily_high,
                    'current_price': current_price,
                    'distance_percent': distance_percent,
                    'block_type': 'full_block'
                }
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ —Ö–∞—é
            if distance_from_high < self.daily_high_safety_margin:
                logger.warning(f"‚ö†Ô∏è {symbol}: –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï! –ë–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ö–∞—é: {distance_percent:.2f}% < {self.daily_high_safety_margin*100:.1f}%")
                return {
                    'blocked': False, 
                    'reason': f'daily_high_close_{distance_percent:.1f}%',
                    'daily_high': daily_high,
                    'current_price': current_price,
                    'distance_percent': distance_percent,
                    'block_type': 'restriction',
                    'multiplier': 0.3  # –°–∏–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                }
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞
            logger.info(f"‚úÖ {symbol}: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–∞—è: {distance_percent:.2f}%")
            return {
                'blocked': False, 
                'reason': f'daily_high_safe_{distance_percent:.1f}%',
                'daily_high': daily_high,
                'current_price': current_price,
                'distance_percent': distance_percent,
                'block_type': 'safe',
                'multiplier': 1.0
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–∞—è –¥–ª—è {symbol}: {e}")
            return {'blocked': False, 'reason': 'daily_high_check_error'}
    
    def check_buy_permission(self, symbol: str) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        cached_result = self._get_cached_result(symbol)
        if cached_result:
            logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {symbol}")
            return cached_result
        
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
            klines_1h = self._get_klines_cached(symbol, '1h', 50)
            klines_4h = self._get_klines_cached(symbol, '4h', 50)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 4h
            
            # Fallback –Ω–∞ 15m –µ—Å–ª–∏ 1h/4h –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            if not klines_1h:
                klines_1h = self._get_klines_cached(symbol, '15m', 50)
            if not klines_4h:
                klines_4h = self._get_klines_cached(symbol, '60m', 50)  # Fallback –Ω–∞ 60m
            
            if not klines_1h or not klines_4h:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                result = {'allowed': True, 'multiplier': 1.0, 'reason': 'no_data'}
                self._cache_result(symbol, result)
                return result
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = float(klines_1h[-1][4])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –ø–æ–∫—É–ø–æ–∫ –±–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–º—É —Ö–∞—é
            daily_high_protection = self._check_daily_high_protection(symbol, current_price)
            if daily_high_protection['blocked']:
                logger.warning(f"üö´ {symbol}: {daily_high_protection['reason']}")
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–Ω–µ–≤–Ω–æ–º —Ö–∞–µ –¥–ª—è Telegram
                result = {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': daily_high_protection['reason'],
                    'daily_high': daily_high_protection['daily_high'],
                    'current_price': daily_high_protection['current_price'],
                    'distance_percent': daily_high_protection['distance_percent'],
                    'block_type': 'daily_high_full_block'
                }
                self._cache_result(symbol, result)
                return result
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–∞—è –µ—Å–ª–∏ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            daily_high_multiplier = daily_high_protection.get('multiplier', 1.0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            atr_4h = self._calculate_atr(klines_4h, 14)
            rsi_1h = self._calculate_rsi(klines_1h, 14)
            ema20_1h = self._calculate_ema(klines_1h, 20)
            ema200_4h = self._calculate_ema(klines_4h, 200)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 4 —á–∞—Å–∞
            price_change_4h = self._get_price_change_4h(klines_4h)
            
            logger.info(f"üìä {symbol}: —Ü–µ–Ω–∞=${current_price:.4f}, ATR={atr_4h:.4f}, RSI={rsi_1h:.1f}")
            logger.info(f"üìä {symbol}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ 4—á={price_change_4h:.2f}%, EMA20=${ema20_1h:.4f}")
            
            # 1. –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–£–õ–¨–°–ê –í–í–ï–†–• (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            atr_threshold = (atr_4h / current_price) * 100 * self.atr_impulse_multiplier
            if price_change_4h > atr_threshold:
                result = {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'hype_block_impulse_{price_change_4h:.1f}%',
                    'daily_high': daily_high_protection.get('daily_high'),
                    'current_price': current_price,
                    'distance_percent': daily_high_protection.get('distance_percent'),
                    'block_type': 'impulse_block'
                }
                logger.warning(f"üö´ {symbol}: –ò–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö {price_change_4h:.2f}% > {atr_threshold:.2f}% (3√óATR)")
                self._cache_result(symbol, result)
                return result
            
            # 2. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–£–ü–õ–ï–ù–ù–û–°–¢–ò (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            if rsi_1h > self.rsi_overbought and current_price > ema20_1h * (1 + self.ema_deviation):
                result = {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': f'hype_block_overbought_RSI{rsi_1h:.0f}',
                    'daily_high': daily_high_protection.get('daily_high'),
                    'current_price': current_price,
                    'distance_percent': daily_high_protection.get('distance_percent'),
                    'block_type': 'overbought_block'
                }
                logger.warning(f"üö´ {symbol}: –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å RSI={rsi_1h:.1f} –∏ —Ü–µ–Ω–∞ –≤—ã—à–µ EMA20+3%")
                self._cache_result(symbol, result)
                return result
            
            # 3. –ü–†–û–í–ï–†–ö–ê –ú–ï–î–í–ï–ñ–¨–ï–ì–û –¢–†–ï–ù–î–ê (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
            if current_price < ema200_4h:
                result = {
                    'allowed': False, 
                    'multiplier': 0.0, 
                    'reason': 'bear_trend_below_ema200',
                    'daily_high': daily_high_protection.get('daily_high'),
                    'current_price': current_price,
                    'distance_percent': daily_high_protection.get('distance_percent'),
                    'block_type': 'bear_trend_block'
                }
                logger.warning(f"üö´ {symbol}: –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA200 (–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥)")
                self._cache_result(symbol, result)
                return result
            
            # 4. –ü–†–û–í–ï–†–ö–ê DCA –ù–ê –ü–ê–î–ï–ù–ò–ò (—É—Å–∏–ª–µ–Ω–∏–µ)
            atr_dca_threshold = (atr_4h / current_price) * 100 * self.atr_dca_multiplier
            if price_change_4h < -atr_dca_threshold and rsi_1h < self.rsi_oversold:
                final_multiplier = 2.0 * daily_high_multiplier
                result = {
                    'allowed': True, 
                    'multiplier': final_multiplier, 
                    'reason': f'dca_boost_fall_{abs(price_change_4h):.1f}%',
                    'daily_high': daily_high_protection.get('daily_high'),
                    'current_price': current_price,
                    'distance_percent': daily_high_protection.get('distance_percent'),
                    'block_type': 'dca_boost'
                }
                logger.info(f"üöÄ {symbol}: DCA —É—Å–∏–ª–µ–Ω–∏–µ! –ü–∞–¥–µ–Ω–∏–µ {price_change_4h:.2f}% –∏ RSI={rsi_1h:.1f}, –º–Ω–æ–∂–∏—Ç–µ–ª—å={final_multiplier:.2f}")
                self._cache_result(symbol, result)
                return result
            
            # 5. –ë–ê–ó–û–í–´–ï –ü–û–ö–£–ü–ö–ò (–Ω–æ—Ä–º–∞)
            if rsi_1h < self.rsi_neutral:
                final_multiplier = 1.0 * daily_high_multiplier
                result = {
                    'allowed': True, 
                    'multiplier': final_multiplier, 
                    'reason': f'normal_buy_RSI{rsi_1h:.0f}',
                    'daily_high': daily_high_protection.get('daily_high'),
                    'current_price': current_price,
                    'distance_percent': daily_high_protection.get('distance_percent'),
                    'block_type': 'normal_buy'
                }
                logger.info(f"‚úÖ {symbol}: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞, RSI={rsi_1h:.1f}, –º–Ω–æ–∂–∏—Ç–µ–ª—å={final_multiplier:.2f}")
                self._cache_result(symbol, result)
                return result
            
            # 6. –ù–ï–ô–¢–†–ê–õ–¨–ù–ê–Ø –ó–û–ù–ê (–Ω–µ–±–æ–ª—å—à–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
            final_multiplier = 0.7 * daily_high_multiplier
            logger.info(f"‚ö†Ô∏è {symbol}: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞, RSI={rsi_1h:.1f}, –º–Ω–æ–∂–∏—Ç–µ–ª—å={final_multiplier:.2f}")
            result = {
                'allowed': True, 
                'multiplier': final_multiplier, 
                'reason': f'neutral_zone_RSI{rsi_1h:.0f}',
                'daily_high': daily_high_protection.get('daily_high'),
                'current_price': current_price,
                'distance_percent': daily_high_protection.get('distance_percent'),
                'block_type': 'neutral_zone'
            }
            self._cache_result(symbol, result)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {symbol}: {e}")
            result = {
                'allowed': True, 
                'multiplier': 1.0, 
                'reason': 'error_fallback',
                'daily_high': None,
                'current_price': None,
                'distance_percent': None,
                'block_type': 'error_fallback'
            }
            self._cache_result(symbol, result)
            return result
    
    def get_filter_status(self, symbols: List[str]) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        results = {}
        for symbol in symbols:
            results[symbol] = self.check_buy_permission(symbol)
        return results