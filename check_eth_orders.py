#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤ ETH –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
"""

from datetime import datetime, timedelta
from mex_api import MexAPI
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_eth_orders():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ ETH –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç"""
    
    api = MexAPI()
    symbol = "ETHUSDT"
    
    # –í—Ä–µ–º—è 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    start_time = datetime.now() - timedelta(minutes=10)
    start_timestamp = int(start_time.timestamp() * 1000)
    
    print(f"üîç –ü–†–û–í–ï–†–ö–ê –û–†–î–ï–†–û–í ETH –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 10 –ú–ò–ù–£–¢")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M:%S')}")
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –æ—Ä–¥–µ—Ä–æ–≤)
        orders = api.get_order_history(symbol, limit=100)
        
        if not orders:
            print("üìã –û—Ä–¥–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(orders)}")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ä–¥–µ—Ä
        buy_orders = []
        sell_orders = []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–¥–µ—Ä–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_timestamp = int(today_start.timestamp() * 1000)
        
        for order in orders:
            order_time = datetime.fromtimestamp(order['time'] / 1000)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –Ω–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if order['time'] < today_timestamp:
                continue
            order_time = datetime.fromtimestamp(order['time'] / 1000)
            side = order['side']
            status = order['status']
            quantity = float(order['executedQty'])
            price = float(order['price'])
            
            print(f"üìã {order_time.strftime('%H:%M:%S')} | {side} | {status}")
            print(f"   üí∞ –¶–µ–Ω–∞: ${price:.2f} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f} ETH")
            print(f"   üíµ –°—É–º–º–∞: ${quantity * price:.2f}")
            print()
            
            if side == 'BUY' and status == 'FILLED':
                buy_orders.append(order)
            elif side == 'SELL' and status == 'FILLED':
                sell_orders.append(order)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 30)
        print(f"üü¢ –ü–æ–∫—É–ø–∫–∏: {len(buy_orders)}")
        print(f"üî¥ –ü—Ä–æ–¥–∞–∂–∏: {len(sell_orders)}")
        
        if buy_orders and sell_orders:
            print("‚úÖ –ë–´–õ–ò –ò –ü–û–ö–£–ü–ö–ò, –ò –ü–†–û–î–ê–ñ–ò!")
        elif buy_orders:
            print("üü¢ –¢–û–õ–¨–ö–û –ü–û–ö–£–ü–ö–ò")
        elif sell_orders:
            print("üî¥ –¢–û–õ–¨–ö–û –ü–†–û–î–ê–ñ–ò")
        else:
            print("‚ö™ –ù–ï–¢ –ò–°–ü–û–õ–ù–ï–ù–ù–´–• –û–†–î–ï–†–û–í")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

if __name__ == "__main__":
    check_eth_orders()
