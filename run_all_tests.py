#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
"""

import asyncio
import subprocess
import sys
import time

async def run_test(test_file: str, description: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"\n{'='*60}")
    print(f"üß™ –¢–ï–°–¢: {description}")
    print(f"üìÅ –§–∞–π–ª: {test_file}")
    print(f"{'='*60}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        result = subprocess.run(
            [sys.executable, test_file],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n{result.stderr}")
            
        success = result.returncode == 0
        
        if success:
            print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {description}")
        else:
            print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {description}")
            
        return success
        
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–ï–°–¢ –ü–†–ï–†–í–ê–ù –ü–û –¢–ê–ô–ú–ê–£–¢–£: {description}")
        return False
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –¢–ï–°–¢–ê: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú")
    print("=" * 60)
    
    tests = [
        ("test_ssl_fix.py", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSL –ø—Ä–æ–±–ª–µ–º"),
        ("test_websocket_stability.py", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å WebSocket"),
        ("test_correlation_cache.py", "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"),
        ("test_fallback_strategy.py", "Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è"),
        ("test_error_handling.py", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    ]
    
    results = {}
    start_time = time.time()
    
    for test_file, description in tests:
        try:
            success = await run_test(test_file, description)
            results[description] = success
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(2)
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {description}: {e}")
            results[description] = False
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    total_time = time.time() - start_time
    passed_tests = sum(1 for success in results.values() if success)
    total_tests = len(results)
    
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–û–í")
    print(f"{'='*60}")
    
    for description, success in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {status}: {description}")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests/total_tests*100:.1f}%")
    print(f"  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    if passed_tests == total_tests:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 