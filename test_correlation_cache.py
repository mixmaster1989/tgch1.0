#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
"""

import asyncio
import aiohttp
import ssl
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List

class CorrelationCache:
    def __init__(self):
        self.price_history = {}  # symbol -> [prices]
        self.correlation_data = {}  # symbol -> correlation_data
        self.max_history_size = 100
        
    async def fetch_price_data(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ REST API"""
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        connector = aiohttp.TCPConnector(ssl=ssl_context)
        
        try:
            async with aiohttp.ClientSession(connector=connector) as session:
                url = "https://api.mexc.com/api/v3/ticker/24hr"
                params = {'symbol': symbol}
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        return float(data['lastPrice'])
                    else:
                        print(f"‚ùå HTTP {response.status} –¥–ª—è {symbol}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return None
            
    def add_price(self, symbol: str, price: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if symbol not in self.price_history:
            self.price_history[symbol] = []
            
        self.price_history[symbol].append({
            'price': price,
            'timestamp': datetime.now()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.price_history[symbol]) > self.max_history_size:
            self.price_history[symbol] = self.price_history[symbol][-self.max_history_size:]
            
        print(f"üí∞ {symbol}: ${price:.2f} (–∏—Å—Ç–æ—Ä–∏—è: {len(self.price_history[symbol])})")
        
    def calculate_correlation(self, symbol1: str, symbol2: str) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–∏–º–≤–æ–ª–∞–º–∏"""
        if symbol1 not in self.price_history or symbol2 not in self.price_history:
            return 0.0
            
        prices1 = [p['price'] for p in self.price_history[symbol1]]
        prices2 = [p['price'] for p in self.price_history[symbol2]]
        
        # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        min_len = min(len(prices1), len(prices2))
        if min_len < 5:
            return 0.0
            
        prices1 = prices1[-min_len:]
        prices2 = prices2[-min_len:]
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        try:
            mean1 = sum(prices1) / len(prices1)
            mean2 = sum(prices2) / len(prices2)
            
            numerator = sum((p1 - mean1) * (p2 - mean2) for p1, p2 in zip(prices1, prices2))
            denominator1 = sum((p1 - mean1) ** 2 for p1 in prices1)
            denominator2 = sum((p2 - mean2) ** 2 for p2 in prices2)
            
            if denominator1 == 0 or denominator2 == 0:
                return 0.0
                
            correlation = numerator / (denominator1 * denominator2) ** 0.5
            return max(-1.0, min(1.0, correlation))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º [-1, 1]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
            return 0.0
            
    def get_correlation_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if symbol not in self.price_history:
            return {
                'symbol': symbol,
                'btc_correlation': 0.0,
                'eth_correlation': 0.0,
                'volatility_rank': 0,
                'correlation_strength': 'neutral',
                'data_points': 0
            }
            
        data_points = len(self.price_history[symbol])
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å BTC –∏ ETH
        btc_correlation = self.calculate_correlation(symbol, 'BTCUSDT')
        eth_correlation = self.calculate_correlation(symbol, 'ETHUSDT')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–ª—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        max_correlation = max(abs(btc_correlation), abs(eth_correlation))
        if max_correlation > 0.7:
            strength = 'strong'
        elif max_correlation > 0.3:
            strength = 'moderate'
        else:
            strength = 'weak'
            
        return {
            'symbol': symbol,
            'btc_correlation': btc_correlation,
            'eth_correlation': eth_correlation,
            'volatility_rank': data_points,
            'correlation_strength': strength,
            'data_points': data_points
        }
        
    def get_all_correlations(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        symbols = list(self.price_history.keys())
        correlations = {}
        
        for symbol in symbols:
            correlations[symbol] = self.get_correlation_data(symbol)
            
        return correlations

async def test_correlation_cache():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
    print("üìä –¢–ï–°–¢ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 50)
    
    cache = CorrelationCache()
    symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
    
    try:
        print("üì° –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
        start_time = time.time()
        collection_duration = 30
        
        while time.time() - start_time < collection_duration:
            for symbol in symbols:
                price = await cache.fetch_price_data(symbol)
                if price:
                    cache.add_price(symbol, price)
                    
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(2)
            
        print(f"\nüìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
        for symbol in symbols:
            if symbol in cache.price_history:
                print(f"  {symbol}: {len(cache.price_history[symbol])} —Ç–æ—á–µ–∫")
                
        print(f"\nüîó –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:")
        correlations = cache.get_all_correlations()
        
        for symbol, data in correlations.items():
            print(f"  {symbol}:")
            print(f"    BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {data['btc_correlation']:.3f}")
            print(f"    ETH –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {data['eth_correlation']:.3f}")
            print(f"    –°–∏–ª–∞: {data['correlation_strength']}")
            print(f"    –¢–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {data['data_points']}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        sufficient_data = all(data['data_points'] >= 5 for data in correlations.values())
        
        if sufficient_data:
            print("\n‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π!")
            return True
        else:
            print("\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_correlation_cache()) 