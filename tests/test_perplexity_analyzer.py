#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
"""

import asyncio
import json
from perplexity_analyzer import PerplexityAnalyzer

async def test_perplexity_analyzer():
    """–¢–µ—Å—Ç Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("=== –¢–ï–°–¢ PERPLEXITY –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê ===")
    
    try:
        analyzer = PerplexityAnalyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ ETH
        symbol = "ETHUSDT"
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ {symbol}...")
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("üìä –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        comprehensive = await analyzer.get_comprehensive_analysis(symbol)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {comprehensive['symbol']}")
        print(f"   –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {comprehensive['overall_sentiment']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {comprehensive['overall_confidence']:.2f}")
        print(f"   Impact Score: {comprehensive['impact_score']:.2f}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–æ–≤–æ—Å—Ç–µ–π
        if "news_analysis" in comprehensive and comprehensive["news_analysis"]:
            news_data = comprehensive["news_analysis"]["news_analysis"]
            print(f"   üì∞ –ù–æ–≤–æ—Å—Ç–∏: {news_data.get('sentiment', 'N/A')}")
            print(f"   üìä Market Outlook: {news_data.get('market_outlook', 'N/A')}")
            if "key_events" in news_data:
                print(f"   üìÖ –ö–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(news_data['key_events'])}")
                for i, event in enumerate(news_data['key_events'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"     {i+1}. {event.get('title', 'N/A')}")
                    print(f"        Impact: {event.get('impact', 'N/A')}, Sentiment: {event.get('sentiment', 'N/A')}")
                    print(f"        Summary: {event.get('summary', 'N/A')}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        if "sentiment_analysis" in comprehensive and comprehensive["sentiment_analysis"]:
            sentiment_data = comprehensive["sentiment_analysis"]["sentiment_analysis"]
            print(f"   üòä –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {sentiment_data.get('social_sentiment', 'N/A')}")
            print(f"   üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∏: {sentiment_data.get('analyst_sentiment', 'N/A')}")
            print(f"   üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {sentiment_data.get('correlation_analysis', 'N/A')}")
            print(f"   üìù Summary: {sentiment_data.get('summary', 'N/A')}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if "technical_analysis" in comprehensive and comprehensive["technical_analysis"]:
            tech_data = comprehensive["technical_analysis"]["technical_analysis"]
            print(f"   ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä: {tech_data.get('technical_score', 'N/A')}")
            if "on_chain_metrics" in tech_data:
                on_chain = tech_data["on_chain_metrics"]
                print(f"   üîó On-chain: –∞–¥—Ä–µ—Å–∞={on_chain.get('active_addresses', 'N/A')}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏={on_chain.get('large_transactions', 'N/A')}")
            if "defi_metrics" in tech_data:
                defi = tech_data["defi_metrics"]
                print(f"   üè¶ DeFi: TVL={defi.get('tvl_trend', 'N/A')}, Volume={defi.get('volume_trend', 'N/A')}")
            print(f"   üìä –ê–Ω–∞–ª–∏–∑: {tech_data.get('analysis', 'N/A')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è {symbol}...")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
        print("üì∞ –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news = await analyzer.analyze_coin_news(symbol)
        if news:
            print(f"   ‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã: {news.get('news_analysis', {}).get('sentiment', 'N/A')}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        print("üòä –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π...")
        sentiment = await analyzer.analyze_market_sentiment(symbol)
        if sentiment:
            print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {sentiment.get('sentiment_analysis', {}).get('social_sentiment', 'N/A')}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π")
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        print("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        technical = await analyzer.analyze_technical_factors(symbol)
        if technical:
            print(f"   ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω: {technical.get('technical_analysis', {}).get('technical_score', 'N/A')}")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer.close()
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_multiple_symbols():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    print("\n=== –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í ===")
    
    try:
        analyzer = PerplexityAnalyzer()
        
        symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT"]
        
        for symbol in symbols:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π
            news = await analyzer.analyze_coin_news(symbol)
            if news and "news_analysis" in news:
                sentiment = news["news_analysis"].get("sentiment", "N/A")
                confidence = news["news_analysis"].get("confidence", 0)
                print(f"   üì∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
        
        analyzer.close()
        print(f"\n‚úÖ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    async def run_tests():
        success1 = await test_perplexity_analyzer()
        success2 = await test_multiple_symbols()
        
        if success1 and success2:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    asyncio.run(run_tests())
