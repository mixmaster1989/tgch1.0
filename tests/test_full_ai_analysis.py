#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
from datetime import datetime
from comprehensive_data_manager import comprehensive_data_manager, MarketData, DataSource
from perplexity_analyzer import PerplexityAnalyzer
from ai_trading_analyzer import AITradingAnalyzer
import json

def safe_json_dumps(obj, indent=3, ensure_ascii=False):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    try:
        return json.dumps(obj, indent=indent, ensure_ascii=ensure_ascii)
    except TypeError:
        # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
        if hasattr(obj, '__dict__'):
            return json.dumps(obj.__dict__, indent=indent, ensure_ascii=ensure_ascii)
        else:
            return json.dumps(str(obj), indent=indent, ensure_ascii=ensure_ascii)

async def test_full_ai_analysis():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ETHUSDT...")
        await comprehensive_data_manager.start()
        await comprehensive_data_manager.subscribe_multiple_symbols(["ETHUSDT"])
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        await asyncio.sleep(3)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("   üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–¥–∏–Ω —Ä–∞–∑)...")
        market_data = comprehensive_data_manager.get_market_data("ETHUSDT")
        if market_data:
            print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: ${market_data.price}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Perplexity (—Ä–µ–∞–ª—å–Ω—ã–µ)
        print("üîç –ê–Ω–∞–ª–∏–∑ ETHUSDT —á–µ—Ä–µ–∑ Perplexity...")
        perplexity = PerplexityAnalyzer()
        perplexity_data = await perplexity.get_comprehensive_analysis("ETHUSDT")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        indicators = comprehensive_data_manager.get_technical_indicators("ETHUSDT", "1m")
        if indicators:
            print(f"   ‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"      RSI: {indicators.rsi_14:.2f}")
            print(f"      SMA: {indicators.sma_20:.2f}")
            print(f"      MACD: {indicators.macd}")
        else:
            print("   ‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º orderbook
        orderbook = await comprehensive_data_manager.get_orderbook_data("ETHUSDT")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlations = comprehensive_data_manager.get_correlation_data("ETHUSDT")
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ô AI –ê–ù–ê–õ–ò–ó–ê–¢–û–†
        print("ü§ñ –ê–Ω–∞–ª–∏–∑ ETHUSDT - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        ai_analyzer = AITradingAnalyzer()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_data = ai_analyzer.prepare_data_for_analysis(market_data, perplexity_data)
        
        print("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤...")
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        trading_decision = await ai_analyzer.analyze_and_decide(market_data, perplexity_data)
        
        print("üë®‚Äçüíº –†–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:")
        expert_responses = trading_decision.get('expert_analysis', {}).get('responses', [])
        for response in expert_responses:
            if isinstance(response, dict):
                expert_name = response.get('expert', 'UNKNOWN')
                decision = response.get('decision', 'UNKNOWN')
                confidence = response.get('confidence', 0.0)
                print(f"   {expert_name}: {decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            else:
                print(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response}")
        
        print("‚öñÔ∏è –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏...")
        final_decision = trading_decision.get('final_decision', {})
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {final_decision.get('final_decision', 'UNKNOWN')} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision.get('confidence', 0.0):.2f})")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"full_ai_analysis_ETHUSDT_{timestamp}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("=== –ü–û–õ–ù–´–ô AI –ê–ù–ê–õ–ò–ó ETHUSDT ===\n")
            f.write(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write("–¢–∏–ø —Ç–µ—Å—Ç–∞: full_ai_analysis_with_real_data\n\n")
            
            # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            f.write("üìä –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:\n")
            f.write(f"   –°–∏–º–≤–æ–ª: {market_data.symbol}\n")
            f.write(f"   –¶–µ–Ω–∞: ${market_data.price}\n")
            f.write(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.change_24h}%\n")
            f.write(f"   –û–±—ä–µ–º 24—á: ${market_data.volume_24h:,.0f}\n")
            f.write(f"   –ú–∞–∫—Å–∏–º—É–º 24—á: ${market_data.high_24h}\n")
            f.write(f"   –ú–∏–Ω–∏–º—É–º 24—á: ${market_data.low_24h}\n")
            f.write(f"   –í—Ä–µ–º—è: {market_data.timestamp}\n\n")
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            f.write("üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:\n")
            if indicators:
                f.write(f"   ‚úÖ RSI (14): {indicators.rsi_14:.2f}\n")
                f.write(f"   ‚úÖ SMA (20): {indicators.sma_20:.2f}\n")
                f.write(f"   ‚úÖ EMA (12): {indicators.ema_12:.2f}\n")
                f.write(f"   ‚úÖ MACD: {indicators.macd}\n")
                f.write(f"   ‚úÖ Bollinger: {indicators.bollinger}\n")
                f.write(f"   ‚úÖ ATR (14): {indicators.atr_14:.2f}\n")
                f.write(f"   ‚úÖ Volume SMA: {indicators.volume_sma:.2f}\n")
            else:
                f.write("   ‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
            f.write("\n")
            
            # Orderbook
            f.write("üìö ORDERBOOK –î–ê–ù–ù–´–ï:\n")
            if orderbook:
                f.write(f"   –°–ø—Ä–µ–¥: ${orderbook.spread:.6f}\n")
                f.write(f"   –°–ø—Ä–µ–¥ %: {orderbook.spread_percent:.4f}%\n")
                f.write(f"   –û–±—ä–µ–º bids: ${orderbook.bid_volume:.2f}\n")
                f.write(f"   –û–±—ä–µ–º asks: ${orderbook.ask_volume:.2f}\n")
                f.write(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {orderbook.volume_ratio:.2f}\n")
                f.write(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {orderbook.liquidity_score:.2f}\n")
            else:
                f.write("   ‚ùå Orderbook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n")
            f.write("\n")
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            f.write("üîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò:\n")
            f.write(f"   {safe_json_dumps(correlations)}\n\n")
            
            # Perplexity –∞–Ω–∞–ª–∏–∑
            f.write("üîç –ê–ù–ê–õ–ò–ó PERPLEXITY:\n")
            f.write(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {perplexity_data.get('overall_sentiment', 'N/A')}\n")
            f.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {perplexity_data.get('overall_confidence', 'N/A')}\n")
            f.write(f"   Impact Score: {perplexity_data.get('impact_score', 'N/A')}\n\n")
            
            # –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï PERPLEXITY (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if perplexity_data:
                f.write("üìÑ –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï PERPLEXITY:\n")
                f.write(f"   {safe_json_dumps(perplexity_data)}\n\n")
            
            # –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
            f.write("ü§ñ –¢–û–†–ì–û–í–û–ï –†–ï–®–ï–ù–ò–ï:\n")
            f.write(f"   –†–µ—à–µ–Ω–∏–µ: {final_decision.get('final_decision', 'UNKNOWN')}\n")
            f.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision.get('confidence', 0.0):.2f}\n")
            f.write(f"   –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {final_decision.get('confidence', 0.0) > 0.7}\n\n")
            
            # –ü–†–û–ú–ü–¢–´ –ò –û–¢–í–ï–¢–´ AI –≠–ö–°–ü–ï–†–¢–û–í (–µ—Å–ª–∏ –µ—Å—Ç—å)
            expert_analysis = trading_decision.get('expert_analysis', {})
            if expert_analysis:
                f.write("ü§ñ –ü–†–û–ú–ü–¢–´ –ò –û–¢–í–ï–¢–´ AI –≠–ö–°–ü–ï–†–¢–û–í:\n")
                
                # –ü—Ä–æ–º–ø—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                expert_prompts = expert_analysis.get('prompts', {})
                if expert_prompts:
                    f.write("üìù –ü–†–û–ú–ü–¢–´ –≠–ö–°–ü–ï–†–¢–û–í:\n")
                    for expert_name, prompt in expert_prompts.items():
                        f.write(f"   üîç {expert_name.upper()}:\n")
                        f.write(f"   {prompt}\n\n")
                
                # –û—Ç–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
                expert_responses = expert_analysis.get('responses', [])
                if expert_responses:
                    f.write("üì• –û–¢–í–ï–¢–´ –≠–ö–°–ü–ï–†–¢–û–í:\n")
                    for response in expert_responses:
                        if isinstance(response, dict):
                            expert_name = response.get('expert', 'UNKNOWN')
                            f.write(f"   üîç {expert_name.upper()}:\n")
                            f.write(f"   {safe_json_dumps(response)}\n\n")
                        else:
                            f.write(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response}\n\n")
                
                # –ü—Ä–æ–º–ø—Ç –∏ –æ—Ç–≤–µ—Ç —Å—É–¥—å–∏
                judge_analysis = trading_decision.get('judge_analysis', {})
                if judge_analysis:
                    f.write("‚öñÔ∏è –ü–†–û–ú–ü–¢ –ò –û–¢–í–ï–¢ –°–£–î–¨–ò:\n")
                    
                    judge_prompt = judge_analysis.get('prompt', 'N/A')
                    f.write("üìù –ü–†–û–ú–ü–¢ –°–£–î–¨–ò:\n")
                    f.write(f"   {judge_prompt}\n\n")
                    
                    judge_response = judge_analysis.get('response', {})
                    f.write("üì• –û–¢–í–ï–¢ –°–£–î–¨–ò:\n")
                    f.write(f"   {safe_json_dumps(judge_response)}\n\n")
            
            # –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
            f.write("üë®‚Äçüíº –ö–†–ê–¢–ö–ò–ï –†–ï–®–ï–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–û–í:\n")
            expert_responses = trading_decision.get('expert_analysis', {}).get('responses', [])
            for response in expert_responses:
                if isinstance(response, dict):
                    expert_name = response.get('expert', 'UNKNOWN')
                    decision = response.get('decision', 'UNKNOWN')
                    confidence = response.get('confidence', 0.0)
                    f.write(f"   {expert_name}: {decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})\n")
                else:
                    f.write(f"   –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response}\n")
            
            f.write("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù\n")
        
        print(f"üíæ –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: {filename}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await comprehensive_data_manager.stop()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –§–∞–π–ª: {filename}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {final_decision.get('final_decision', 'UNKNOWN')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision.get('confidence', 0.0):.2f}")
        print(f"   –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {final_decision.get('confidence', 0.0) > 0.7}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º AI –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_full_ai_analysis())
