#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import asyncio
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from comprehensive_data_manager import ComprehensiveDataManager

async def test_comprehensive_data_manager():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –¢–ï–°–¢ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    manager = ComprehensiveDataManager()
    
    # –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    market_updates = 0
    account_updates = 0
    news_updates = 0
    
    # Callbacks –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    async def market_callback(data):
        nonlocal market_updates
        market_updates += 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 —Ä–∞–∑
        if market_updates % 10 == 0:
            print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö #{market_updates}: {len(data)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ –æ–±—ä–µ–º—É —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 30 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            if market_updates % 30 == 0 and data:
                top_symbols = sorted(data.items(), 
                                   key=lambda x: x[1].quote_volume_24h if hasattr(x[1], 'quote_volume_24h') else 0, 
                                   reverse=True)[:3]
                for symbol, market_data in top_symbols:
                    print(f"  {symbol}: ${market_data.price:.6f} (–æ–±—ä–µ–º: ${market_data.quote_volume_24h:,.0f})")
    
    async def account_callback(data):
        nonlocal account_updates
        account_updates += 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 5 —Ä–∞–∑
        if account_updates % 5 == 0:
            print(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ #{account_updates}: ${data.total_usdt:.2f} USDT")
            print(f"  –ü–æ–∑–∏—Ü–∏–π: {len(data.positions)}")
            for pos in data.positions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"    {pos['asset']}: {pos['quantity']:.6f}")
    
    async def news_callback(data):
        nonlocal news_updates
        news_updates += 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 3 —Ä–∞–∑–∞
        if news_updates % 3 == 0:
            print(f"üì∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π #{news_updates}: {data.symbol}")
            print(f"  –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {data.sentiment}, –í–ª–∏—è–Ω–∏–µ: {data.impact_score:.2f}")
            if data.news:
                print(f"  –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å: {data.news[0].get('title', 'N/A')[:50]}...")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    manager.subscribe_market_updates(market_callback)
    manager.subscribe_account_updates(account_callback)
    manager.subscribe_news_updates(news_callback)
    
    try:
        print("üîå –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await manager.start()
        
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã...")
        await manager.subscribe_multiple_symbols(['BTCUSDT', 'ETHUSDT', 'ADAUSDT'])
        
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (90 —Å–µ–∫—É–Ω–¥)...")
        print("=" * 60)
        
        # –ñ–¥–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        start_time = datetime.now()
        await asyncio.sleep(90)
        end_time = datetime.now()
        
        print("=" * 60)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´:")
        print(f"  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {(end_time - start_time).total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {market_updates}")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞: {account_updates}")
        print(f"  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π: {news_updates}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = manager.get_market_data()
        print(f"  –†—ã–Ω–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(market_data)}")
        
        # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        candidates = manager.get_trading_candidates(min_volume=50000)
        print(f"  –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(candidates)}")
        if candidates:
            print("  –¢–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:")
            for i, candidate in enumerate(candidates[:3], 1):
                print(f"    {i}. {candidate['symbol']}: ${candidate['price']:.6f} (—Å–∫–æ—Ä: {candidate['score']:.1f})")
        
        # –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        account_data = manager.get_account_data()
        if account_data:
            print(f"  –ë–∞–ª–∞–Ω—Å USDT: ${account_data.total_usdt:.2f}")
            print(f"  –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(account_data.positions)}")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio = manager.get_portfolio_summary()
        if portfolio:
            print(f"  –ü–æ—Ä—Ç—Ñ–µ–ª—å: ${portfolio.get('total_usdt', 0):.2f} USDT")
            print(f"  –ü–æ–∑–∏—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {portfolio.get('positions_count', 0)}")
        
        # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        news_data = manager.get_news_data()
        print(f"  –ù–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(news_data)}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        await manager.stop()

async def test_data_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    manager = ComprehensiveDataManager()
    
    try:
        await manager.start()
        await asyncio.sleep(10)  # –ñ–¥–µ–º –ø–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = manager.get_market_data()
        if market_data:
            print("‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            sample_data = next(iter(market_data.values()))
            required_fields = ['symbol', 'price', 'change_24h', 'volume_24h', 'quote_volume_24h']
            
            for field in required_fields:
                if hasattr(sample_data, field):
                    print(f"  ‚úÖ –ü–æ–ª–µ {field}: OK")
                else:
                    print(f"  ‚ùå –ü–æ–ª–µ {field}: MISSING")
        else:
            print("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        account_data = manager.get_account_data()
        if account_data:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            print(f"  –ë–∞–ª–∞–Ω—Å USDT: ${account_data.total_usdt:.2f}")
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüì° –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:")
        if market_data:
            sources = set(data.source.value for data in market_data.values())
            print(f"  –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(sources)}")
        
        if account_data:
            print(f"  –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_data.source.value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False
        
    finally:
        await manager.stop()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    test1_ok = await test_comprehensive_data_manager()
    
    # –¢–µ—Å—Ç 2: –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    test2_ok = await test_data_quality()
    
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {'‚úÖ OK' if test1_ok else '‚ùå FAIL'}")
    print(f"  –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if test2_ok else '‚ùå FAIL'}")
    
    if test1_ok and test2_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    asyncio.run(main()) 