#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫
"""

import asyncio
import json
import time
from datetime import datetime
from mexc_websocket_client import MEXCWebSocketClient, StreamType

async def test_trades_stream():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —Å–¥–µ–ª–æ–∫"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEB SOCKET –ü–û–¢–û–ö–ê –°–î–ï–õ–û–ö")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
    client = MEXCWebSocketClient()
    
    # –°—á–µ—Ç—á–∏–∫–∏
    trade_count = 0
    orderbook_count = 0
    
    async def trade_callback(trade_data):
        """Callback –¥–ª—è —Å–¥–µ–ª–æ–∫"""
        nonlocal trade_count
        trade_count += 1
        print(f"üí± TRADE #{trade_count}: {trade_data}")
    
    async def orderbook_callback(orderbook):
        """Callback –¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        nonlocal orderbook_count
        orderbook_count += 1
        if orderbook_count % 10 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            print(f"üìö ORDERBOOK #{orderbook_count}: –°–ø—Ä–µ–¥ ${orderbook.get_spread():.4f}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        print("üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
        await client.connect()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç –æ—Ä–¥–µ—Ä–±—É–∫–∞
        print("üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞...")
        await client.load_order_book_snapshot("ETHUSDT")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫
        print("üìö –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫...")
        await client.subscribe(
            StreamType.DEPTH,
            "ETHUSDT",
            interval="100ms",
            callback=orderbook_callback
        )
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–¥–µ–ª–∫–∏
        print("üí± –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏...")
        await client.subscribe(
            StreamType.TRADES,
            "ETHUSDT",
            interval="100ms",
            callback=trade_callback
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {list(client.subscriptions.keys())}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º listen —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        print("üéß –ó–∞–ø—É—Å–∫ listen —Ü–∏–∫–ª–∞...")
        listen_task = asyncio.create_task(client.listen())
        
        # –ñ–¥–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥)...")
        print("   (–û—Ä–¥–µ—Ä–±—É–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Ä–∞–∑)")
        print()
        
        start_time = time.time()
        while time.time() - start_time < 30:
            await asyncio.sleep(1)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            elapsed = int(time.time() - start_time)
            if elapsed % 5 == 0:
                print(f"üìä {elapsed}—Å: –û—Ä–¥–µ—Ä–±—É–∫={orderbook_count}, –°–¥–µ–ª–∫–∏={trade_count}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º listen —Ü–∏–∫–ª
        client.is_running = False
        listen_task.cancel()
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        print(f"   –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 30 —Å–µ–∫—É–Ω–¥")
        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞: {orderbook_count}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trade_count}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–±—É–∫–∞: {orderbook_count/30:.1f} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π/—Å–µ–∫")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å —Å–¥–µ–ª–æ–∫: {trade_count/30:.1f} —Å–¥–µ–ª–æ–∫/—Å–µ–∫")
        
        if trade_count == 0:
            print("\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–¥–µ–ª–∫–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - MEXC –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ —Å–¥–µ–ª–æ–∫")
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö")
        else:
            print(f"\n‚úÖ –£–°–ü–ï–•: –ü–æ–ª—É—á–µ–Ω–æ {trade_count} —Å–¥–µ–ª–æ–∫!")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.disconnect()
        print("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        try:
            await client.disconnect()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(test_trades_stream()) 