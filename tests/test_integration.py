#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
"""

import logging
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        from mex_api import MexAPI
        logger.info("‚úÖ MexAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from balance_monitor import BalanceMonitor
        logger.info("‚úÖ BalanceMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from pnl_monitor import PnLMonitor
        logger.info("‚úÖ PnLMonitor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from native_trader_bot import NativeTraderBot
        logger.info("‚úÖ NativeTraderBot –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from config import PNL_MONITOR_CONFIG
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PnL –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        from auto_purchase_config import get_config
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
        
        from mex_api import MexAPI
        api = MexAPI()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        account_info = api.get_account_info()
        if 'balances' in account_info:
            logger.info(f"‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(account_info['balances'])} –±–∞–ª–∞–Ω—Å–æ–≤")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_pnl_monitor():
    """–¢–µ—Å—Ç PnL –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞...")
        
        from pnl_monitor import PnLMonitor
        monitor = PnLMonitor()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status = monitor.get_current_status()
        logger.info(f"‚úÖ PnL –º–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±—â–∏–π PnL: ${status['total_pnl']:.4f}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return False

def test_balance_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞...")
        
        from balance_monitor import BalanceMonitor
        monitor = BalanceMonitor()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT
        usdt_balance = monitor.get_usdt_balance()
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, USDT: ${usdt_balance:.2f}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

def test_configurations():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    try:
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        
        from config import PNL_MONITOR_CONFIG
        from auto_purchase_config import get_config
        
        # –¢–µ—Å—Ç PnL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info(f"‚úÖ PnL –ø–æ—Ä–æ–≥: ${PNL_MONITOR_CONFIG['profit_threshold']}")
        logger.info(f"‚úÖ PnL –∏–Ω—Ç–µ—Ä–≤–∞–ª: {PNL_MONITOR_CONFIG['check_interval']} —Å–µ–∫")
        
        # –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–æ–∫—É–ø–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        auto_config = get_config()
        balance_config = auto_config['balance_monitor']
        logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏ –ø–æ—Ä–æ–≥: ${balance_config['min_balance_threshold']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MEXCAITRADE")
    logger.info("=" * 60)
    logger.info(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now()}")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API", test_api_connection),
        ("PnL –º–æ–Ω–∏—Ç–æ—Ä", test_pnl_monitor),
        ("–ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞", test_balance_monitor),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_configurations),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüîç {test_name}...")
        if test_func():
            passed += 1
            logger.info(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    logger.info("\n" + "=" * 60)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É.")
        logger.info("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 main.py")
        return True
    else:
        logger.error("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 