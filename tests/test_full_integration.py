#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
from active_50_50_balancer import Active5050Balancer
from market_scanner import MarketScanner
from alt_monitor import AltsMonitor
from portfolio_balancer import PortfolioBalancer

async def test_full_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π USDT ‚Üí USDC
    print("\n1Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö –° –ö–û–ù–í–ï–†–¢–ê–¶–ò–ï–ô:")
    balancer = Active5050Balancer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if hasattr(balancer, 'btc_eth_balancer'):
        print("   ‚úÖ BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("   ‚ùå BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º market_scanner —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú MARKET_SCANNER –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò:")
    scanner = MarketScanner()
    
    if hasattr(scanner, 'balancer'):
        print("   ‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ market_scanner")
    else:
        print("   ‚ùå –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ market_scanner")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º alt_monitor —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú ALT_MONITOR –° –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø–ú–ò:")
    monitor = AltsMonitor()
    
    if hasattr(monitor, 'balancer'):
        print("   ‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ alt_monitor")
    else:
        print("   ‚ùå –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ alt_monitor")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º PortfolioBalancer
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú PORTFOLIO_BALANCER:")
    portfolio_balancer = PortfolioBalancer()
    
    print(f"   üìä –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: BTC {portfolio_balancer.target_btc_ratio*100:.0f}% / ETH {portfolio_balancer.target_eth_ratio*100:.0f}%")
    print(f"   üìà –ü–æ—Ä–æ–≥ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {portfolio_balancer.rebalance_threshold*100:.0f}%")
    print(f"   üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${portfolio_balancer.min_rebalance_amount}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–≤–µ—Å–∞ –∞–ª—å—Ç–æ–≤
    print("\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –°–¶–ï–ù–ê–†–ò–ô –ü–ï–†–ï–í–ï–°–ê –ê–õ–¨–¢–û–í:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–µ—Å –∞–ª—å—Ç–æ–≤
    def mock_portfolio_alts_overweight():
        return {
            'alts_value': 600.0,      # 60% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
            'btceth_value': 400.0,    # 40% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è  
            'btceth_value_usdt': 400.0,
            'total_value': 1000.0,
            'usdc_usdt_rate': 1.0
        }
    
    balancer.get_portfolio_values = mock_portfolio_alts_overweight
    balancer.get_usdc_balance = lambda: 100.0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∞–ª—å—Ç–æ–≤
    permission = balancer.check_purchase_permission(50.0, "ALTS")
    
    print(f"   üìä –ê–ª—å—Ç—ã: 60.0% (–ø–µ—Ä–µ–≤–µ—Å!)")
    print(f"   üìä BTC/ETH: 40.0%")
    print(f"   üö´ –†–∞–∑—Ä–µ—à–µ–Ω–æ: {permission['allowed']}")
    print(f"   üìù –ü—Ä–∏—á–∏–Ω–∞: {permission['reason']}")
    
    if not permission['allowed']:
        print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–∫—É–ø–∫–∞ –∞–ª—å—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–µ—Å–µ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        balance_plan = balancer.calculate_balance_needed()
        if balance_plan and balance_plan['action'] == 'BUY_BTCETH_USDC':
            print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∫—É–ø–∏—Ç—å BTC/ETH")
            print(f"   üí∞ –°—É–º–º–∞: ${balance_plan['amount']:.2f}")
        else:
            print("   ‚ùå –û–®–ò–ë–ö–ê: –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É BTC/ETH")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüìã –ò–¢–û–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê:")
    print("   1. –ó–∞–∫—É–ø—â–∏–∫–∏ –∞–ª—å—Ç–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞")
    print("   2. –ü—Ä–∏ –ø–µ—Ä–µ–≤–µ—Å–µ –∞–ª—å—Ç–æ–≤ (>50%) - –ø–æ–∫—É–ø–∫–∞ –ë–õ–û–ö–ò–†–£–ï–¢–°–Ø")
    print("   3. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç USDT ‚Üí USDC")
    print("   4. –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∫—É–ø–∞–µ—Ç BTC/ETH –∑–∞ USDC")
    print("   5. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è BTC-ETH –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ (60/40)")
    print("   6. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram")

if __name__ == "__main__":
    asyncio.run(test_full_integration())
