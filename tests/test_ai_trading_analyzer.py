#!/usr/bin/env python3
"""
–¢–µ—Å—Ç AI Trading Analyzer
"""

import asyncio
import json
from ai_trading_analyzer import AITradingAnalyzer

async def test_ai_trading_analyzer():
    """–¢–µ—Å—Ç AI Trading Analyzer"""
    print("=== –¢–ï–°–¢ AI TRADING ANALYZER ===")
    
    try:
        analyzer = AITradingAnalyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ ETH
        symbol = "ETHUSDT"
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ {symbol}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        result = await analyzer.analyze_and_decide(symbol)
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {result['symbol']}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {result['final_decision'].get('final_decision', 'N/A')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['final_decision'].get('confidence', 0):.2f}")
        print(f"   –°–ª–µ–¥—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å: {result['should_trade']}")
        
        # –î–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è
        if 'reason' in result['final_decision']:
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result['final_decision']['reason'][:200]}...")
        
        # –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        if 'expert_analysis' in result['final_decision']:
            expert_analysis = result['final_decision']['expert_analysis']
            print(f"   –õ—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç: {expert_analysis.get('best_expert', 'N/A')}")
            print(f"   –°–æ–≥–ª–∞—Å–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {expert_analysis.get('expert_agreement', 'N/A')}")
            print(f"   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: {expert_analysis.get('risk_assessment', 'N/A')}")
        
        # –†–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        print(f"\nüë®‚Äçüíº –†–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:")
        for decision in result['expert_decisions']:
            print(f"   {decision['expert']}: {decision['decision']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision['confidence']:.2f})")
            if 'reason' in decision:
                print(f"     –ü—Ä–∏—á–∏–Ω–∞: {decision['reason'][:100]}...")
        
        # –î–∞–Ω–Ω—ã–µ
        print(f"\nüìä –î–∞–Ω–Ω—ã–µ:")
        data_summary = result['data_summary']
        print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞: {data_summary.get('market_sentiment', 'N/A')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å Perplexity: {data_summary.get('perplexity_confidence', 'N/A')}")
        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data_summary.get('current_price', 'N/A')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open(f"trading_analysis_{symbol}_{result['timestamp'][:10]}.json", "w", encoding="utf-8") as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_multiple_symbols():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    print("\n=== –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í ===")
    
    try:
        analyzer = AITradingAnalyzer()
        
        symbols = ["BTCUSDT", "ETHUSDT"]
        
        for symbol in symbols:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            result = await analyzer.analyze_and_decide(symbol)
            
            decision = result['final_decision'].get('final_decision', 'HOLD')
            confidence = result['final_decision'].get('confidence', 0)
            should_trade = result['should_trade']
            
            print(f"   –†–µ—à–µ–Ω–∏–µ: {decision}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
            print(f"   –¢–æ—Ä–≥–æ–≤–∞—Ç—å: {should_trade}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI Trading Analyzer...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    async def run_tests():
        success1 = await test_ai_trading_analyzer()
        success2 = await test_multiple_symbols()
        
        if success1 and success2:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    asyncio.run(run_tests())
