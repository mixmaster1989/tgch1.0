#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import numpy as np
from technical_indicators import calculate_indicators_for_symbol
from correlation_analyzer import CorrelationAnalyzer, add_price_to_correlation_analyzer
from comprehensive_data_manager import ComprehensiveDataManager


def test_technical_indicators():
    """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å —à—É–º–æ–º)
    test_klines = []
    base_price = 45000
    base_time = int(time.time() * 1000)
    
    for i in range(100):
        # –°–æ–∑–¥–∞–µ–º –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å —à—É–º–æ–º
        trend = base_price + i * 10  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        noise = np.random.normal(0, 100)  # –®—É–º
        price = trend + noise
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        open_price = price - np.random.uniform(0, 50)
        high_price = price + np.random.uniform(0, 100)
        low_price = price - np.random.uniform(0, 100)
        close_price = price
        volume = np.random.uniform(50, 500)
        
        timestamp = base_time + i * 60000  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        test_klines.append([
            timestamp,
            str(open_price),
            str(high_price),
            str(low_price),
            str(close_price),
            str(volume),
            timestamp + 60000,  # close_time
            str(volume * close_price)  # quote_volume
        ])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    result = calculate_indicators_for_symbol(test_klines, "BTCUSDT")
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    rsi = result.get('rsi_14', 'N/A')
    sma = result.get('sma_20', 'N/A')
    ema = result.get('ema_12', 'N/A')
    atr = result.get('atr_14', 'N/A')
    vol_sma = result.get('volume_sma', 'N/A')
    
    print(f"  RSI: {rsi:.2f}" if isinstance(rsi, (int, float)) else f"  RSI: {rsi}")
    print(f"  SMA 20: {sma:.2f}" if isinstance(sma, (int, float)) else f"  SMA 20: {sma}")
    print(f"  EMA 12: {ema:.2f}" if isinstance(ema, (int, float)) else f"  EMA 12: {ema}")
    print(f"  ATR: {atr:.2f}" if isinstance(atr, (int, float)) else f"  ATR: {atr}")
    print(f"  Volume SMA: {vol_sma:.2f}" if isinstance(vol_sma, (int, float)) else f"  Volume SMA: {vol_sma}")
    
    if 'macd' in result:
        macd = result['macd']
        print(f"  MACD: {macd.get('macd', 'N/A'):.2f}")
        print(f"  Signal: {macd.get('signal', 'N/A'):.2f}")
        print(f"  Histogram: {macd.get('histogram', 'N/A'):.2f}")
    
    if 'bollinger' in result:
        bb = result['bollinger']
        print(f"  BB Upper: {bb.get('upper', 'N/A'):.2f}")
        print(f"  BB Middle: {bb.get('middle', 'N/A'):.2f}")
        print(f"  BB Lower: {bb.get('lower', 'N/A'):.2f}")
    
    if 'signals' in result:
        signals = result['signals']
        print(f"  Overall Signal: {signals.get('overall_signal', 'N/A')}")
        print(f"  Confidence: {signals.get('confidence', 'N/A'):.2f}")
        print(f"  Buy Signals: {signals.get('buy_signals', 'N/A')}")
        print(f"  Sell Signals: {signals.get('sell_signals', 'N/A')}")
    
    print("‚úÖ –¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


def test_correlation_analyzer():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    
    analyzer = CorrelationAnalyzer()
    base_time = int(time.time() * 1000)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    for i in range(100):
        timestamp = base_time + i * 60000  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        # BTC —Å –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º
        btc_price = 45000 + i * 10 + np.random.normal(0, 100)
        analyzer.add_price_data('BTCUSDT', btc_price, timestamp)
        
        # ETH —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π —Å BTC
        eth_price = 3000 + i * 0.7 + np.random.normal(0, 10)
        analyzer.add_price_data('ETHUSDT', eth_price, timestamp)
        
        # ADA —Å –Ω–∏–∑–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π (—Å–∏–Ω—É—Å–æ–∏–¥–∞)
        ada_price = 0.5 + np.sin(i * 0.1) * 0.1 + np.random.normal(0, 0.02)
        analyzer.add_price_data('ADAUSDT', ada_price, timestamp)
        
        # SOL —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
        sol_price = 100 + i * 0.5 + np.random.normal(0, 5)
        analyzer.add_price_data('SOLUSDT', sol_price, timestamp)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    btc_corr = analyzer.calculate_correlations('BTCUSDT')
    eth_corr = analyzer.calculate_correlations('ETHUSDT')
    ada_corr = analyzer.calculate_correlations('ADAUSDT')
    
    print("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:")
    print(f"BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
    for asset, corr in btc_corr.get('correlations', {}).items():
        print(f"  {asset}: {corr:.3f}")
    
    print(f"\nETH –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
    for asset, corr in eth_corr.get('correlations', {}).items():
        print(f"  {asset}: {corr:.3f}")
    
    print(f"\nADA –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:")
    for asset, corr in ada_corr.get('correlations', {}).items():
        print(f"  {asset}: {corr:.3f}")
    
    print(f"\n–†–∞–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏:")
    print(f"  BTC: {btc_corr.get('volatility_rank', 'N/A')}")
    print(f"  ETH: {eth_corr.get('volatility_rank', 'N/A')}")
    print(f"  ADA: {ada_corr.get('volatility_rank', 'N/A')}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio = {
        'BTCUSDT': 0.4,
        'ETHUSDT': 0.3,
        'ADAUSDT': 0.2,
        'SOLUSDT': 0.1
    }
    
    portfolio_analysis = analyzer.get_portfolio_correlation(portfolio)
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
    print(f"  –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {portfolio_analysis.get('portfolio_correlation', 'N/A'):.3f}")
    print(f"  –°–∫–æ—Ä –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {portfolio_analysis.get('diversification_score', 'N/A'):.3f}")
    print(f"  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {portfolio_analysis.get('risk_level', 'N/A')}")
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {portfolio_analysis.get('recommendation', 'N/A')}")
    
    print("‚úÖ –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")


async def test_comprehensive_data_manager():
    """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    manager = ComprehensiveDataManager()
    
    # Callback –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    async def indicators_callback(data):
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(data)} —Å–∏–º–≤–æ–ª–æ–≤")
        for symbol, multidata in data.items():
            if '1h' in multidata.indicators:
                indicators = multidata.indicators['1h']
                print(f"  {symbol}: RSI={indicators.rsi_14:.2f}, Signal={indicators.signals.get('overall_signal', 'N/A')}")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    manager.subscribe_indicators_updates(indicators_callback)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.start()
        
        # –ñ–¥–µ–º –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Ç–æ—á–µ–∫)
        print("‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        btc_data = manager.get_multitimeframe_data('BTCUSDT')
        if btc_data:
            print(f"üìà –î–∞–Ω–Ω—ã–µ BTC:")
            print(f"  –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {list(btc_data.timeframes.keys())}")
            print(f"  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {list(btc_data.indicators.keys())}")
            
            if '1h' in btc_data.indicators:
                indicators = btc_data.indicators['1h']
                print(f"  1h RSI: {indicators.rsi_14:.2f}")
                print(f"  1h Signal: {indicators.signals.get('overall_signal', 'N/A')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        btc_corr = manager.get_correlation_data('BTCUSDT')
        if btc_corr:
            print(f"üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ BTC:")
            for asset, corr in btc_corr.get('correlations', {}).items():
                print(f"  {asset}: {corr:.3f}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        candidates = manager.get_trading_candidates(min_volume=100000)
        print(f"üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(candidates)} —Å–∏–º–≤–æ–ª–æ–≤")
        for i, candidate in enumerate(candidates[:5]):
            print(f"  {i+1}. {candidate['symbol']}: ${candidate['price']:.4f}, Score: {candidate['score']:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        await manager.stop()
    
    print("‚úÖ –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω\n")


if __name__ == "__main__":
    import asyncio
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...\n")
    
    # –¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    test_technical_indicators()
    
    # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    test_correlation_analyzer()
    
    # –¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    asyncio.run(test_comprehensive_data_manager())
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 