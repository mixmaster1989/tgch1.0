#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –ø—Ä–æ–¥–∞–∂–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º API
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Ä–æ–≥–æ–≤ $0.15 –¥–ª—è Big Gains –∏ –∞–ª—å—Ç–æ–≤
"""

import asyncio
import logging
from datetime import datetime
from mex_api import MexAPI
from mexc_advanced_api import MexAdvancedAPI
from pnl_monitor import PnLMonitor
from alt_monitor import AltsMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ThresholdTester:
    def __init__(self):
        self.mex_api = MexAPI()
        self.mex_adv = MexAdvancedAPI()
        self.pnl_monitor = PnLMonitor()
        self.alts_monitor = AltsMonitor()
    
    def test_big_gains_threshold(self):
        """–¢–µ—Å—Ç –ø–æ—Ä–æ–≥–∞ –¥–ª—è Big Gains (BTC/ETH)"""
        print("üîç –¢–ï–°–¢ –ü–û–†–û–ì–ê BIG GAINS ($0.15)")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å PnL –º–æ–Ω–∏—Ç–æ—Ä–∞
            status = self.pnl_monitor.get_current_status()
            
            print(f"üìä –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: ${status['profit_threshold']}")
            print(f"üìà –û–±—â–∏–π PnL: ${status['total_pnl']:.4f}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å—ã: {status['balances']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤
            for asset in ['BTC', 'ETH']:
                if asset in status['balances']:
                    balance = status['balances'][asset]
                    print(f"\nüìä {asset}:")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {balance['total']:.6f}")
                    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {balance['free']:.6f}")
                    print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {balance['locked']:.6f}")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π PnL
                    if balance['total'] > 0:
                        symbol = f"{asset}USDC"
                        try:
                            ticker = self.mex_api.get_ticker_price(symbol)
                            if ticker and 'price' in ticker:
                                current_price = float(ticker['price'])
                                print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                                
                                # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL (–±–µ–∑ —É—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏)
                                estimated_value = balance['total'] * current_price
                                print(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_value:.4f}")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            
            print(f"\n‚úÖ –¢–µ—Å—Ç Big Gains –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Big Gains: {e}")
    
    def test_alts_threshold(self):
        """–¢–µ—Å—Ç –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∞–ª—å—Ç–æ–≤"""
        print("\nüîç –¢–ï–°–¢ –ü–û–†–û–ì–ê –ê–õ–¨–¢–û–í ($0.15)")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.alts_monitor._get_balances()
            
            print(f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: {len(balances)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç—ã
            alt_items = []
            for asset, data in balances.items():
                if asset in ['BTC', 'ETH', 'USDT', 'USDC']:
                    continue
                
                symbol = f"{asset}USDT"
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–∏–º–≤–æ–ª–∞
                    rules = self.mex_adv.get_symbol_rules(symbol)
                    if not rules:
                        symbol = f"{asset}USDC"
                        rules = self.mex_adv.get_symbol_rules(symbol)
                    
                    if rules:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º PnL
                        pnl_data = self.alts_monitor._avg_cost_pnl(symbol, data['total'])
                        
                        print(f"\nüìä {asset}:")
                        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['total']:.6f}")
                        print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${pnl_data['current_price']:.4f}")
                        print(f"   PnL: ${pnl_data['unrealized_pnl']:.4f}")
                        print(f"   –ü–æ—Ä–æ–≥: $0.15")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ PnL –ø–æ—Ä–æ–≥
                        if pnl_data['unrealized_pnl'] > 0.15:
                            print(f"   üéØ –ü–†–û–î–ê–ñ–ê –¢–†–ï–ë–£–ï–¢–°–Ø!")
                        else:
                            print(f"   ‚è≥ –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                        
                        alt_items.append({
                            'asset': asset,
                            'symbol': symbol,
                            'quantity': data['total'],
                            'current_price': pnl_data['current_price'],
                            'pnl': pnl_data['unrealized_pnl']
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {asset}: {e}")
            
            print(f"\nüìä –í—Å–µ–≥–æ –∞–ª—å—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(alt_items)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–æ–ø-5 –∞–ª—å—Ç–æ–≤
            print(f"\nüõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –ê–ù–¢–ò-–•–ê–ô–ü –§–ò–õ–¨–¢–†–ê:")
            for alt in ['BNB', 'SOL', 'XRP', 'ADA', 'DOGE']:
                symbol = f"{alt}USDT"
                try:
                    filter_result = self.alts_monitor.anti_hype_filter.check_buy_permission(symbol)
                    status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" if filter_result['allowed'] else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
                    print(f"   {alt}: {status} (√ó{filter_result['multiplier']}) - {filter_result['reason']}")
                except Exception as e:
                    print(f"   {alt}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
            
            print(f"\n‚úÖ –¢–µ—Å—Ç –∞–ª—å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–ª—å—Ç–æ–≤: {e}")
    
    def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 50)
        
        try:
            from config import PNL_MONITOR_CONFIG
            
            print(f"üìä PnL Monitor Config:")
            print(f"   –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏: ${PNL_MONITOR_CONFIG['profit_threshold']}")
            print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {PNL_MONITOR_CONFIG['check_interval']} —Å–µ–∫")
            print(f"   –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞: {'–í–ö–õ' if PNL_MONITOR_CONFIG['auto_sell_enabled'] else '–í–´–ö–õ'}")
            print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–ö–õ' if PNL_MONITOR_CONFIG['telegram_notifications'] else '–í–´–ö–õ'}")
            
            print(f"\nüìä Alts Monitor Config:")
            print(f"   –ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏: $0.15")
            print(f"   –¢–æ–ø-5 –∞–ª—å—Ç–æ–≤: {self.alts_monitor.TOP5_ALTS}")
            
            print(f"\n‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ü–û–†–û–ì–û–í –ü–†–û–î–ê–ñ–ò")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    print()
    
    tester = ThresholdTester()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    tester.test_configuration()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Big Gains
    tester.test_big_gains_threshold()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç—ã
    tester.test_alts_threshold()
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("‚úÖ –ü–æ—Ä–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:")
    print("   - Big Gains: $0.40 ‚Üí $0.15")
    print("   - –ê–ª—å—Ç—ã: $0.20 ‚Üí $0.15")
    print("‚úÖ –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–µ–Ω")
    print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

if __name__ == "__main__":
    asyncio.run(main())
