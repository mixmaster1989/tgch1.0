#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Perplexity –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
"""

import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import OPENROUTER_API_KEY, OPENROUTER_BASE_URL

def test_perplexity_news_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –º–æ–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Perplexity"""
    
    if not OPENROUTER_API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é Perplexity –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    print(f"üì° API Key: {OPENROUTER_API_KEY[:10]}...")
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –º–æ–Ω–µ—Ç–µ "pump"
    prompt = """
    –ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ "pump" –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    
    –°–æ–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
    1. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–æ–Ω—Å—ã
    2. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ –∏ –æ–±—ä–µ–º–µ —Ç–æ—Ä–≥–æ–≤
    3. –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    5. –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    6. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    
    –í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    
    {
        "symbol": "PUMP",
        "recent_news": [
            {
                "date": "YYYY-MM-DD",
                "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏",
                "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                "source": "–ò—Å—Ç–æ—á–Ω–∏–∫",
                "impact": "positive/negative/neutral"
            }
        ],
        "price_analysis": {
            "current_trend": "up/down/sideways",
            "volume_change": "increased/decreased",
            "notable_movements": []
        },
        "partnerships": [],
        "technical_updates": [],
        "regulatory_news": [],
        "social_sentiment": "positive/negative/neutral"
    }
    
    –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ, –≤–µ—Ä–Ω–∏ JSON —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–Ω–µ JSON.
    """
    
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API
        response = requests.post(
            url=f"{OPENROUTER_BASE_URL}/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://mex-trading-bot.com",
                "X-Title": "MEX Trading Bot"
            },
            json={
                "model": "perplexity/sonar-reasoning",
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": 0.3,
                "max_tokens": 4000
            },
            timeout=60
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if 'choices' in result and len(result['choices']) > 0:
                content = result['choices'][0]['message']['content']
                
                print("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Perplexity:")
                print("=" * 50)
                print(content)
                print("=" * 50)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                    json_start = content.find('{')
                    json_end = content.rfind('}') + 1
                    
                    if json_start != -1 and json_end > json_start:
                        json_str = content[json_start:json_end]
                        parsed_data = json.loads(json_str)
                        
                        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                        print(f"–°–∏–º–≤–æ–ª: {parsed_data.get('symbol', 'N/A')}")
                        print(f"–ù–æ–≤–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(parsed_data.get('recent_news', []))}")
                        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {parsed_data.get('social_sentiment', 'N/A')}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
                        news = parsed_data.get('recent_news', [])
                        if news:
                            print("\nüì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
                            for i, item in enumerate(news[:3], 1):
                                print(f"{i}. {item.get('title', 'N/A')}")
                                print(f"   –î–∞—Ç–∞: {item.get('date', 'N/A')}")
                                print(f"   –í–ª–∏—è–Ω–∏–µ: {item.get('impact', 'N/A')}")
                                print()
                    else:
                        print("‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                        
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    print("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
                if 'usage' in result:
                    usage = result['usage']
                    print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:")
                    print(f"–í—Ö–æ–¥–Ω—ã–µ: {usage.get('prompt_tokens', 0)}")
                    print(f"–í—ã—Ö–æ–¥–Ω—ã–µ: {usage.get('completion_tokens', 0)}")
                    print(f"–í—Å–µ–≥–æ: {usage.get('total_tokens', 0)}")
                
            else:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                print(f"–û—Ç–≤–µ—Ç: {result}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (60 —Å–µ–∫—É–Ω–¥)")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_perplexity_simple_query():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print("\nüîß –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        response = requests.post(
            url=f"{OPENROUTER_BASE_URL}/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "perplexity/sonar-reasoning",
                "messages": [
                    {
                        "role": "user",
                        "content": "–ö–∞–∫–∞—è —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin?"
                    }
                ],
                "temperature": 0.1,
                "max_tokens": 500
            },
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            content = result['choices'][0]['message']['content']
            print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω:")
            print(f"–û—Ç–≤–µ—Ç: {content[:200]}...")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Perplexity –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_perplexity_simple_query()
    
    # –ó–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π
    test_perplexity_news_search()
    
    print("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω") 