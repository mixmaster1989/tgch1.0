#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Order Book —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
from datetime import datetime
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from comprehensive_data_manager import ComprehensiveDataManager, OrderBookData, TradeData, TradeHistoryData

async def test_orderbook_functionality():
    """–¢–µ—Å—Ç Order Book —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Order Book —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_manager = ComprehensiveDataManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Order Book
    test_orderbook_data = {
        'bids': [
            ['114000.00', '0.5'],
            ['113999.00', '1.2'],
            ['113998.00', '0.8']
        ],
        'asks': [
            ['114001.00', '0.8'],
            ['114002.00', '1.5'],
            ['114003.00', '0.6']
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Order Book –¥–∞–Ω–Ω—ã—Ö
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Order Book –¥–∞–Ω–Ω—ã—Ö...")
    orderbook = data_manager._process_orderbook_data('BTCUSDT', test_orderbook_data)
    
    if orderbook:
        print(f"‚úÖ Order Book —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"   –°–∏–º–≤–æ–ª: {orderbook.symbol}")
        print(f"   –°–ø—Ä–µ–¥: ${orderbook.spread:.2f} ({orderbook.spread_percent:.4f}%)")
        print(f"   –û–±—ä–µ–º bids: {orderbook.bid_volume}")
        print(f"   –û–±—ä–µ–º asks: {orderbook.ask_volume}")
        print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {orderbook.volume_ratio:.2f}")
        print(f"   –û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {orderbook.liquidity_score:.2f}")
        print(f"   Top 3 bids: {orderbook.bids[:3]}")
        print(f"   Top 3 asks: {orderbook.asks[:3]}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Order Book")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Order Book
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Order Book...")
    cached_orderbook = data_manager.get_orderbook_data('BTCUSDT')
    if cached_orderbook:
        print(f"‚úÖ Order Book –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {cached_orderbook.symbol}")
    else:
        print("‚ùå Order Book –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    test_trade_data = {
        'price': '114000.50',
        'quantity': '0.1',
        'side': 'BUY',
        'timestamp': int(datetime.now().timestamp() * 1000)
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏
    print("\nüí± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏...")
    trade = data_manager._process_trade_data('BTCUSDT', test_trade_data)
    
    if trade:
        print(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:")
        print(f"   –°–∏–º–≤–æ–ª: {trade.symbol}")
        print(f"   –¶–µ–Ω–∞: ${trade.price}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade.quantity}")
        print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {trade.side}")
        print(f"   –í—Ä–µ–º—è: {datetime.fromtimestamp(trade.timestamp / 1000)}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫...")
    trade_history = data_manager.get_trade_history('BTCUSDT')
    if trade_history:
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–∞–π–¥–µ–Ω–∞:")
        print(f"   –°–∏–º–≤–æ–ª: {trade_history.symbol}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(trade_history.trades)}")
        print(f"   –û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫: {trade_history.buy_volume}")
        print(f"   –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {trade_history.sell_volume}")
        print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {trade_history.volume_ratio:.2f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {trade_history.avg_trade_size:.4f}")
    else:
        print("‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º callbacks
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callbacks...")
    
    orderbook_callback_called = False
    trade_callback_called = False
    
    async def orderbook_callback(orderbook_data):
        nonlocal orderbook_callback_called
        orderbook_callback_called = True
        print(f"   üìä Order Book callback: {orderbook_data.symbol}")
    
    async def trade_callback(trade_data):
        nonlocal trade_callback_called
        trade_callback_called = True
        print(f"   üí± Trade callback: {trade_data.symbol}")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    data_manager.subscribe_orderbook_updates(orderbook_callback)
    data_manager.subscribe_trade_updates(trade_callback)
    
    print(f"   –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Order Book: {len(data_manager.orderbook_callbacks)}")
    print(f"   –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Trade: {len(data_manager.trade_callbacks)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫—ç—à
    print("\nüî¥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫—ç—à–∞...")
    from cache.redis_manager import RedisCacheManager
    redis_cache = RedisCacheManager()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º Order Book –≤ Redis
    redis_cache.set_orderbook('BTCUSDT', orderbook.to_dict())
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Redis
    cached_data = redis_cache.get_orderbook('BTCUSDT')
    if cached_data:
        print(f"‚úÖ Order Book —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis: {cached_data['orderbook']['symbol']}")
    else:
        print("‚ùå Order Book –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –≤ Redis
    if trade_history:
        redis_cache.set_trade_history('BTCUSDT', trade_history.to_dict())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ Redis
        cached_trades = redis_cache.get_trade_history('BTCUSDT')
        if cached_trades:
            print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis: {cached_trades['trades']['symbol']}")
        else:
            print("‚ùå –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Redis")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    stats = redis_cache.get_cache_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
    print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats['total_keys']}")
    print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage']}")
    print(f"   –ö–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º: {stats['keys_by_type']}")
    
    print("\nüéâ –¢–µ—Å—Ç Order Book —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return True

async def test_orderbook_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Order Book —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Order Book...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_manager = ComprehensiveDataManager()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await data_manager.start()
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await asyncio.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤
    major_assets = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    
    for symbol in major_assets:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {symbol}:")
        
        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = data_manager.get_market_data(symbol)
        if market_data:
            print(f"   ‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${market_data.price}")
        
        # Order Book –¥–∞–Ω–Ω—ã–µ
        orderbook_data = data_manager.get_orderbook_data(symbol)
        if orderbook_data:
            print(f"   ‚úÖ Order Book: —Å–ø—Ä–µ–¥ {orderbook_data.spread_percent:.4f}%")
        else:
            print(f"   ‚ö†Ô∏è Order Book: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
        trade_history = data_manager.get_trade_history(symbol)
        if trade_history:
            print(f"   ‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: {len(trade_history.trades)} —Å–¥–µ–ª–æ–∫")
        else:
            print(f"   ‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
    await data_manager.stop()
    
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_orderbook_functionality())
    asyncio.run(test_orderbook_integration()) 