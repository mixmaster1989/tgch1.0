#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import asyncio
import websockets
import json
import time
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class StableWebSocketClient:
    def __init__(self):
        self.websocket = None
        self.is_connected = False
        self.last_ping = 0
        self.ping_interval = 30  # —Å–µ–∫—É–Ω–¥—ã
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.reconnect_delay = 5  # —Å–µ–∫—É–Ω–¥—ã
        self.subscriptions = {}
        
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
            self.websocket = await websockets.connect(
                "wss://wbs-api.mexc.com/ws",
                ping_interval=30,
                ping_timeout=10,
                close_timeout=10,
                max_size=2**20,  # 1MB
                compression=None
            )
            self.is_connected = True
            self.reconnect_attempts = 0
            logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
            
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        if self.websocket:
            await self.websocket.close()
            self.is_connected = False
            logger.info("üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω")
            
    async def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self.is_connected or not self.websocket:
            logger.warning("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
            
        try:
            await self.websocket.send(json.dumps(message))
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
            
    async def subscribe(self, symbol: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
        subscriptions = [
            {
                "method": "SUBSCRIPTION",
                "params": [f"spot@public.aggre.deals.v3.api.pb@100ms@{symbol}"]
            },
            {
                "method": "SUBSCRIPTION", 
                "params": [f"spot@public.kline.v3.api.pb@{symbol}@Min1"]
            },
            {
                "method": "SUBSCRIPTION",
                "params": [f"spot@public.aggre.depth.v3.api.pb@100ms@{symbol}"]
            }
        ]
        
        for sub in subscriptions:
            success = await self.send_message(sub)
            if success:
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {sub['params'][0]}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {sub['params'][0]}")
                
    async def ping(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ping"""
        if time.time() - self.last_ping > self.ping_interval:
            await self.send_message({"method": "PING"})
            self.last_ping = time.time()
            logger.debug("üèì Ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
    async def listen(self, duration: int = 60):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é"""
        start_time = time.time()
        message_count = 0
        
        logger.info(f"üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        
        while time.time() - start_time < duration and self.is_connected:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
                await self.ping()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timeout
                message = await asyncio.wait_for(
                    self.websocket.recv(),
                    timeout=5.0
                )
                
                message_count += 1
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(message, bytes):
                    logger.debug(f"üì® Protobuf –¥–∞–Ω–Ω—ã–µ #{message_count}")
                else:
                    try:
                        data = json.loads(message)
                        if data.get('msg') == 'PONG':
                            logger.debug("üèì Pong –ø–æ–ª—É—á–µ–Ω")
                        elif 'code' in data:
                            logger.info(f"üì® –û—Ç–≤–µ—Ç: {data}")
                        else:
                            logger.debug(f"üì® –î–∞–Ω–Ω—ã–µ #{message_count}: {message[:100]}...")
                    except json.JSONDecodeError:
                        logger.debug(f"üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç #{message_count}")
                        
            except asyncio.TimeoutError:
                logger.debug("‚è∞ Timeout, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                continue
            except websockets.exceptions.ConnectionClosed:
                logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                if await self.reconnect():
                    continue
                else:
                    break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ listen: {e}")
                if await self.reconnect():
                    continue
                else:
                    break
                
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        return message_count
        
    async def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å exponential backoff"""
        if self.reconnect_attempts >= self.max_reconnect_attempts:
            logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            return False
            
        self.reconnect_attempts += 1
        delay = self.reconnect_delay * (2 ** (self.reconnect_attempts - 1))
        
        logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.reconnect_attempts} (–∑–∞–¥–µ—Ä–∂–∫–∞ {delay}—Å)")
        
        try:
            await asyncio.sleep(delay)
            if await self.connect():
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                for symbol in self.subscriptions:
                    await self.subscribe(symbol)
                logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

async def test_websocket_stability():
    """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ WebSocket"""
    print("üîå –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò WEB SOCKET")
    print("=" * 50)
    
    client = StableWebSocketClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return False
            
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        symbols = ['BTCUSDT', 'ETHUSDT']
        for symbol in symbols:
            client.subscriptions[symbol] = True
            await client.subscribe(symbol)
            
        # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
        message_count = await client.listen(duration=30)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        
        if message_count > 0:
            print("‚úÖ WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(test_websocket_stability()) 