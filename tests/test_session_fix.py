#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Session is closed
"""

import asyncio
import aiohttp
import ssl

async def test_session_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Session is closed"""
    print("üîß –¢–ï–°–¢ SESSION IS CLOSED")
    print("=" * 30)
    
    try:
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # Connector —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        connector = aiohttp.TCPConnector(
            ssl=ssl_context,
            limit=100,
            limit_per_host=30,
            ttl_dns_cache=300,
            use_dns_cache=True
        )
        
        # –¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º session
        async with aiohttp.ClientSession(connector=connector) as session:
            for i in range(3):
                try:
                    url = "https://api.mexc.com/api/v3/ticker/24hr"
                    params = {'symbol': 'BTCUSDT'}
                    
                    async with session.get(url, params=params, timeout=10) as response:
                        if response.status == 200:
                            data = await response.json()
                            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å #{i+1}: ${float(data['lastPrice']):.2f}")
                        else:
                            print(f"‚ùå HTTP {response.status}")
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ #{i+1}: {e}")
                    
        print("‚úÖ Session —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå Session –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_session_fix()) 