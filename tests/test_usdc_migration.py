#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –Ω–∞ USDC
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å –∑–∞—â–∏—Ç–æ–π –±–∞–ª–∞–Ω—Å–∞ USDC (–º–∏–Ω–∏–º—É–º $10)
"""

import sys
import logging
from balance_monitor import BalanceMonitor
from market_scanner import MarketScanner
from active_50_50_balancer import Active5050Balancer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_balance_monitor_usdc():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞"""
    
    print("üß™ –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ê –ë–ê–õ–ê–ù–°–ê USDC")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = BalanceMonitor()
        
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${monitor.min_balance_threshold} USDC")
        print(f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${monitor.max_purchase_amount} USDC")
        print(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: –º–∏–Ω–∏–º—É–º ${monitor.min_usdc_balance_after_purchase} USDC")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        usdc_balance = monitor.get_usdc_balance()
        usdt_balance = monitor.get_usdt_balance()
        
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: ${usdc_balance:.2f}")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –±–∞–ª–∞–Ω—Å–∞
        if usdc_balance > 0:
            safe_amount = monitor.calculate_safe_purchase_amount(usdc_balance)
            print(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ${safe_amount:.2f} USDC")
            
            can_purchase, reason = monitor.can_make_purchase(safe_amount)
            print(f"‚úÖ –ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å: {can_purchase} ({reason})")
        
        print("‚úÖ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞: {e}\n")

def test_market_scanner_usdc():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞"""
    
    print("üß™ –¢–ï–°–¢ –°–ö–ê–ù–ï–†–ê –†–´–ù–ö–ê USDC")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        scanner = MarketScanner()
        
        print(f"‚úÖ –°–∫–∞–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        usdc_balance = scanner.get_usdc_balance()
        usdt_balance = scanner.get_usdt_balance()
        
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: ${usdc_balance:.2f}")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –±–∞–ª–∞–Ω—Å–∞
        if usdc_balance > 0:
            safe_amount = scanner.calculate_safe_purchase_amount(usdc_balance)
            print(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: ${safe_amount:.2f} USDC")
            
            can_purchase, reason = scanner.can_make_purchase(safe_amount)
            print(f"‚úÖ –ú–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å: {can_purchase} ({reason})")
        
        print("‚úÖ –¢–µ—Å—Ç —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}\n")

def test_active_balancer_usdc():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫"""
    
    print("üß™ –¢–ï–°–¢ –ê–ö–¢–ò–í–ù–û–ì–û –ë–ê–õ–ê–ù–°–ò–†–û–í–©–ò–ö–ê USDC")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫
        balancer = Active5050Balancer()
        
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω")
        print(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balancer.min_balance_threshold} USDC")
        print(f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${balancer.max_balance_threshold} USDC")
        print(f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: –º–∏–Ω–∏–º—É–º ${balancer.min_usdc_balance_after_operation} USDC")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        usdc_balance = balancer.get_usdc_balance()
        usdt_balance = balancer.get_usdt_balance()
        
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: ${usdc_balance:.2f}")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –±–∞–ª–∞–Ω—Å–∞
        if usdc_balance > 0:
            safe_amount = balancer.calculate_safe_operation_amount(usdc_balance)
            print(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${safe_amount:.2f} USDC")
            
            can_operate, reason = balancer.can_make_operation(safe_amount)
            print(f"‚úÖ –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é: {can_operate} ({reason})")
        
        print("‚úÖ –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞: {e}\n")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –ù–ê USDC")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –±–∞–ª–∞–Ω—Å–∞ USDC")
    print("–ó–ê–©–ò–¢–ê: –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDC –º–µ–Ω—å—à–µ $10!")
    print("=" * 60 + "\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    test_balance_monitor_usdc()
    test_market_scanner_usdc()
    test_active_balancer_usdc()
    
    print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ USDC")
    print("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ USDC –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print("üí± –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ USDC (—Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π)")
    print("=" * 60)

if __name__ == "__main__":
    main() 