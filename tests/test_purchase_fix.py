#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–∫—É–ø–∫–∏
"""

import asyncio
import logging
from datetime import datetime
from market_scanner import MarketScanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_purchase_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
    try:
        print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò –ü–û–ö–£–ü–ö–ò")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        scanner = MarketScanner()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ
        test_symbol = "ADAUSDT"  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–Ω–µ—Ç–∞
        test_amount = 5.0  # $5 –¥–ª—è —Ç–µ—Å—Ç–∞
        
        print(f"üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–û–ö–£–ü–ö–£:")
        print(f"   –°–∏–º–≤–æ–ª: {test_symbol}")
        print(f"   –°—É–º–º–∞: ${test_amount}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        test_opportunity = {
            'symbol': test_symbol,
            'score': 5,
            'rsi': 30.0,
            'reasons': ['–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ', '–Ω–∏–∑–∫–∏–π_rsi', 'macd_buy']
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É (—Å–∏–º—É–ª—è—Ü–∏—è)
        print("üõí –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É...")
        result = await scanner.execute_purchase(test_symbol, test_amount, test_opportunity)
        
        if result['success']:
            print(f"‚úÖ –ü–û–ö–£–ü–ö–ê –£–°–ü–ï–®–ù–ê!")
            print(f"   –û—Ä–¥–µ—Ä ID: {result['order_id']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['quantity']}")
            print(f"   –¶–µ–Ω–∞: ${result['price']}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò:")
            print(f"   {result['error']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_purchase_fix()) 