#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSL –ø—Ä–æ–±–ª–µ–º –≤ REST API –∑–∞–ø—Ä–æ—Å–∞—Ö
"""

import asyncio
import aiohttp
import ssl
import time

async def test_ssl_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSL –ø—Ä–æ–±–ª–µ–º"""
    print("üîí –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SSL –ü–†–û–ë–õ–ï–ú")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    
    # –°–æ–∑–¥–∞–µ–º connector —Å SSL
    connector = aiohttp.TCPConnector(ssl=ssl_context, limit=100)
    
    symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
    
    try:
        print("üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º REST API —Å SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...")
        
        async with aiohttp.ClientSession(connector=connector) as session:
            for symbol in symbols:
                try:
                    # –¢–µ—Å—Ç 24hr ticker
                    url = f"https://api.mexc.com/api/v3/ticker/24hr"
                    params = {'symbol': symbol}
                    
                    start_time = time.time()
                    async with session.get(url, params=params, timeout=10) as response:
                        if response.status == 200:
                            data = await response.json()
                            elapsed = time.time() - start_time
                            print(f"‚úÖ {symbol}: ${float(data['lastPrice']):.2f} (–∑–∞ {elapsed:.2f}—Å)")
                        else:
                            print(f"‚ùå {symbol}: HTTP {response.status}")
                            
                except Exception as e:
                    print(f"‚ùå {symbol}: {e}")
                    
            print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º klines API...")
            
            for symbol in symbols:
                try:
                    # –¢–µ—Å—Ç klines
                    url = f"https://api.mexc.com/api/v3/klines"
                    params = {'symbol': symbol, 'interval': '1h', 'limit': 100}
                    
                    start_time = time.time()
                    async with session.get(url, params=params, timeout=10) as response:
                        if response.status == 200:
                            data = await response.json()
                            elapsed = time.time() - start_time
                            print(f"‚úÖ {symbol}: {len(data)} —Å–≤–µ—á–µ–π (–∑–∞ {elapsed:.2f}—Å)")
                        else:
                            print(f"‚ùå {symbol}: HTTP {response.status}")
                            
                except Exception as e:
                    print(f"‚ùå {symbol}: {e}")
                    
            print("\nüìö –¢–µ—Å—Ç–∏—Ä—É–µ–º depth API...")
            
            for symbol in symbols:
                try:
                    # –¢–µ—Å—Ç depth
                    url = f"https://api.mexc.com/api/v3/depth"
                    params = {'symbol': symbol, 'limit': 100}
                    
                    start_time = time.time()
                    async with session.get(url, params=params, timeout=10) as response:
                        if response.status == 200:
                            data = await response.json()
                            elapsed = time.time() - start_time
                            print(f"‚úÖ {symbol}: {len(data['bids'])} bids, {len(data['asks'])} asks (–∑–∞ {elapsed:.2f}—Å)")
                        else:
                            print(f"‚ùå {symbol}: HTTP {response.status}")
                            
                except Exception as e:
                    print(f"‚ùå {symbol}: {e}")
        
        print("\n‚úÖ SSL —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ SSL —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_ssl_fix()) 