#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ ETH
"""

from balance_monitor import BalanceMonitor
import asyncio

async def test_eth_order():
    monitor = BalanceMonitor()
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–†–î–ï–†–ê ETH")
    print("=" * 50)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å USDC
    original_get_usdc_balance = monitor.get_usdc_balance
    
    def mock_usdc_balance():
        return 15.0  # –°–∏–º—É–ª–∏—Ä—É–µ–º $15 USDC
    
    monitor.get_usdc_balance = mock_usdc_balance
    
    print(f"üí∞ –°–∏–º—É–ª–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å USDC: ${monitor.get_usdc_balance():.2f}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    allocation = monitor.get_current_portfolio_allocation()
    needs_rebalancing = monitor.needs_rebalancing(allocation)
    
    print(f"üìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
    print(f"   BTC: {allocation.get('btc_percent', 0):.1f}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 60%)")
    print(f"   ETH: {allocation.get('eth_percent', 0):.1f}% (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 40%)")
    print(f"   –ù—É–∂–Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {needs_rebalancing}")
    
    if needs_rebalancing:
        print(f"\nüéØ –¢–ï–°–¢–ò–†–£–ï–ú –ü–õ–ê–ù –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò:")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏
        purchase_plan = monitor.calculate_purchase_amounts(monitor.get_usdc_balance(), 'USDC')
        
        if purchase_plan:
            print(f"   –ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏:")
            for symbol, data in purchase_plan.items():
                print(f"   - {symbol}: ${data['amount']:.2f} ({data['quantity']:.6f})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                if symbol == 'ETHUSDC':
                    if data['quantity'] < 0.001:
                        print(f"     ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH {data['quantity']:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.001")
                    else:
                        print(f"     ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH {data['quantity']:.6f} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º—É–º—É")
                elif symbol == 'BTCUSDC':
                    if data['quantity'] < 0.0001:
                        print(f"     ‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {data['quantity']:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.0001")
                    else:
                        print(f"     ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {data['quantity']:.6f} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º—É–º—É")
        else:
            print(f"   ‚ùå –ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏ –ø—É—Å—Ç–æ–π!")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    monitor.get_usdc_balance = original_get_usdc_balance
    
    print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–µ—Ç—Ä–∞–∏ (3 –ø–æ–ø—ã—Ç–∫–∏)")
    print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤")
    print(f"   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –æ—Ä–¥–µ—Ä–æ–º")
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 'Insufficient position'")
    print(f"   ‚úÖ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (2 —Å–µ–∫)")

if __name__ == "__main__":
    asyncio.run(test_eth_order()) 