#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–ª—é—á–µ–π OpenRouter –Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–û–ô –º–æ–¥–µ–ª–∏ —Å –†–ï–¢–†–ê–Ø–ú–ò
"""

import asyncio
import aiohttp
import json
from datetime import datetime

# –í—Å–µ –∫–ª—é—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
KEYS = {
    "KEY1": "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",
    "KEY2": "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",
    "KEY3": "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",
    "KEY4": "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",
    "KEY5": "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",
    "KEY6": "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",
    "KEY7": "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",
    "KEY9": "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",
    "KEY10": "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"
}

async def test_key_with_retries(session, key_name, api_key, max_retries=5, timeout=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://mexc-trading-bot.com",
        "X-Title": "MEXC Trading Bot"
    }
    
    data = {
        "model": "deepseek/deepseek-r1-0528:free",  # –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ú–û–î–ï–õ–¨!
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: 'OK'"}
        ],
        "max_tokens": 10
    }
    
    for attempt in range(1, max_retries + 1):
        try:
            print(f"      –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}...")
            
            async with session.post(url, headers=headers, json=data, timeout=timeout) as response:
                if response.status == 200:
                    result = await response.json()
                    return {
                        "status": "‚úÖ –†–ê–ë–û–¢–ê–ï–¢",
                        "response": result.get("choices", [{}])[0].get("message", {}).get("content", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"),
                        "usage": result.get("usage", {}),
                        "model": result.get("model", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "attempt": attempt
                    }
                else:
                    error_text = await response.text()
                    error_msg = error_text[:100] + "..." if len(error_text) > 100 else error_text
                    
                    # –ï—Å–ª–∏ 429 (rate limit), –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                    if response.status == 429 and attempt < max_retries:
                        print(f"      ‚è≥ Rate limit (429), –∂–¥–µ–º {timeout} —Å–µ–∫...")
                        await asyncio.sleep(timeout)
                        continue
                    else:
                        return {
                            "status": f"‚ùå –û–®–ò–ë–ö–ê {response.status}",
                            "error": error_msg,
                            "attempt": attempt
                        }
                        
        except asyncio.TimeoutError:
            print(f"      ‚è∞ –¢–∞–π–º–∞—É—Ç, –ø–æ–ø—ã—Ç–∫–∞ {attempt}")
            if attempt < max_retries:
                await asyncio.sleep(timeout)
                continue
            else:
                return {
                    "status": "üí• –¢–ê–ô–ú–ê–£–¢",
                    "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
                    "attempt": attempt
                }
        except Exception as e:
            print(f"      üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:50]}")
            if attempt < max_retries:
                await asyncio.sleep(timeout)
                continue
            else:
                return {
                    "status": "üí• –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï",
                    "error": str(e),
                    "attempt": attempt
                }
    
    return {
        "status": "‚ùå –í–°–ï –ü–û–ü–´–¢–ö–ò –ò–°–ß–ï–†–ü–ê–ù–´",
        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫",
        "attempt": max_retries
    }

async def test_all_keys():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
    print("üîç –¢–ï–°–¢ –í–°–ï–• –ö–õ–Æ–ß–ï–ô OPENROUTER –ù–ê –ë–ï–°–ü–õ–ê–¢–ù–û–ô –ú–û–î–ï–õ–ò –° –†–ï–¢–†–ê–Ø–ú–ò")
    print("=" * 80)
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: deepseek/deepseek-r1-0528:free")
    print(f"üîÑ –†–µ—Ç—Ä–∞–∏: 5 –ø–æ–ø—ã—Ç–æ–∫")
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç: 3 —Å–µ–∫—É–Ω–¥—ã")
    print(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    print()
    
    working_keys = []
    failed_keys = []
    
    async with aiohttp.ClientSession() as session:
        for key_name, api_key in KEYS.items():
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É—é {key_name}...")
            result = await test_key_with_retries(session, key_name, api_key)
            
            print(f"   {result['status']}")
            if "–†–ê–ë–û–¢–ê–ï–¢" in result['status']:
                print(f"   üìù –û—Ç–≤–µ—Ç: {result['response']}")
                print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {result['model']}")
                print(f"   üéØ –ü–æ–ø—ã—Ç–∫–∞: {result['attempt']}")
                if result.get('usage'):
                    usage = result['usage']
                    print(f"   üìä –¢–æ–∫–µ–Ω—ã: {usage.get('prompt_tokens', 0)} + {usage.get('completion_tokens', 0)}")
                working_keys.append((key_name, result))
            else:
                print(f"   üö´ –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   üéØ –ü–æ–ø—ã—Ç–∫–∞: {result['attempt']}")
                failed_keys.append((key_name, result))
            print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 80)
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: {len(working_keys)}")
    print(f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: {len(failed_keys)}")
    print()
    
    if working_keys:
        print("‚úÖ –†–ê–ë–û–ß–ò–ï –ö–õ–Æ–ß–ò (–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏):")
        for key_name, result in working_keys:
            print(f"   {key_name}: {KEYS[key_name]}")
            print(f"      –ü–æ–ø—ã—Ç–∫–∞: {result['attempt']}, –û—Ç–≤–µ—Ç: {result['response']}")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è .env
        print("üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø .env:")
        print("=" * 80)
        for i, (key_name, result) in enumerate(working_keys[:3], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–∞–±–æ—á–∏—Ö
            print(f"OPENROUTER_API_KEY{i}={KEYS[key_name]}")
        print()
        
        if len(working_keys) > 3:
            print(f"üìã –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∫–ª—é—á–∏ ({len(working_keys)-3}):")
            for key_name, result in working_keys[3:]:
                print(f"   {key_name}: {KEYS[key_name]} (–ø–æ–ø—ã—Ç–∫–∞ {result['attempt']})")
    
    if failed_keys:
        print("‚ùå –ù–ï–†–ê–ë–û–ß–ò–ï –ö–õ–Æ–ß–ò:")
        for key_name, result in failed_keys:
            print(f"   {key_name}: {KEYS[key_name]}")
            print(f"      –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (–ø–æ–ø—ã—Ç–∫–∞ {result['attempt']})")
    
    return working_keys, failed_keys

if __name__ == "__main__":
    asyncio.run(test_all_keys()) 