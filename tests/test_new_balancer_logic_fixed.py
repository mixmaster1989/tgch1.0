#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ PortfolioBalancer
"""

import asyncio
from portfolio_balancer import PortfolioBalancer

async def test_new_balancer_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –õ–û–ì–ò–ö–ò PORTFOLIO BALANCER")
    print("=" * 60)
    
    balancer = PortfolioBalancer()
    
    # –¢–µ—Å—Ç 1: BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –µ—Å—Ç—å USDC
    print("\n1Ô∏è‚É£ –¢–ï–°–¢: BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –µ—Å—Ç—å USDC")
    print("   –û–∂–∏–¥–∞–µ–º: –ü–æ–∫—É–ø–∫–∞ ETH –∑–∞ USDC")
    
    def mock_balances_test1():
        return {'BTC': 0.001, 'ETH': 0.01, 'USDC': 100.0}
    
    def mock_values_test1():
        return {
            'btc_value': 60.0,  # 60% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
            'eth_value': 30.0,  # 30% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è (–Ω—É–∂–Ω–æ 40%)
            'total_value': 100.0,
            'btc_price': 60000.0,
            'eth_price': 3000.0,
            'btc_ratio': 0.60,
            'eth_ratio': 0.30
        }
    
    balancer.get_portfolio_balances = mock_balances_test1
    balancer.get_portfolio_values = lambda b: mock_values_test1()
    balancer.get_usdc_balance = lambda: 100.0
    
    # –ú–æ–∫–∞–µ–º PnL
    def mock_btc_pnl(asset, balances, values):
        return 5.0 if asset == 'BTC' else -2.0  # BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ
    
    balancer.get_asset_pnl = mock_btc_pnl
    
    result = balancer.calculate_rebalance_trades(mock_balances_test1(), mock_values_test1())
    
    print(f"   üìä BTC PnL: $5.0 (–ø–ª—é—Å)")
    print(f"   üìä ETH PnL: $-2.0 (–º–∏–Ω—É—Å)")
    print(f"   üí∞ USDC: $100.0")
    print(f"   üîÑ –¢–æ—Ä–≥–æ–≤: {len(result['trades'])}")
    
    for trade in result['trades']:
        reason = trade.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        print(f"      {trade['action']} {trade['symbol']} - {reason}")
    
    # –¢–µ—Å—Ç 2: BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –ù–ï–¢ USDC
    print("\n2Ô∏è‚É£ –¢–ï–°–¢: BTC –≤ –ø–ª—é—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –ù–ï–¢ USDC")
    print("   –û–∂–∏–¥–∞–µ–º: –ü—Ä–æ–¥–∞–∂–∞ BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH")
    
    balancer.get_usdc_balance = lambda: 5.0  # –ú–∞–ª–æ USDC
    
    result = balancer.calculate_rebalance_trades(mock_balances_test1(), mock_values_test1())
    
    print(f"   üìä BTC PnL: $5.0 (–ø–ª—é—Å)")
    print(f"   ÔøΩÔøΩ ETH PnL: $-2.0 (–º–∏–Ω—É—Å)")
    print(f"   üí∞ USDC: $5.0 (–º–∞–ª–æ)")
    print(f"   üîÑ –¢–æ—Ä–≥–æ–≤: {len(result['trades'])}")
    
    for trade in result['trades']:
        reason = trade.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        print(f"      {trade['action']} {trade['symbol']} - {reason}")
    
    # –¢–µ—Å—Ç 3: BTC –≤ –º–∏–Ω—É—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –ù–ï–¢ USDC
    print("\n3Ô∏è‚É£ –¢–ï–°–¢: BTC –≤ –º–∏–Ω—É—Å–µ, ETH –≤ –º–∏–Ω—É—Å–µ, –ù–ï–¢ USDC")
    print("   –û–∂–∏–¥–∞–µ–º: –ù–∏–∫–∞–∫–∏—Ö —Ç–æ—Ä–≥–æ–≤ (–∂–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)")
    
    def mock_btc_pnl_negative(asset, balances, values):
        return -3.0 if asset == 'BTC' else -2.0  # –û–±–∞ –≤ –º–∏–Ω—É—Å–µ
    
    balancer.get_asset_pnl = mock_btc_pnl_negative
    
    result = balancer.calculate_rebalance_trades(mock_balances_test1(), mock_values_test1())
    
    print(f"   üìä BTC PnL: $-3.0 (–º–∏–Ω—É—Å)")
    print(f"   üìä ETH PnL: $-2.0 (–º–∏–Ω—É—Å)")
    print(f"   üí∞ USDC: $5.0 (–º–∞–ª–æ)")
    print(f"   üîÑ –¢–æ—Ä–≥–æ–≤: {len(result['trades'])}")
    
    if len(result['trades']) == 0:
        print("      ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –ù–∏–∫–∞–∫–∏—Ö —Ç–æ—Ä–≥–æ–≤ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL –æ–±–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤")
    else:
        print("      ‚ùå –û—à–∏–±–∫–∞: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 —Ç–æ—Ä–≥–æ–≤")
        for trade in result['trades']:
            reason = trade.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            print(f"         {trade['action']} {trade['symbol']} - {reason}")
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("\nüìã –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:")
    print("   1. ‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞ USDC –µ—Å–ª–∏ —Ö–≤–∞—Ç–∞–µ—Ç")
    print("   2. ‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –∞–∫—Ç–∏–≤–∞ –≤ –ø–ª—é—Å–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–∞ –≤ –º–∏–Ω—É—Å–µ")
    print("   3. ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–æ–≤ –≤ –º–∏–Ω—É—Å–µ")
    print("   4. ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL –æ–±–æ–∏—Ö –∞–∫—Ç–∏–≤–æ–≤")

if __name__ == "__main__":
    asyncio.run(test_new_balancer_logic())
