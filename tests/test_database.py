#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –º–æ–¥–µ–ª–µ–π –∏ –∫—ç—à–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import json
from database.connection import DatabaseConnection
from database.models import DatabaseModels, PriceData, KlineData, TechnicalIndicator
from database.migrations import DatabaseMigrations
from cache.redis_manager import RedisCacheManager


def test_database_connections():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î...")
    
    connection = DatabaseConnection()
    results = connection.test_connections()
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
    for db, status in results.items():
        print(f"  {db}: {'‚úÖ' if status else '‚ùå'}")
    
    connection.close_connections()
    return results


def test_database_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ë–î...")
    
    try:
        models = DatabaseModels()
        models.create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        connection = DatabaseConnection()
        with connection.get_cursor() as cursor:
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            tables = [row[0] for row in cursor.fetchall()]
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False


def test_redis_cache():
    """–¢–µ—Å—Ç Redis –∫—ç—à–∞"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∫—ç—à–∞...")
    
    try:
        cache = RedisCacheManager()
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω
        cache.set_price("BTCUSDT", 45000.0)
        cache.set_price("ETHUSDT", 3000.0)
        
        btc_price = cache.get_price("BTCUSDT")
        eth_price = cache.get_price("ETHUSDT")
        
        print(f"üí∞ –¶–µ–Ω–∞ BTC: {btc_price}")
        print(f"üí∞ –¶–µ–Ω–∞ ETH: {eth_price}")
        
        # –¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators = {
            'rsi_14': 65.5,
            'sma_20': 45000.0,
            'macd': {'macd': 50.0, 'signal': 45.0, 'histogram': 5.0}
        }
        cache.set_indicators("BTCUSDT", "1h", indicators)
        
        cached_indicators = cache.get_indicators("BTCUSDT", "1h")
        print(f"üìà –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã BTC: {cached_indicators}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        stats = cache.get_cache_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis –∫—ç—à–∞: {e}")
        return False


def test_database_migrations():
    """–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...")
    
    try:
        migrations = DatabaseMigrations()
        migrations.run_migrations()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
        status = migrations.get_migration_status()
        print(f"üì¶ –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print(f"  –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {status['total_migrations']}")
        for migration in status['migrations']:
            print(f"  {migration['version']}: {migration['name']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        return False


def test_data_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏...")
    
    try:
        connection = DatabaseConnection()
        
        # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        with connection.get_cursor() as cursor:
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ü–µ–Ω—É
            cursor.execute("""
                INSERT INTO prices (symbol, price, timestamp, source)
                VALUES (%s, %s, %s, %s)
            """, ("BTCUSDT", 45000.0, int(time.time() * 1000), "test"))
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–≤–µ—á—É
            cursor.execute("""
                INSERT INTO klines (symbol, interval, open, high, low, close, volume, timestamp, close_time, quote_volume)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """, ("BTCUSDT", "1h", 45000.0, 45100.0, 44900.0, 45050.0, 100.5, 
                  int(time.time() * 1000), int(time.time() * 1000) + 3600000, 4500000.0))
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        with connection.get_cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM prices WHERE symbol = %s", ("BTCUSDT",))
            price_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM klines WHERE symbol = %s", ("BTCUSDT",))
            kline_count = cursor.fetchone()[0]
        
        print(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–Ω: {price_count}")
        print(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ —Å–≤–µ—á–µ–π: {kline_count}")
        
        connection.close_connections()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
    
    results = {}
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    results['connections'] = test_database_connections()
    
    # –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
    results['models'] = test_database_models()
    
    # –¢–µ—Å—Ç –∫—ç—à–∞
    results['cache'] = test_redis_cache()
    
    # –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–π
    results['migrations'] = test_database_migrations()
    
    # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏
    results['operations'] = test_data_operations()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    all_passed = True
    for test_name, result in results.items():
        if isinstance(result, dict):
            # –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            status = all(result.values())
            print(f"  {test_name}: {'‚úÖ' if status else '‚ùå'}")
            if not status:
                all_passed = False
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            print(f"  {test_name}: {'‚úÖ' if result else '‚ùå'}")
            if not result:
                all_passed = False
    
    print("=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ë–î –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î.")
    
    return all_passed


if __name__ == "__main__":
    main() 