#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–æ–º –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –ø–æ—Ä—Ç—Ñ–µ–ª—è
"""

from balance_monitor import BalanceMonitor
from alt_monitor import AltsMonitor
from pnl_monitor import PnLMonitor

def test_balance_monitor_notifications():
    print("üí∞ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô BALANCE MONITOR")
    print("="*50)
    
    monitor = BalanceMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ —Å –Ω–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    available_amount = 25.0
    
    print(f"üí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –Ω–∞ ${available_amount}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏
    purchase_plan = monitor.calculate_purchase_amounts(available_amount, 'USDC')
    
    if purchase_plan:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from datetime import datetime
        test_results = {
            'success': True,
            'timestamp': datetime.now(),
            'available_usdc': available_amount,
            'currency': 'USDC',
            'purchases': [],
            'total_spent': 0.0
        }
        
        for symbol, data in purchase_plan.items():
            test_results['purchases'].append({
                'symbol': symbol,
                'quantity': data['quantity'],
                'usdc_amount': data['amount'],
                'amount': data['amount'],
                'currency': data['currency'],
                'price': data['price'],
                'limit_price': data['price'] * 0.9995,
                'order_id': 'TEST123456',
                'is_maker': True,
                'orderbook': {'best_bid': data['price'] * 0.999, 'best_ask': data['price'] * 1.001, 'spread_percent': 0.2},
                'filter_reason': data.get('filter_reason', 'normal'),
                'filter_multiplier': data.get('filter_multiplier', 1.0)
            })
            test_results['total_spent'] += data['amount']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç
        report = monitor.format_purchase_report(test_results)
        print("\nüì± –û–¢–ß–ï–¢ –û –ü–û–ö–£–ü–ö–ï:")
        print(report.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', ''))
    else:
        print("‚ùå –ù–µ—Ç –ø–ª–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏")

def test_alt_monitor_notifications():
    print("\nüß© –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ALT MONITOR")
    print("="*50)
    
    alt_monitor = AltsMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∞–ª—å—Ç–æ–≤
    alt_monitor.send_status_report_once()
    print("‚úÖ –û—Ç—á–µ—Ç –∞–ª—å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

def test_pnl_monitor_notifications():
    print("\nüìä –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô PNL MONITOR")
    print("="*50)
    
    pnl_monitor = PnLMonitor()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    pnl_monitor.last_summary_time = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    pnl_monitor.check_pnl_and_sell()
    print("‚úÖ –°–≤–æ–¥–∫–∞ PnL –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("="*80)
    
    try:
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π balance monitor
        test_balance_monitor_notifications()
        
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π alt monitor  
        test_alt_monitor_notifications()
        
        # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π pnl monitor
        test_pnl_monitor_notifications()
        
        print("\n" + "="*80)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ó–ê–í–ï–†–®–ï–ù–û")
        print("\nüì± –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö/–ø—Ä–æ–¥–∞–∂–∞—Ö")
        print("   üõ°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–µ –≤ –æ—Ç—á–µ—Ç–∞—Ö")
        print("   üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Å–≤–æ–¥–∫–∞—Ö")
        print("   ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–¥–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()