#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∫—É–ø–∫–∏
"""

import asyncio
import logging
from datetime import datetime
from market_scanner import MarketScanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_telegram_notifications():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    try:
        print("üì± –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í TELEGRAM")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        scanner = MarketScanner()
        
        print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –†–ê–ó–õ–ò–ß–ù–´–ï –°–¶–ï–ù–ê–†–ò–ò:")
        print()
        
        # –¢–µ—Å—Ç 1: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        print("1Ô∏è‚É£ –¢–µ—Å—Ç: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
        insufficient_opportunities = [
            {
                'symbol': 'BTCUSDT',
                'score': 8,
                'rsi': 25.0,
                'reasons': ['–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ', '–Ω–∏–∑–∫–∏–π_rsi', 'macd_buy']
            }
        ]
        
        scan_results_insufficient = {
            'buy_opportunities': insufficient_opportunities,
            'total_pairs': 200,
            'analyzed_pairs': 200
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥)
        original_get_balance = scanner.get_usdt_balance
        scanner.get_usdt_balance = lambda: 5.0  # $5 –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        
        await scanner.auto_buy_opportunities(scan_results_insufficient)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        scanner.get_usdt_balance = original_get_balance
        
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print()
        
        # –¢–µ—Å—Ç 2: –ú–∞–ª–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
        print("2Ô∏è‚É£ –¢–µ—Å—Ç: –ú–∞–ª–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏")
        small_amount_opportunities = [
            {
                'symbol': 'ETHUSDT',
                'score': 7,
                'rsi': 28.0,
                'reasons': ['–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ', 'bb_–Ω–∏–∂–Ω—è—è', '–≤—ã—Å–æ–∫–∏–π_–æ–±—ä–µ–º']
            }
        ]
        
        scan_results_small = {
            'buy_opportunities': small_amount_opportunities,
            'total_pairs': 200,
            'analyzed_pairs': 200
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–∞–ª—ã–π –±–∞–ª–∞–Ω—Å
        scanner.get_usdt_balance = lambda: 15.0  # $15 (30% = $4.5 < $5)
        
        await scanner.auto_buy_opportunities(scan_results_small)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        scanner.get_usdt_balance = original_get_balance
        
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª–æ–π —Å—É–º–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print()
        
        # –¢–µ—Å—Ç 3: –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏
        print("3Ô∏è‚É£ –¢–µ—Å—Ç: –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏")
        good_opportunities = [
            {
                'symbol': 'ADAUSDT',
                'score': 6,
                'rsi': 32.0,
                'reasons': ['–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ', '–Ω–∏–∑–∫–∏–π_rsi', '–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π_–æ–±—ä–µ–º']
            }
        ]
        
        scan_results_good = {
            'buy_opportunities': good_opportunities,
            'total_pairs': 200,
            'analyzed_pairs': 200
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
        scanner.get_usdt_balance = lambda: 50.0  # $50 (30% = $15 > $5)
        
        await scanner.auto_buy_opportunities(scan_results_good)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        scanner.get_usdt_balance = original_get_balance
        
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print()
        
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_telegram_notifications()) 