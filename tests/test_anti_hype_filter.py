#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from anti_hype_filter import AntiHypeFilter
from balance_monitor import BalanceMonitor
from alt_monitor import AltsMonitor

def test_btc_eth_filter():
    print("üîç –¢–ï–°–¢ –ê–ù–¢–ò-–•–ê–ô–ü –§–ò–õ–¨–¢–†–ê –î–õ–Ø BTC/ETH")
    print("="*60)
    
    filter = AntiHypeFilter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º BTC –∏ ETH
    symbols = ['BTCUSDC', 'ETHUSDC']
    
    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        result = filter.check_buy_permission(symbol)
        
        status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" if result['allowed'] else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
        multiplier = f"√ó{result['multiplier']}" if result['multiplier'] != 1.0 else ""
        
        print(f"   {status} {multiplier}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
        print(f"   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {result['multiplier']}")

def test_alts_filter():
    print("\nüß© –¢–ï–°–¢ –ê–ù–¢–ò-–•–ê–ô–ü –§–ò–õ–¨–¢–†–ê –î–õ–Ø –ê–õ–¨–¢–û–í")
    print("="*60)
    
    filter = AntiHypeFilter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ø-5 –∞–ª—å—Ç–æ–≤
    alts = ['BNBUSDT', 'SOLUSDT', 'XRPUSDT', 'ADAUSDT', 'DOGEUSDT']
    
    for symbol in alts:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        result = filter.check_buy_permission(symbol)
        
        status = "‚úÖ –†–ê–ó–†–ï–®–ï–ù–û" if result['allowed'] else "üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û"
        multiplier = f"√ó{result['multiplier']}" if result['multiplier'] != 1.0 else ""
        
        print(f"   {status} {multiplier}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
        print(f"   –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {result['multiplier']}")

def test_balance_monitor_integration():
    print("\nüí∞ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° BALANCE MONITOR")
    print("="*60)
    
    monitor = BalanceMonitor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
    available_amount = 20.0  # $20 USDC
    
    print(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${available_amount}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º)
    purchase_plan = monitor.calculate_purchase_amounts(available_amount, 'USDC')
    
    if purchase_plan:
        print(f"üìã –ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏:")
        for symbol, data in purchase_plan.items():
            filter_info = ""
            if 'filter_reason' in data:
                filter_info = f" [{data['filter_reason']}]"
                if data.get('filter_multiplier', 1.0) != 1.0:
                    filter_info += f" √ó{data['filter_multiplier']}"
            
            print(f"   {symbol}: ${data['amount']:.2f}{filter_info}")
    else:
        print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–∫—É–ø–æ–∫")

def test_alt_monitor_integration():
    print("\nüß© –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° ALT MONITOR")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞ –∞–ª—å—Ç–æ–≤
    alt_monitor = AltsMonitor()
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    balances = alt_monitor._get_balances()
    usdt_balance = balances.get('USDT', {}).get('free', 0.0)
    
    print(f"üíö –î–æ—Å—Ç—É–ø–Ω–æ USDT: ${usdt_balance:.2f}")
    
    if usdt_balance >= 5.0:
        per_alt = usdt_balance / len(['BNB', 'SOL', 'XRP', 'ADA', 'DOGE'])
        print(f"üí∞ –ù–∞ –∫–∞–∂–¥—ã–π –∞–ª—å—Ç: ${per_alt:.2f}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª—å—Ç–∞
        for alt in ['BNB', 'SOL', 'XRP', 'ADA', 'DOGE']:
            if alt in balances:
                print(f"   {alt}: —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
                continue
                
            symbol = f"{alt}USDT"
            filter_result = alt_monitor.anti_hype_filter.check_buy_permission(symbol)
            
            if filter_result['allowed']:
                adjusted_amount = per_alt * filter_result['multiplier']
                multiplier_text = f" (√ó{filter_result['multiplier']})" if filter_result['multiplier'] != 1.0 else ""
                print(f"   ‚úÖ {alt}: ${adjusted_amount:.2f}{multiplier_text} [{filter_result['reason']}]")
            else:
                print(f"   üö´ {alt}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ [{filter_result['reason']}]")
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–ª—å—Ç–æ–≤")

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–¢–ò-–•–ê–ô–ü –§–ò–õ–¨–¢–†–ê –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("="*80)
    
    try:
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è BTC/ETH
        test_btc_eth_filter()
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –∞–ª—å—Ç–æ–≤
        test_alts_filter()
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å balance monitor
        test_balance_monitor_integration()
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å alt monitor
        test_alt_monitor_integration()
        
        print("\n" + "="*80)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()