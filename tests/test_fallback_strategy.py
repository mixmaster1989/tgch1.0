#!/usr/bin/env python3
"""
–¢–µ—Å—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - —Ä–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ REST API
"""

import asyncio
import aiohttp
import ssl
import json
import time
from datetime import datetime
from typing import Dict, List, Optional

class FallbackDataManager:
    def __init__(self):
        self.market_data = {}
        self.orderbook_data = {}
        self.kline_data = {}
        self.trade_history = {}
        self.update_interval = 5  # —Å–µ–∫—É–Ω–¥—ã
        self.is_running = False
        
        # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.ssl_context = ssl.create_default_context()
        self.ssl_context.check_hostname = False
        self.ssl_context.verify_mode = ssl.CERT_NONE
        
    async def fetch_market_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API"""
        try:
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                url = "https://api.mexc.com/api/v3/ticker/24hr"
                params = {'symbol': symbol}
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            'symbol': symbol,
                            'price': float(data['lastPrice']),
                            'change_24h': float(data['priceChangePercent']),
                            'volume_24h': float(data['volume']),
                            'high_24h': float(data['highPrice']),
                            'low_24h': float(data['lowPrice']),
                            'timestamp': datetime.now(),
                            'source': 'REST_API'
                        }
                    else:
                        print(f"‚ùå HTTP {response.status} –¥–ª—è {symbol}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None
            
    async def fetch_orderbook(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —á–µ—Ä–µ–∑ REST API"""
        try:
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                url = "https://api.mexc.com/api/v3/depth"
                params = {'symbol': symbol, 'limit': 100}
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        # –†–∞—Å—á–µ—Ç —Å–ø—Ä–µ–¥–∞
                        best_bid = float(data['bids'][0][0]) if data['bids'] else 0
                        best_ask = float(data['asks'][0][0]) if data['asks'] else 0
                        spread = best_ask - best_bid
                        spread_percent = (spread / best_bid * 100) if best_bid > 0 else 0
                        
                        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤
                        bid_volume = sum(float(bid[1]) for bid in data['bids'][:10])
                        ask_volume = sum(float(ask[1]) for ask in data['asks'][:10])
                        volume_ratio = bid_volume / ask_volume if ask_volume > 0 else 1.0
                        
                        return {
                            'symbol': symbol,
                            'bids': [[float(price), float(qty)] for price, qty in data['bids'][:10]],
                            'asks': [[float(price), float(qty)] for price, qty in data['asks'][:10]],
                            'spread': spread,
                            'spread_percent': spread_percent,
                            'bid_volume': bid_volume,
                            'ask_volume': ask_volume,
                            'volume_ratio': volume_ratio,
                            'liquidity_score': 0.8,
                            'timestamp': datetime.now(),
                            'source': 'REST_API'
                        }
                    else:
                        print(f"‚ùå HTTP {response.status} –¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞ {symbol}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞ {symbol}: {e}")
            return None
            
    async def fetch_klines(self, symbol: str, interval: str = '1h', limit: int = 100) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API"""
        try:
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                url = "https://api.mexc.com/api/v3/klines"
                params = {'symbol': symbol, 'interval': interval, 'limit': limit}
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        klines = []
                        
                        for kline in data:
                            klines.append({
                                'symbol': symbol,
                                'interval': interval,
                                'open': float(kline[1]),
                                'high': float(kline[2]),
                                'low': float(kline[3]),
                                'close': float(kline[4]),
                                'volume': float(kline[5]),
                                'timestamp': int(kline[0]),
                                'source': 'REST_API'
                            })
                        
                        return klines
                    else:
                        print(f"‚ùå HTTP {response.status} –¥–ª—è —Å–≤–µ—á–µ–π {symbol}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol}: {e}")
            return None
            
    async def fetch_recent_trades(self, symbol: str, limit: int = 100) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ REST API"""
        try:
            connector = aiohttp.TCPConnector(ssl=self.ssl_context)
            async with aiohttp.ClientSession(connector=connector) as session:
                url = "https://api.mexc.com/api/v3/trades"
                params = {'symbol': symbol, 'limit': limit}
                
                async with session.get(url, params=params, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        trades = []
                        
                        for trade in data:
                            trades.append({
                                'symbol': symbol,
                                'price': float(trade['price']),
                                'quantity': float(trade['qty']),
                                'side': trade['isBuyerMaker'],
                                'timestamp': int(trade['time']),
                                'source': 'REST_API'
                            })
                        
                        return trades
                    else:
                        print(f"‚ùå HTTP {response.status} –¥–ª—è —Å–¥–µ–ª–æ–∫ {symbol}")
                        return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ {symbol}: {e}")
            return None
            
    async def update_all_data(self, symbols: List[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤"""
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        for symbol in symbols:
            try:
                # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = await self.fetch_market_data(symbol)
                if market_data:
                    self.market_data[symbol] = market_data
                    print(f"üí∞ {symbol}: ${market_data['price']:.2f}")
                    
                # –û—Ä–¥–µ—Ä–±—É–∫
                orderbook = await self.fetch_orderbook(symbol)
                if orderbook:
                    self.orderbook_data[symbol] = orderbook
                    print(f"üìö {symbol}: —Å–ø—Ä–µ–¥ {orderbook['spread_percent']:.3f}%")
                    
                # –°–≤–µ—á–∏
                klines = await self.fetch_klines(symbol, '60m', 100)
                if klines:
                    self.kline_data[symbol] = klines
                    print(f"üìä {symbol}: {len(klines)} —Å–≤–µ—á–µ–π")
                    
                # –°–¥–µ–ª–∫–∏
                trades = await self.fetch_recent_trades(symbol, 100)
                if trades:
                    self.trade_history[symbol] = trades
                    print(f"üí± {symbol}: {len(trades)} —Å–¥–µ–ª–æ–∫")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}: {e}")
                
    async def run_fallback_loop(self, symbols: List[str], duration: int = 60):
        """–ó–∞–ø—É—Å–∫ fallback —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")
        print(f"üì° –°–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
        
        self.is_running = True
        start_time = time.time()
        update_count = 0
        
        while time.time() - start_time < duration and self.is_running:
            try:
                await self.update_all_data(symbols)
                update_count += 1
                
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{update_count} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ fallback —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5)
                
        print(f"üìä Fallback –∑–∞–≤–µ—Ä—à–µ–Ω: {update_count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        
    def get_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        summary = {
            'market_data_count': len(self.market_data),
            'orderbook_count': len(self.orderbook_data),
            'kline_count': len(self.kline_data),
            'trade_count': len(self.trade_history),
            'symbols': list(self.market_data.keys())
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if self.market_data:
            symbol = list(self.market_data.keys())[0]
            summary['example_market'] = self.market_data[symbol]
            
        if self.orderbook_data:
            symbol = list(self.orderbook_data.keys())[0]
            summary['example_orderbook'] = {
                'symbol': self.orderbook_data[symbol]['symbol'],
                'spread': self.orderbook_data[symbol]['spread'],
                'spread_percent': self.orderbook_data[symbol]['spread_percent']
            }
            
        return summary

async def test_fallback_strategy():
    """–¢–µ—Å—Ç fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    print("üîÑ –¢–ï–°–¢ FALLBACK –°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 50)
    
    manager = FallbackDataManager()
    symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º fallback —Ü–∏–∫–ª –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        await manager.run_fallback_loop(symbols, duration=30)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = manager.get_summary()
        
        print(f"\nüìä –°–í–û–î–ö–ê:")
        print(f"  –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {summary['market_data_count']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –û—Ä–¥–µ—Ä–±—É–∫–∏: {summary['orderbook_count']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –°–≤–µ—á–∏: {summary['kline_count']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –°–¥–µ–ª–∫–∏: {summary['trade_count']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if 'example_market' in summary:
            example = summary['example_market']
            print(f"  –ü—Ä–∏–º–µ—Ä: {example['symbol']} = ${example['price']:.2f}")
            
        if 'example_orderbook' in summary:
            example = summary['example_orderbook']
            print(f"  –°–ø—Ä–µ–¥: {example['spread_percent']:.3f}%")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
        complete_data = (
            summary['market_data_count'] > 0 and
            summary['orderbook_count'] > 0 and
            summary['kline_count'] > 0
        )
        
        if complete_data:
            print("\n‚úÖ Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print("\n‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ fallback")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_fallback_strategy()) 