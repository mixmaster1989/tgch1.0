#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import websockets
import json
import time

async def test_websocket_quick():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç WebSocket"""
    print("üîå –ë–´–°–¢–†–´–ô –¢–ï–°–¢ WEB SOCKET")
    print("=" * 30)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        websocket = await websockets.connect("wss://wbs-api.mexc.com/ws", timeout=10)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BTCUSDT
        subscription = {
            "method": "SUBSCRIPTION",
            "params": ["spot@public.aggre.deals.v3.api.pb@100ms@BTCUSDT"]
        }
        
        await websocket.send(json.dumps(subscription))
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        response = await asyncio.wait_for(websocket.recv(), timeout=5)
        print(f"üì® –û—Ç–≤–µ—Ç: {response}")
        
        # –ñ–¥–µ–º –¥–∞–Ω–Ω—ã–µ (5 —Å–µ–∫—É–Ω–¥)
        start_time = time.time()
        message_count = 0
        
        while time.time() - start_time < 5:
            try:
                message = await asyncio.wait_for(websocket.recv(), timeout=1)
                message_count += 1
                if message_count <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    print(f"üì® –î–∞–Ω–Ω—ã–µ #{message_count}: {message[:100]}...")
            except asyncio.TimeoutError:
                break
                
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
        
        await websocket.close()
        
        if message_count > 0:
            print("‚úÖ WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
            return True
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebSocket")
            return False
            
    except Exception as e:
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_websocket_quick()) 