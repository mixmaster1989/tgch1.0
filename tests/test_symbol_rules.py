#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è COWUSDT
"""

import requests
import json

def test_symbol_rules():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    try:
        print("üîß –¢–ï–°–¢ –ü–†–ê–í–ò–õ –¢–û–†–ì–û–í–õ–ò COWUSDT")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏—Ä–∂–µ
        url = "https://api.mexc.com/api/v3/exchangeInfo"
        response = requests.get(url)
        
        if response.status_code == 200:
            data = response.json()
            
            # –ò—â–µ–º COWUSDT
            cowusdt_info = None
            for symbol in data.get('symbols', []):
                if symbol.get('symbol') == 'COWUSDT':
                    cowusdt_info = symbol
                    break
            
            if cowusdt_info:
                print("‚úÖ COWUSDT –Ω–∞–π–¥–µ–Ω –≤ exchange info")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {cowusdt_info.get('status')}")
                print(f"üìä –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {cowusdt_info.get('baseAsset')}")
                print(f"üìä –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞: {cowusdt_info.get('quoteAsset')}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                filters = cowusdt_info.get('filters', [])
                print(f"\nüìã –§–∏–ª—å—Ç—Ä—ã ({len(filters)}):")
                
                for filter_info in filters:
                    filter_type = filter_info.get('filterType')
                    print(f"   {filter_type}: {filter_info}")
                
                # –ò—â–µ–º LOT_SIZE —Ñ–∏–ª—å—Ç—Ä
                lot_size_filter = None
                for filter_info in filters:
                    if filter_info.get('filterType') == 'LOT_SIZE':
                        lot_size_filter = filter_info
                        break
                
                if lot_size_filter:
                    print(f"\nüéØ LOT_SIZE —Ñ–∏–ª—å—Ç—Ä:")
                    print(f"   minQty: {lot_size_filter.get('minQty')}")
                    print(f"   maxQty: {lot_size_filter.get('maxQty')}")
                    print(f"   stepSize: {lot_size_filter.get('stepSize')}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                    test_amount = 6.64
                    current_price = 0.3898  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ COWUSDT
                    raw_quantity = test_amount / current_price
                    
                    print(f"\nüßÆ –†–ê–°–ß–ï–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê:")
                    print(f"   –°—É–º–º–∞: ${test_amount}")
                    print(f"   –¶–µ–Ω–∞: ${current_price}")
                    print(f"   –°—ã—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {raw_quantity}")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                    min_qty = float(lot_size_filter.get('minQty', 0))
                    step_size = float(lot_size_filter.get('stepSize', 0.0001))
                    
                    print(f"\nüìä –ü–†–ê–í–ò–õ–ê:")
                    print(f"   minQty: {min_qty}")
                    print(f"   stepSize: {step_size}")
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
                    new_quantity = round(raw_quantity / step_size) * step_size
                    
                    if new_quantity < min_qty:
                        print(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_quantity} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_qty}")
                        new_quantity = min_qty
                    
                    print(f"\n‚úÖ –ò–¢–û–ì–û–í–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û: {new_quantity}")
                    
                else:
                    print("‚ùå LOT_SIZE —Ñ–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
            else:
                print("‚ùå COWUSDT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ exchange info")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    test_symbol_rules() 