#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ MEX API
–ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏, –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫, –∫–æ–º–∏—Å—Å–∏–∏
"""

import json
from mexc_advanced_api import MexAdvancedAPI

def test_exchange_info():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ"""
    print("üîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è exchange info...")
    
    api = MexAdvancedAPI()
    exchange_info = api.get_exchange_info()
    
    if exchange_info and 'symbols' in exchange_info:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(exchange_info['symbols'])} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–∞—Ä
        usdt_pairs = [s for s in exchange_info['symbols'] if s['symbol'].endswith('USDT')]
        print(f"üìä USDT –ø–∞—Ä: {len(usdt_pairs)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–∞—Ä—ã
        for i, symbol in enumerate(usdt_pairs[:3]):
            print(f"  {i+1}. {symbol['symbol']} - {symbol['status']}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è exchange info")

def test_symbol_rules():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    api = MexAdvancedAPI()
    symbols = ['ETHUSDT', 'BTCUSDT', 'ADAUSDT']
    
    for symbol in symbols:
        print(f"\nüìã –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è {symbol}:")
        rules = api.get_symbol_rules(symbol)
        
        if rules:
            print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {rules.get('status', 'UNKNOWN')}")
            print(f"  üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: {rules.get('minQty', 0)}")
            print(f"  üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${rules.get('minNotional', 0)}")
            print(f"  üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {rules.get('pricePrecision', 8)} –∑–Ω–∞–∫–æ–≤")
            print(f"  üìä –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {rules.get('quantityPrecision', 8)} –∑–Ω–∞–∫–æ–≤")
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞")

def test_trade_fees():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π...")
    
    api = MexAdvancedAPI()
    fee_data = api.get_trade_fee()
    
    if fee_data and 'tradeFee' in fee_data:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è {len(fee_data['tradeFee'])} –ø–∞—Ä")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è ETHUSDT
        eth_fee = api.get_symbol_fee('ETHUSDT')
        print(f"üìä –ö–æ–º–∏—Å—Å–∏–∏ ETHUSDT:")
        print(f"  üü¢ Maker: {eth_fee.get('makerCommissionRate', 0)*100:.3f}%")
        print(f"  üî¥ Taker: {eth_fee.get('takerCommissionRate', 0)*100:.3f}%")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π")

def test_min_order_size():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞...")
    
    api = MexAdvancedAPI()
    symbols = ['ETHUSDT', 'BTCUSDT']
    
    for symbol in symbols:
        print(f"\nüìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {symbol}:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
        current_price = 3728.60 if symbol == 'ETHUSDT' else 114000.0
        
        min_order = api.calculate_min_order_size(symbol, current_price)
        
        if min_order:
            print(f"  üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç: {min_order.get('min_qty', 0)}")
            print(f"  üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${min_order.get('min_notional', 0)}")
            print(f"  üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä: ${min_order.get('min_order_usdt', 0):.2f}")
            print(f"  üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã: {min_order.get('price_precision', 8)} –∑–Ω–∞–∫–æ–≤")
            print(f"  üü¢ Maker –∫–æ–º–∏—Å—Å–∏—è: {min_order.get('maker_fee', 0)*100:.3f}%")
            print(f"  üî¥ Taker –∫–æ–º–∏—Å—Å–∏—è: {min_order.get('taker_fee', 0)*100:.3f}%")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")

def test_my_trades():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫...")
    
    api = MexAdvancedAPI()
    trades = api.get_my_trades('ETHUSDT', limit=10)
    
    if trades:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
        
        if len(trades) > 0:
            print("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:")
            for i, trade in enumerate(trades[:3]):
                side = "üü¢ BUY" if trade['isBuyer'] else "üî¥ SELL"
                print(f"  {i+1}. {side} {trade['qty']} ETH –ø–æ ${trade['price']:.2f}")
                print(f"     üí∞ –°—É–º–º–∞: ${trade['quoteQty']:.2f}")
                print(f"     üí∏ –ö–æ–º–∏—Å—Å–∏—è: {trade['commission']} {trade['commissionAsset']}")
    else:
        print("‚ÑπÔ∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è")

def test_trading_summary():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ...")
    
    api = MexAdvancedAPI()
    summary = api.get_trading_summary('ETHUSDT')
    
    if summary:
        print("üìä –°–≤–æ–¥–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ ETHUSDT:")
        print(f"  üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary.get('total_trades', 0)}")
        print(f"  üü¢ –û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫: {summary.get('total_buy_volume', 0):.4f} ETH")
        print(f"  üî¥ –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {summary.get('total_sell_volume', 0):.4f} ETH")
        print(f"  üìä –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {summary.get('current_position', 0):.4f} ETH")
        print(f"  üí∏ –û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {summary.get('total_commission', 0):.4f}")
        print(f"  üí∞ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${summary.get('realized_pnl', 0):.2f}")
        
        if summary.get('avg_buy_price', 0) > 0:
            print(f"  üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${summary.get('avg_buy_price', 0):.2f}")
        if summary.get('avg_sell_price', 0) > 0:
            print(f"  üìâ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${summary.get('avg_sell_price', 0):.2f}")
    else:
        print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    print("üöÄ –¢–ï–°–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û MEX API")
    print("=" * 50)
    
    try:
        test_exchange_info()
        test_symbol_rules()
        test_trade_fees()
        test_min_order_size()
        test_my_trades()
        test_trading_summary()
        
        print("\n" + "=" * 50)
        print("‚úÖ –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ API –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
