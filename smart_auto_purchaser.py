#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö USDT
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from decimal import Decimal

from mex_api import MexAPI
from market_analyzer import MarketAnalyzer
from technical_indicators import TechnicalIndicators
from anti_hype_filter import AntiHypeFilter
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartAutoPurchaser:
    """–£–º–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.market_analyzer = MarketAnalyzer()
        self.tech_indicators = TechnicalIndicators()
        self.anti_hype_filter = AntiHypeFilter()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_usdt_balance = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.max_purchase_amount = 50.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        self.check_interval = 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.min_purchase_interval = 600  # –ú–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.last_purchase_time = None
        self.total_purchases = 0
        self.total_spent = 0.0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
        try:
            account_info = self.mex_api.get_account_info()
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0
    
    def analyze_market_opportunities(self) -> List[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç market_analyzer
            recommendations = self.market_analyzer.get_trading_recommendations()
            
            if not recommendations:
                logger.info("‚ùå –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç market_analyzer")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            filtered_recommendations = []
            
            for rec in recommendations:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
                symbol = rec['symbol']
                current_price = rec['price']
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
                klines = self.mex_api.get_klines(symbol, '60m', 24)
                if not klines:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
                filter_result = self.anti_hype_filter.check_buy_permission(symbol)
                
                if filter_result['allowed']:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    rec['filter_reason'] = filter_result['reason']
                    rec['filter_multiplier'] = filter_result['multiplier']
                    filtered_recommendations.append(rec)
                else:
                    logger.info(f"‚ùå {symbol} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–æ–º: {filter_result['reason']}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–∫–æ—Ä—É
            filtered_recommendations.sort(key=lambda x: (x['confidence'], x['score']), reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_recommendations)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç")
            return filtered_recommendations[:3]  # –¢–æ–ø-3
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
            return []
    
    def calculate_purchase_amount(self, available_usdt: float, recommendation: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏ –º–∞–ª–æ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤
            if available_usdt < 20.0:
                # –ü—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—å—à–µ $20 –∏—Å–ø–æ–ª—å–∑—É–µ–º 60% —Å—Ä–µ–¥—Å—Ç–≤
                base_amount = available_usdt * 0.6
            else:
                # –ü—Ä–∏ –±–æ–ª—å—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                base_amount = min(available_usdt * 0.3, self.max_purchase_amount)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_multiplier = recommendation['confidence']
            adjusted_amount = base_amount * confidence_multiplier
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–Ω–æ–∂–∏—Ç–µ–ª—å
            filter_multiplier = recommendation.get('filter_multiplier', 1.0)
            final_amount = adjusted_amount * filter_multiplier
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
            final_amount = min(final_amount, self.max_purchase_amount)
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É $5
            if final_amount < 5.0 and available_usdt >= 5.0:
                final_amount = 5.0
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ $5, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            if final_amount < 5.0:
                return 0.0
            
            return final_amount
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏: {e}")
            return 0.0
    
    def execute_purchase(self, symbol: str, usdt_amount: float, recommendation: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
        try:
            logger.info(f"üõí –ü–æ–∫—É–ø–∫–∞ {symbol} –Ω–∞ ${usdt_amount:.2f} USDT...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if not ticker or 'price' not in ticker:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'}
            
            current_price = float(ticker['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = usdt_amount / current_price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–º–≤–æ–ª–∞)
            if 'BTC' in symbol:
                quantity = round(quantity, 6)  # 6 –∑–Ω–∞–∫–æ–≤ –¥–ª—è BTC
            elif 'ETH' in symbol:
                quantity = round(quantity, 5)  # 5 –∑–Ω–∞–∫–æ–≤ –¥–ª—è ETH
            else:
                quantity = round(quantity, 4)  # 4 –∑–Ω–∞–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            
            if quantity <= 0:
                return {'success': False, 'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side='BUY',
                quantity=quantity,
                price=None  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order['orderId']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = (
                    f"üéØ <b>–£–ú–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n"
                    f"üìà <b>{symbol}</b>\n"
                    f"üí∞ –°—É–º–º–∞: ${usdt_amount:.2f} USDT\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}\n"
                    f"üíµ –¶–µ–Ω–∞: ${current_price:.6f}\n\n"
                    f"üéØ <b>–ê–ù–ê–õ–ò–ó:</b>\n"
                    f"‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {recommendation['confidence']:.1%}\n"
                    f"üìä –°–∫–æ—Ä: {recommendation['score']}\n"
                    f"üîç –ü—Ä–∏—á–∏–Ω—ã: {', '.join(recommendation['reasons'])}\n"
                    f"üõ°Ô∏è –§–∏–ª—å—Ç—Ä: {recommendation.get('filter_reason', 'normal')}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(message)
                
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'quantity': quantity,
                    'price': current_price,
                    'amount': usdt_amount
                }
            else:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}"
                logger.error(error_msg)
                return {'success': False, 'error': error_msg}
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}"
            logger.error(error_msg)
            return {'success': False, 'error': error_msg}
    
    async def smart_purchase_cycle(self):
        """–¶–∏–∫–ª —É–º–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.get_usdt_balance()
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            
            if usdt_balance < self.min_usdt_balance:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: ${usdt_balance:.2f} < ${self.min_usdt_balance}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
            if self.last_purchase_time:
                time_since_last = time.time() - self.last_purchase_time
                if time_since_last < self.min_purchase_interval:
                    remaining = self.min_purchase_interval - time_since_last
                    logger.info(f"‚è∞ –ñ–¥–µ–º {remaining:.0f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏")
                    return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            opportunities = self.analyze_market_opportunities()
            
            if not opportunities:
                logger.info("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            best_opportunity = opportunities[0]
            symbol = best_opportunity['symbol']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
            purchase_amount = self.calculate_purchase_amount(usdt_balance, best_opportunity)
            
            if purchase_amount <= 0:
                logger.info("‚ùå –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            result = self.execute_purchase(symbol, purchase_amount, best_opportunity)
            
            if result['success']:
                self.last_purchase_time = time.time()
                self.total_purchases += 1
                self.total_spent += purchase_amount
                
                logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –Ω–∞ ${purchase_amount:.2f}")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.total_purchases} –ø–æ–∫—É–ø–æ–∫, ${self.total_spent:.2f} –ø–æ—Ç—Ä–∞—á–µ–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {result['error']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —É–º–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...")
        logger.info(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_usdt_balance}")
        logger.info(f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount}")
        logger.info(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            f"ü§ñ <b>–£–ú–ù–´–ô –ê–í–¢–û–ü–û–ö–£–ü–ê–¢–ï–õ–¨ –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_usdt_balance}\n"
            f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount}\n"
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫\n"
            f"üéØ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ + –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä\n\n"
            f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω..."
        )
        self.send_telegram_message(startup_message)
        
        while True:
            try:
                await self.smart_purchase_cycle()
                await asyncio.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –£–º–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    purchaser = SmartAutoPurchaser()
    await purchaser.start_monitoring()

if __name__ == "__main__":
    asyncio.run(main()) 