#!/usr/bin/env python3
"""
–ü–†–û–°–¢–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT
–ë–µ–∑ –ª–∏—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∞!
"""

import json
import time
import hmac
import hashlib
import urllib.parse
from urllib.request import Request, urlopen

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ .env
import os
from dotenv import load_dotenv

load_dotenv()

API_KEY = os.getenv('MEXC_API_KEY')
SECRET_KEY = os.getenv('MEXC_SECRET_KEY')

def get_signature(query_string):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API"""
    return hmac.new(
        SECRET_KEY.encode('utf-8'),
        query_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

def make_request(endpoint, params=None, method='GET'):
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API"""
    base_url = "https://api.mexc.com"
    url = base_url + endpoint
    
    if params:
        query_string = urllib.parse.urlencode(params)
        url += "?" + query_string
    
    headers = {
        'X-MEXC-APIKEY': API_KEY,
        'Content-Type': 'application/json'
    }
    
    if method == 'POST':
        data = json.dumps(params).encode('utf-8')
        req = Request(url, data=data, headers=headers)
    else:
        req = Request(url, headers=headers)
    
    try:
        with urlopen(req) as response:
            return json.loads(response.read().decode())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def get_luma_balance():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å LUMA"""
    timestamp = int(time.time() * 1000)
    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }
    
    signature = get_signature(urllib.parse.urlencode(params))
    params['signature'] = signature
    
    result = make_request('/api/v3/account', params)
    
    if result and 'balances' in result:
        for balance in result['balances']:
            if balance['asset'] == 'LUMA':
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                return free, locked, total
    
    return 0, 0, 0

def sell_luma(quantity):
    """–ü—Ä–æ–¥–∞—Ç—å LUMA –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"""
    timestamp = int(time.time() * 1000)
    
    params = {
        'symbol': 'LUMAUSDT',
        'side': 'SELL',
        'type': 'MARKET',
        'quantity': quantity,
        'timestamp': timestamp,
        'recvWindow': 5000
    }
    
    signature = get_signature(urllib.parse.urlencode(params))
    params['signature'] = signature
    
    result = make_request('/api/v3/order', params, 'POST')
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –ü–†–û–°–¢–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å LUMA...")
    free, locked, total = get_luma_balance()
    
    if total <= 0:
        print("‚ùå LUMA –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–µ")
        return
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω LUMA:")
    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {free}")
    print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked}")
    print(f"   –í—Å–µ–≥–æ: {total}")
    
    # –ü—Ä–æ–¥–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π LUMA
    if free > 0:
        print(f"\nüî• –ü—Ä–æ–¥–∞–µ–º {free} LUMA...")
        
        confirm = input("–ü–†–û–î–ê–¢–¨? (yes/no): ")
        if confirm.lower() != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        result = sell_luma(free)
        
        if result and 'orderId' in result:
            print(f"‚úÖ LUMA –ü–†–û–î–ê–ù!")
            print(f"üÜî –û—Ä–¥–µ—Ä: {result['orderId']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {free}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result}")
    else:
        print("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ LUMA –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

if __name__ == "__main__":
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ API_KEY –∏ SECRET_KEY –Ω–∞ —Å–≤–æ–∏!")
    print("‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ simple_sell_luma.py")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    if not API_KEY or not SECRET_KEY:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ MEXC_API_KEY –∏ MEXC_SECRET_KEY")
    else:
        main() 