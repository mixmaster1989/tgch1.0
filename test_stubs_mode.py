#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–≥–ª—É—à–µ–∫ AI Trading Analyzer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Ç—Ä–∞—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ OpenRouter
"""

import asyncio
from datetime import datetime
from ai_trading_analyzer import AITradingAnalyzer

async def test_stubs_mode():
    """–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –∑–∞–≥–ª—É—à–µ–∫"""
    print("üîß –¢–ï–°–¢ –†–ï–ñ–ò–ú–ê –ó–ê–ì–õ–£–®–ï–ö AI TRADING ANALYZER")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    ai_analyzer = AITradingAnalyzer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º
    print(f"üìä –†–µ–∂–∏–º –∑–∞–≥–ª—É—à–µ–∫: {'–í–ö–õ–Æ–ß–ï–ù' if ai_analyzer.STUBS_MODE else '–í–´–ö–õ–Æ–ß–ï–ù'}")
    print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤: {'–î–ê' if ai_analyzer.STUBS_MODE else '–ù–ï–¢'}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_market_data = {
        "symbol": "ETHUSDT",
        "price": 3908.28,
        "change_24h": 0.0558,
        "volume_24h": 161764.47,
        "high_24h": 3968.0,
        "low_24h": 3694.7
    }
    
    test_perplexity_data = {
        "overall_sentiment": "positive",
        "overall_confidence": 0.8,
        "impact_score": 0.75,
        "news_analysis": {
            "sentiment": "positive",
            "key_events": ["–ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø—Ä–æ—Å —Ä–∞—Å—Ç–µ—Ç", "–†–æ—Å—Ç TVL –≤ DeFi"]
        }
    }
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    trading_decision = await ai_analyzer.analyze_and_decide(test_market_data, test_perplexity_data)
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("-" * 40)
    
    # –†–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    expert_responses = trading_decision.get('expert_analysis', {}).get('responses', [])
    print("üë®‚Äçüíº –†–ï–®–ï–ù–ò–Ø –≠–ö–°–ü–ï–†–¢–û–í:")
    for response in expert_responses:
        if isinstance(response, dict):
            expert_name = response.get('expert', 'UNKNOWN')
            decision = response.get('decision', 'UNKNOWN')
            confidence = response.get('confidence', 0.0)
            reason = response.get('reason', 'N/A')[:100] + "..." if len(response.get('reason', '')) > 100 else response.get('reason', 'N/A')
            print(f"   üîç {expert_name.upper()}: {decision} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            print()
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏
    final_decision = trading_decision.get('final_decision', {})
    print("‚öñÔ∏è –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –°–£–î–¨–ò:")
    print(f"   –†–µ—à–µ–Ω–∏–µ: {final_decision.get('final_decision', 'UNKNOWN')}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision.get('confidence', 0.0):.2f}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {final_decision.get('reason', 'N/A')[:150]}...")
    
    # –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
    expert_analysis = final_decision.get('expert_analysis', {})
    if expert_analysis:
        print(f"   –õ—É—á—à–∏–π —ç–∫—Å–ø–µ—Ä—Ç: {expert_analysis.get('best_expert', 'N/A')}")
        print(f"   –°–æ–≥–ª–∞—Å–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤: {expert_analysis.get('expert_agreement', 'N/A')}")
        print(f"   –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤: {expert_analysis.get('risk_assessment', 'N/A')}")
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("üí∞ –ö—Ä–µ–¥–∏—Ç—ã OpenRouter –ù–ï –ø–æ—Ç—Ä–∞—á–µ–Ω—ã!")
    print("üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–∫")

if __name__ == "__main__":
    asyncio.run(test_stubs_mode())
