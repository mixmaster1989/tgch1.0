#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è BTC/ETH –≤ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ 60/40
–ü—Ä–æ–¥–∞–µ—Ç BTC –∏ –ø–æ–∫—É–ø–∞–µ—Ç ETH –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ –ø–æ —Å—Ç–∞–∫–∞–Ω—É
–ë–ª–æ–∫–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º PnL
"""

############################################################
# üì¶ –ò–ú–ü–û–†–¢–´ –ò –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∏–ø—ã
############################################################

import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple
from decimal import Decimal

from mex_api import MexAPI
from mexc_advanced_api import MexAdvancedAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

############################################################
# üß∞ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –µ–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤ –º–æ–¥—É–ª—è
############################################################

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PortfolioBalancer:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è BTC/ETH"""
    
    def __init__(self):
        ############################################################
        # ‚öôÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –∫–ª–∏–µ–Ω—Ç—ã API, Telegram, —Ü–µ–ª–µ–≤—ã–µ –¥–æ–ª–∏ –∏ –∑–∞—â–∏—Ç—ã
        ############################################################
        self.mex_api = MexAPI()
        self.mex_adv_api = MexAdvancedAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.target_btc_ratio = 0.60  # 60% BTC
        self.target_eth_ratio = 0.40  # 40% ETH
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        self.rebalance_threshold = 0.05  # –ó–∞–ø—É—Å–∫–∞—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ > 5%
        self.min_rebalance_amount = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ ($10)
        self.rebalance_interval = 3600   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–±—ã—Ç–∫–æ–≤
        self.allow_negative_pnl_rebalance = False  # –ë–ª–æ–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –º–∏–Ω—É—Å–æ–≤–æ–º PnL
        self.min_positive_pnl = 0.10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π PnL –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        
        # –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ–∫
        self.last_rebalance_time = None
        self.min_rebalance_cooldown = 1800  # –ú–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_rebalances = 0
        self.blocked_rebalances = 0  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ PnL
        
    ############################################################
    # ‚úâÔ∏è TELEGRAM: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    ############################################################
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    ############################################################
    # üí∞ –ë–ê–õ–ê–ù–°–´ –ü–û–†–¢–§–ï–õ–Ø
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —á—Ç–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ BTC/ETH (free+locked)
    ############################################################
    def get_portfolio_balances(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã BTC –∏ ETH"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return {}
            
            balances = {}
            for balance in account_info['balances']:
                asset = balance['asset']
                if asset in ['BTC', 'ETH']:
                    free_amount = float(balance['free'])
                    locked_amount = float(balance['locked'])
                    total_amount = free_amount + locked_amount
                    
                    if total_amount > 0:
                        balances[asset] = {
                            'free': free_amount,
                            'locked': locked_amount,
                            'total': total_amount
                        }
            
            return balances
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    ############################################################
    # üíπ –°–¢–û–ò–ú–û–°–¢–¨ –ò –î–û–õ–ò –ü–û–†–¢–§–ï–õ–Ø
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω, —Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –∏ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    ############################################################
    def get_portfolio_values(self, balances: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ USDC"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            btc_price = self.mex_api.get_ticker_price('BTCUSDC')
            eth_price = self.mex_api.get_ticker_price('ETHUSDC')
            
            if not btc_price or not eth_price:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã BTC/ETH")
                return {}
            
            btc_price_value = float(btc_price['price'])
            eth_price_value = float(eth_price['price'])
            
            values = {
                'btc_price': btc_price_value,
                'eth_price': eth_price_value,
                'btc_value': 0.0,
                'eth_value': 0.0,
                'total_value': 0.0
            }
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if 'BTC' in balances:
                values['btc_value'] = balances['BTC']['total'] * btc_price_value
            
            if 'ETH' in balances:
                values['eth_value'] = balances['ETH']['total'] * eth_price_value
            
            values['total_value'] = values['btc_value'] + values['eth_value']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            if values['total_value'] > 0:
                values['btc_ratio'] = values['btc_value'] / values['total_value']
                values['eth_ratio'] = values['eth_value'] / values['total_value']
            else:
                values['btc_ratio'] = 0.0
                values['eth_ratio'] = 0.0
            
            return values
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {}
    
    ############################################################
    # üìà PnL –ê–ö–¢–ò–í–ê (–ó–ê–ì–õ–£–®–ö–ê)
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Ç–æ—á–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —É—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    ############################################################
    def calculate_pnl_for_asset(self, asset: str, quantity: float, current_price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å PnLMonitor
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 - –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {asset}: {e}")
            return 0.0
    
    ############################################################
    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–°–¢–ò –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø–æ—Ä–æ–≥–∏, –º–∏–Ω–∏–º—É–º—ã, –∫—É–ª–¥–∞—É–Ω—ã, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    ############################################################
    def check_rebalance_needed(self, values: Dict) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞"""
        try:
            if values['total_value'] < self.min_rebalance_amount:
                return False, f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${values['total_value']:.2f} < ${self.min_rebalance_amount}"
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞–∫—Ç–∏–≤–æ–≤ = 0, –Ω–µ –±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º!
            if values['btc_value'] == 0 or values['eth_value'] == 0:
                missing_asset = "ETH" if values['eth_value'] == 0 else "BTC"
                return False, f"‚ùå {missing_asset} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ! –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç—å –æ–±–∞ –∞–∫—Ç–∏–≤–∞."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ USDC –Ω—É–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            target_btc_value = values['total_value'] * self.target_btc_ratio
            target_eth_value = values['total_value'] * self.target_eth_ratio
            
            btc_adjustment = abs(values['btc_value'] - target_btc_value)
            eth_adjustment = abs(values['eth_value'] - target_eth_value)
            max_adjustment = max(btc_adjustment, eth_adjustment)
            
            if max_adjustment < 5.0:  # –ú–∏–Ω–∏–º—É–º $5 –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏
                return False, f"–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: ${max_adjustment:.2f} < $5.00"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
            btc_deviation = abs(values['btc_ratio'] - self.target_btc_ratio)
            eth_deviation = abs(values['eth_ratio'] - self.target_eth_ratio)
            
            max_deviation = max(btc_deviation, eth_deviation)
            
            if max_deviation < self.rebalance_threshold:
                return False, f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ {max_deviation*100:.1f}% < {self.rebalance_threshold*100:.1f}% –ø–æ—Ä–æ–≥–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            if (self.last_rebalance_time and 
                time.time() - self.last_rebalance_time < self.min_rebalance_cooldown):
                remaining = self.min_rebalance_cooldown - (time.time() - self.last_rebalance_time)
                return False, f"–ö—É–ª–¥–∞—É–Ω –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: –æ—Å—Ç–∞–ª–æ—Å—å {remaining/60:.1f} –º–∏–Ω"
            
            return True, f"–ù—É–∂–Ω–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞! –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {max_deviation*100:.1f}%, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: ${max_adjustment:.2f}"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    ############################################################
    # üìö –°–¢–ê–ö–ê–ù –ó–ê–Ø–í–û–ö
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ª—É—á—à–∏–µ —É—Ä–æ–≤–Ω–∏, —Å–ø—Ä–µ–¥, –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    ############################################################
    def get_orderbook_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        try:
            orderbook = self.mex_api.get_depth(symbol, limit=20)
            
            if 'bids' in orderbook and 'asks' in orderbook:
                bids = orderbook['bids'][:10]
                asks = orderbook['asks'][:10]
                
                best_bid = float(bids[0][0]) if bids else 0
                best_ask = float(asks[0][0]) if asks else 0
                
                spread = best_ask - best_bid
                spread_percent = (spread / best_bid) * 100 if best_bid > 0 else 0
                
                return {
                    'bids': bids,
                    'asks': asks,
                    'best_bid': best_bid,
                    'best_ask': best_ask,
                    'spread': spread,
                    'spread_percent': spread_percent
                }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            return None
    
    ############################################################
    # üéØ –†–ê–°–ß–Å–¢ –õ–ò–ú–ò–¢–ù–û–ô –¶–ï–ù–´
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø—Ä–∞–π—Å–∏–Ω–≥ –¥–ª—è BUY/SELL –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ø—Ä–µ–¥–∞
    ############################################################
    def calculate_limit_price(self, symbol: str, side: str) -> Optional[float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            orderbook = self.get_orderbook_data(symbol)
            
            if not orderbook:
                return None
            
            best_bid = orderbook['best_bid']
            best_ask = orderbook['best_ask']
            spread_percent = orderbook['spread_percent']
            
            if side == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π –ø–æ–∫—É–ø–∫–∏ (–º–µ–π–∫–µ—Ä)
                if spread_percent < 0.1:
                    return best_bid * 1.0001  # –ù–∞ 0.01% –≤—ã—à–µ
                else:
                    return best_bid * 1.0005  # –ù–∞ 0.05% –≤—ã—à–µ
            else:  # SELL
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –Ω–∏–∂–µ –ª—É—á—à–µ–π –ø—Ä–æ–¥–∞–∂–∏ (–º–µ–π–∫–µ—Ä)
                if spread_percent < 0.1:
                    return best_ask * 0.9999  # –ù–∞ 0.01% –Ω–∏–∂–µ
                else:
                    return best_ask * 0.9995  # –ù–∞ 0.05% –Ω–∏–∂–µ
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω—ã {symbol}: {e}")
            return None
    
    ############################################################
    # üßæ –ò–°–ü–û–õ–ù–ï–ù–ò–ï –û–î–ù–û–ô –°–î–ï–õ–ö–ò –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    ############################################################
    def execute_rebalance_trade(self, action: str, symbol: str, quantity: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"üîÑ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {action} {quantity:.6f} {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            side = 'SELL' if action == 'SELL' else 'BUY'
            limit_price = self.calculate_limit_price(symbol, side)
            
            if not limit_price:
                return {'success': False, 'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            orderbook = self.get_orderbook_data(symbol)
            
            logger.info(f"üìä –°—Ç–∞–∫–∞–Ω {symbol}:")
            logger.info(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook['best_bid']:.4f}")
            logger.info(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook['best_ask']:.4f}")
            logger.info(f"   –°–ø—Ä–µ–¥: {orderbook['spread_percent']:.4f}%")
            logger.info(f"   –ù–∞—à–∞ —Ü–µ–Ω–∞: ${limit_price:.4f}")
            
            # üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
            if action == 'BUY':
                usdc_balance = self.get_usdc_balance()
                required_usdc = quantity * limit_price
                
                logger.info(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π:")
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω–æ USDC: ${usdc_balance:.2f}")
                logger.info(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è USDC: ${required_usdc:.2f}")
                
                if usdc_balance < required_usdc:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}")
                    return {'success': False, 'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}'}
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side=side,
                quantity=quantity,
                price=limit_price
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
                
                # üî• –ù–û–í–û–ï: –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è SELL)
                if action == 'SELL':
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order['orderId']}...")
                    import time
                    time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                    try:
                        order_status = self.mex_api.get_order_status(symbol, order['orderId'])
                        if order_status and order_status.get('status') == 'FILLED':
                            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order['orderId']} –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        else:
                            logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order['orderId']} –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_status}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {e}")
                
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': limit_price,
                    'order': order
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {order}")
                return {'success': False, 'error': f'API –æ—à–∏–±–∫–∞: {order}'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ {symbol}: {e}")
            return {'success': False, 'error': str(e)}
    
    ############################################################
    # üßÆ –†–ê–°–ß–Å–¢ –ü–õ–ê–ù–ê –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: SELL/BUY —à–∞–≥–∏ —Å —É—á—ë—Ç–æ–º PnL –∏ –Ω–∞–ª–∏—á–∏—è USDC
    ############################################################
    def calculate_rebalance_trades(self, balances: Dict, values: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ—Ä–≥–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º PnL –∏ USDC"""
        try:
            target_btc_value = values['total_value'] * self.target_btc_ratio
            target_eth_value = values['total_value'] * self.target_eth_ratio
            
            btc_diff = values['btc_value'] - target_btc_value
            eth_diff = values['eth_value'] - target_eth_value
            
            # –ü–æ–ª—É—á–∞–µ–º PnL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            btc_pnl = self.get_asset_pnl('BTC', balances, values)
            eth_pnl = self.get_asset_pnl('ETH', balances, values)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π USDC
            usdc_balance = self.get_usdc_balance()
            
            trades = []
            
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –∑–∞ USDC
            
            # –ï—Å–ª–∏ BTC –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã - –ø—Ä–æ–¥–∞–µ–º BTC (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ)
            if btc_diff > 0:
                btc_to_sell = btc_diff / values['btc_price']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL BTC - –ø—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ
                if btc_pnl >= 0:  # BTC –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ
                    if btc_to_sell >= 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç BTC
                        btc_to_sell = round(btc_to_sell, 6)
                        trades.append({
                            'action': 'SELL',
                            'symbol': 'BTCUSDC', 
                            'quantity': btc_to_sell,
                            'value': btc_to_sell * values['btc_price'],
                            'pnl': btc_pnl,
                            'reason': f'BTC –≤ –ø–ª—é—Å–µ (PnL: ${btc_pnl:.4f})'
                        })
                else:
                    logger.warning(f"üö´ –ù–µ –ø—Ä–æ–¥–∞–µ–º BTC: PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ${btc_pnl:.4f}")
            
            # –ï—Å–ª–∏ ETH –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã - –ø–æ–∫—É–ø–∞–µ–º ETH
            if eth_diff < 0:
                eth_to_buy = abs(eth_diff) / values['eth_price']
                eth_cost = eth_to_buy * values['eth_price']
                
                if eth_to_buy >= 0.001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç ETH
                    eth_to_buy = round(eth_to_buy, 6)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ USDC
                    if usdc_balance >= eth_cost:
                        # –•–≤–∞—Ç–∞–µ—Ç USDC - –ø–æ–∫—É–ø–∞–µ–º
                        trades.append({
                            'action': 'BUY',
                            'symbol': 'ETHUSDC',
                            'quantity': eth_to_buy,
                            'value': eth_cost,
                            'funding_source': 'USDC',
                            'reason': f'–ü–æ–∫—É–ø–∫–∞ –∑–∞ USDC (–¥–æ—Å—Ç—É–ø–Ω–æ: ${usdc_balance:.2f})'
                        })
                    else:
                        # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç USDC - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å BTC
                        usdc_shortage = eth_cost - usdc_balance
                        btc_to_sell_for_usdc = usdc_shortage / values['btc_price']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL BTC - –ø—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ
                        if btc_pnl >= 0:  # BTC –≤ –ø–ª—é—Å–µ
                            if btc_to_sell_for_usdc >= 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç BTC
                                btc_to_sell_for_usdc = round(btc_to_sell_for_usdc, 6)
                                trades.append({
                                    'action': 'SELL',
                                    'symbol': 'BTCUSDC',
                                    'quantity': btc_to_sell_for_usdc,
                                    'value': btc_to_sell_for_usdc * values['btc_price'],
                                    'pnl': btc_pnl,
                                    'reason': f'–ü—Ä–æ–¥–∞–∂–∞ BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH (PnL: ${btc_pnl:.4f})'
                                })
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É ETH
                                trades.append({
                                    'action': 'BUY',
                                    'symbol': 'ETHUSDC',
                                    'quantity': eth_to_buy,
                                    'value': eth_cost,
                                    'funding_source': 'BTC_SALE',
                                    'reason': f'–ü–æ–∫—É–ø–∫–∞ ETH –∑–∞ –≤—ã—Ä—É—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ BTC'
                                })
                        else:
                            logger.warning(f"üö´ –ù–µ –ø—Ä–æ–¥–∞–µ–º BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH: PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ${btc_pnl:.4f}")
                            logger.info(f"‚è≥ –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - ETH –≤ –º–∏–Ω—É—Å–µ, BTC –≤ –º–∏–Ω—É—Å–µ")
            
            return {
                'trades': trades,
                'target_btc_value': target_btc_value,
                'target_eth_value': target_eth_value,
                'btc_diff': btc_diff,
                'eth_diff': eth_diff,
                'btc_pnl': btc_pnl,
                'eth_pnl': eth_pnl,
                'usdc_balance': usdc_balance
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ä–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'trades': [], 'error': str(e)}
    ############################################################
    # ü§ñ –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ü–û–†–¢–§–ï–õ–Ø
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞–Ω–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ
    ############################################################
    async def execute_portfolio_rebalance(self) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_portfolio_balances()
            if not balances:
                return {'success': False, 'error': '–ù–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ BTC/ETH'}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            values = self.get_portfolio_values(balances)
            if not values:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            need_rebalance, reason = self.check_rebalance_needed(values)
            if not need_rebalance:
                return {'success': False, 'error': reason, 'reason': 'not_needed'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PnLMonitor
            if not self.allow_negative_pnl_rebalance:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è
                # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ—Ä–≥–∏
            rebalance_plan = self.calculate_rebalance_trades(balances, values)
            
            if not rebalance_plan['trades']:
                return {'success': False, 'error': '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏'}
            
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            results = {
                'success': True,
                'timestamp': datetime.now(),
                'before': {
                    'btc_ratio': values['btc_ratio'],
                    'eth_ratio': values['eth_ratio'],
                    'total_value': values['total_value']
                },
                'trades': [],
                'plan': rebalance_plan
            }
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–∏ –Ω–∞ SELL –∏ BUY
            sell_trades = [t for t in rebalance_plan['trades'] if t['action'] == 'SELL']
            buy_trades = [t for t in rebalance_plan['trades'] if t['action'] == 'BUY']
            
            logger.info(f"üìä –ü–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤: {len(sell_trades)} –ø—Ä–æ–¥–∞–∂, {len(buy_trades)} –ø–æ–∫—É–ø–æ–∫")
            
            # üî• –®–ê–ì 1: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ SELL –æ–ø–µ—Ä–∞—Ü–∏–∏
            for trade in sell_trades:
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É: {trade['symbol']} {trade['quantity']:.6f}")
                trade_result = self.execute_rebalance_trade(
                    trade['action'],
                    trade['symbol'],
                    trade['quantity']
                )
                
                trade['result'] = trade_result
                results['trades'].append(trade)
                
                if not trade_result['success']:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {trade_result['error']}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–æ—Ä–≥–æ–≤
                else:
                    logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {trade['symbol']}")
            
            # üî• –®–ê–ì 2: –ñ–¥–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC (–µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–¥–∞–∂–∏)
            if sell_trades:
                logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC –æ—Ç –ø—Ä–æ–¥–∞–∂...")
                import time
                time.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDC
                new_usdc_balance = self.get_usdc_balance()
                logger.info(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDC: ${new_usdc_balance:.2f}")
            
            # üî• –®–ê–ì 3: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ BUY –æ–ø–µ—Ä–∞—Ü–∏–∏
            for trade in buy_trades:
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É: {trade['symbol']} {trade['quantity']:.6f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDC –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
                usdc_balance = self.get_usdc_balance()
                required_usdc = trade['quantity'] * trade.get('price', 0)
                
                if usdc_balance < required_usdc:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {trade['symbol']}: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}")
                    trade_result = {'success': False, 'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}'}
                else:
                    trade_result = self.execute_rebalance_trade(
                        trade['action'],
                        trade['symbol'],
                        trade['quantity']
                    )
                
                trade['result'] = trade_result
                results['trades'].append(trade)
                
                if not trade_result['success']:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {trade_result['error']}")
                else:
                    logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {trade['symbol']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.total_rebalances += 1
            self.last_rebalance_time = time.time()
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {'success': False, 'error': str(e)}
    
    ############################################################
    # üì® –û–¢–ß–Å–¢ –î–õ–Ø TELEGRAM
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    ############################################################
    def format_rebalance_report(self, results: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ"""
        try:
            if not results['success']:
                error = results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                reason = results.get('reason', 'unknown')
                
                if reason == 'not_needed':
                    return (
                        "<b>‚öñÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ù–ï –ù–£–ñ–ù–ê</b>\n\n"
                        f"üìä –ü—Ä–∏—á–∏–Ω–∞: {error}\n"
                        f"üéØ –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: BTC {self.target_btc_ratio*100:.0f}% / ETH {self.target_eth_ratio*100:.0f}%\n"
                        f"üìè –ü–æ—Ä–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {self.rebalance_threshold*100:.1f}%\n\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                    )
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {error}"
            
            message = "<b>‚öñÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ü–û–†–¢–§–ï–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ê</b>\n"
            message += "=" * 50 + "\n\n"
            
            message += f"üìÖ –í—Ä–µ–º—è: {results['timestamp'].strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${results['before']['total_value']:.2f}\n\n"
            
            message += "<b>üìä –ü–†–û–ü–û–†–¶–ò–ò –î–û –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò:</b>\n"
            message += f"üü° BTC: {results['before']['btc_ratio']*100:.1f}% (—Ü–µ–ª—å: {self.target_btc_ratio*100:.0f}%)\n"
            message += f"üîµ ETH: {results['before']['eth_ratio']*100:.1f}% (—Ü–µ–ª—å: {self.target_eth_ratio*100:.0f}%)\n\n"
            
            if results['trades']:
                message += "<b>üîÑ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –¢–û–†–ì–ò:</b>\n"
                for trade in results['trades']:
                    if trade['result']['success']:
                        action_emoji = "üî¥" if trade['action'] == 'SELL' else "üü¢"
                        message += f"{action_emoji} {trade['action']} {trade['symbol']}\n"
                        message += f"   üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade['quantity']:.6f}\n"
                        message += f"   üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${trade['value']:.2f}\n"
                        message += f"   üéØ –¶–µ–Ω–∞: ${trade['result']['price']:.4f}\n"
                        message += f"   üÜî –û—Ä–¥–µ—Ä: {trade['result']['order_id']}\n\n"
                    else:
                        message += f"‚ùå {trade['action']} {trade['symbol']}: {trade['result']['error']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += "<b>üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            message += f"üéØ –í—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ–∫: {self.total_rebalances}\n"
            message += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {self.blocked_rebalances}\n"
            message += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.rebalance_interval // 60} –º–∏–Ω\n\n"
            
            message += "=" * 50 + "\n"
            message += "<b>‚öñÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –ü–û–†–¢–§–ï–õ–Ø</b>"
            
            return message
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"
    
    ############################################################
    # üîé –°–ò–ù–•–†–û–ù–ù–ê–Ø –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê (–ê–ù–ê–õ–ò–¢–ò–ö–ê)
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: —Ä–∞—Å—á—ë—Ç –ø–ª–∞–Ω–∞ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
    ############################################################
    def execute_portfolio_rebalance_sync(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_portfolio_balances()
            if not balances:
                return {'success': False, 'error': '–ù–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ BTC/ETH'}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            values = self.get_portfolio_values(balances)
            if not values:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            need_rebalance, reason = self.check_rebalance_needed(values)
            if not need_rebalance:
                return {'success': False, 'error': reason, 'reason': 'not_needed'}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            if not self.allow_negative_pnl_rebalance:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ PnL –ø–æ—Ä—Ç—Ñ–µ–ª—è
                # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ—Ä–≥–∏
            rebalance_plan = self.calculate_rebalance_trades(balances, values)
            
            if not rebalance_plan['trades']:
                return {'success': False, 'error': '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏'}
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è)
            results = {
                'success': True,
                'timestamp': datetime.now(),
                'simulation': True,  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–º—É–ª—è—Ü–∏—é
                'before': {
                    'btc_ratio': values['btc_ratio'],
                    'eth_ratio': values['eth_ratio'],
                    'total_value': values['total_value']
                },
                'trades': [],
                'plan': rebalance_plan,
                'note': '–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤'
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.last_rebalance_time = time.time()
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'success': False, 'error': str(e)}

    ############################################################
    # üìà PnL –ü–û –ê–ö–¢–ò–í–ê–ú (–ü–†–û–°–¢–û–ô –û–¶–ï–ù–û–ß–ù–´–ô)
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –æ—Ü–µ–Ω–∫–∞ PnL –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ä–µ—à–µ–Ω–∏–π SELL/BUY
    ############################################################
    def get_asset_pnl(self, asset: str, balances: Dict, values: Dict) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å PnL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        try:
            # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ —Ü–µ–Ω–∞
            if asset == 'BTC':
                quantity = balances.get('BTC', {}).get('total', 0.0)
                current_price = values['btc_price']
                base = 'BTC'
            elif asset == 'ETH':
                quantity = balances.get('ETH', {}).get('total', 0.0)
                current_price = values['eth_price']
                base = 'ETH'
            else:
                return 0.0

            if quantity <= 0:
                return 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏–º–≤–æ–ª —Å–¥–µ–ª–∫–∏ (USDC –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ USDT)
            preferred_pairs = [f"{base}USDC", f"{base}USDT"]
            symbol = None
            for pair in preferred_pairs:
                try:
                    info = self.mex_api.get_24hr_ticker(pair)
                    if isinstance(info, dict) and ('lastPrice' in info or 'priceChangePercent' in info):
                        symbol = pair
                        break
                except Exception:
                    continue
            if symbol is None:
                # –§–æ–ª–ª–±–µ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º USDC –ª–æ–≥–∏—á–µ—Å–∫–∏
                symbol = f"{base}USDC"

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏ —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–æ–∑–∏—Ü–∏–∏ (FIFO-–ø–æ–¥–æ–±–Ω–æ)
            trades = []
            try:
                trades = self.mex_adv_api.get_my_trades(symbol, limit=500) or []
            except Exception:
                trades = []

            if not trades:
                # –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
                return 0.0

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            def trade_time(t):
                return t.get('time') or t.get('timestamp') or t.get('transactTime') or 0

            trades = sorted(trades, key=trade_time)

            position_qty = 0.0
            avg_cost = 0.0  # —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ (USDC/USDT)

            # –î–ª—è –∫–æ–º–∏—Å—Å–∏–π: –µ—Å–ª–∏ –∫–æ–º–∏—Å—Å–∏—è –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ ‚Äî –ø–ª—é—Å—É–µ–º –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            quote = symbol.replace(base, '')  # USDC/USDT

            for t in trades:
                try:
                    is_buyer = bool(t.get('isBuyer', t.get('is_buyer', False)))
                    price = float(t.get('price') or t.get('p') or 0)
                    qty = float(t.get('qty') or t.get('q') or 0)
                    quote_qty = float(t.get('quoteQty') or t.get('quote_qty') or price * qty)
                    commission = float(t.get('commission') or 0)
                    commission_asset = t.get('commissionAsset') or t.get('commission_asset')

                    # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤ —Ç–æ–π –∂–µ –≤–∞–ª—é—Ç–µ
                    cost_with_fee = quote_qty
                    if commission_asset and commission_asset.upper() == quote.upper():
                        cost_with_fee += commission

                    if is_buyer:
                        # –ü–æ–∫—É–ø–∫–∞: –ø–µ—Ä–µ—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–π
                        new_total_cost = avg_cost * position_qty + cost_with_fee
                        position_qty += qty
                        if position_qty > 0:
                            avg_cost = new_total_cost / position_qty
                    else:
                        # –ü—Ä–æ–¥–∞–∂–∞: —É–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é; —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
                        position_qty -= qty
                        if position_qty < 0:
                            # –£—à–ª–∏ –≤ —à–æ—Ä—Ç –ø–æ –¥–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –æ–±–Ω—É–ª—è–µ–º (–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ)
                            position_qty = 0.0
                except Exception:
                    continue

            # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ—é—â—É—é—Å—è —Å—Ä–µ–¥–Ω—é—é
            # PnL —Å—á–∏—Ç–∞–µ–º –≤ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–ª—é—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            if position_qty <= 0:
                return 0.0

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫ –≤–∞–ª—é—Ç–µ —Å–∏–º–≤–æ–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–º–≤–æ–ª USDT, –∞ –∑–Ω–∞—á–µ–Ω–∏—è —É –Ω–∞—Å –≤ USDC)
            current_in_quote = current_price
            if quote == 'USDT':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDC->USDT –∫—É—Ä—Å–æ–º USDCUSDT
                try:
                    usdcusdt = self.mex_api.get_ticker_price('USDCUSDT')
                    rate = float(usdcusdt.get('price', 1.0))
                    current_in_quote = current_price / rate if rate != 0 else current_price
                except Exception:
                    pass

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ balances, –∞ –Ω–µ position_qty –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–¥–µ–∂–Ω–µ–µ)
            current_qty = quantity
            pnl = (current_in_quote - avg_cost) * current_qty
            return pnl
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {asset}: {e}")
            return 0.0
    
    ############################################################
    # üíµ –ë–ê–õ–ê–ù–° USDC
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ USDC –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–∞–º–∏
    ############################################################
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'success': False, 'error': str(e)} 