#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤ - —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ SELL, –ø–æ—Ç–æ–º –≤—Å–µ BUY
"""

def fix_trade_execution_order():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('portfolio_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤
    old_execution = '''            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–∏
            results = {
                'success': True,
                'timestamp': datetime.now(),
                'before': {
                    'btc_ratio': values['btc_ratio'],
                    'eth_ratio': values['eth_ratio'],
                    'total_value': values['total_value']
                },
                'trades': [],
                'plan': rebalance_plan
            }
            
            for trade in rebalance_plan['trades']:
                trade_result = self.execute_rebalance_trade(
                    trade['action'],
                    trade['symbol'],
                    trade['quantity']
                )
                
                trade['result'] = trade_result
                results['trades'].append(trade)
                
                if not trade_result['success']:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–∞: {trade_result['error']}")'''
    
    new_execution = '''            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            results = {
                'success': True,
                'timestamp': datetime.now(),
                'before': {
                    'btc_ratio': values['btc_ratio'],
                    'eth_ratio': values['eth_ratio'],
                    'total_value': values['total_value']
                },
                'trades': [],
                'plan': rebalance_plan
            }
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–∏ –Ω–∞ SELL –∏ BUY
            sell_trades = [t for t in rebalance_plan['trades'] if t['action'] == 'SELL']
            buy_trades = [t for t in rebalance_plan['trades'] if t['action'] == 'BUY']
            
            logger.info(f"üìä –ü–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤: {len(sell_trades)} –ø—Ä–æ–¥–∞–∂, {len(buy_trades)} –ø–æ–∫—É–ø–æ–∫")
            
            # üî• –®–ê–ì 1: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ SELL –æ–ø–µ—Ä–∞—Ü–∏–∏
            for trade in sell_trades:
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–¥–∞–∂—É: {trade['symbol']} {trade['quantity']:.6f}")
                trade_result = self.execute_rebalance_trade(
                    trade['action'],
                    trade['symbol'],
                    trade['quantity']
                )
                
                trade['result'] = trade_result
                results['trades'].append(trade)
                
                if not trade_result['success']:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {trade_result['error']}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–æ—Ä–≥–æ–≤
                else:
                    logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {trade['symbol']}")
            
            # üî• –®–ê–ì 2: –ñ–¥–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC (–µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–æ–¥–∞–∂–∏)
            if sell_trades:
                logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC –æ—Ç –ø—Ä–æ–¥–∞–∂...")
                import time
                time.sleep(3)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è USDC
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDC
                new_usdc_balance = self.get_usdc_balance()
                logger.info(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDC: ${new_usdc_balance:.2f}")
            
            # üî• –®–ê–ì 3: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ BUY –æ–ø–µ—Ä–∞—Ü–∏–∏
            for trade in buy_trades:
                logger.info(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É: {trade['symbol']} {trade['quantity']:.6f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDC –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
                usdc_balance = self.get_usdc_balance()
                required_usdc = trade['quantity'] * trade.get('price', 0)
                
                if usdc_balance < required_usdc:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {trade['symbol']}: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}")
                    trade_result = {'success': False, 'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}'}
                else:
                    trade_result = self.execute_rebalance_trade(
                        trade['action'],
                        trade['symbol'],
                        trade['quantity']
                    )
                
                trade['result'] = trade_result
                results['trades'].append(trade)
                
                if not trade_result['success']:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {trade_result['error']}")
                else:
                    logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {trade['symbol']}")'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    content = content.replace(old_execution, new_execution)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('portfolio_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ portfolio_balancer.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤")

if __name__ == "__main__":
    fix_trade_execution_order()
