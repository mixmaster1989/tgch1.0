#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–∞–∂–∞ SOL –∏ KAVA –ø–æ —Ä—ã–Ω–∫—É –∏ –ø–æ–∫—É–ø–∫–∞ USDC
"""

import time
import logging
from datetime import datetime
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SellSolKavaBuyUsdc:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC
        self.target_usdc_amount = 15.0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.info(f"Telegram: {message}")
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_account_balances(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return {}
            
            balances = {}
            for balance in account_info['balances']:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total > 0:
                    balances[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': total
                    }
            
            return balances
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.mex_api.get_ticker_price(symbol)
            if 'price' in ticker:
                return float(ticker['price'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0
    
    def place_market_sell_order(self, symbol: str, quantity: float) -> dict:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        try:
            logger.info(f"üì§ –ü—Ä–æ–¥–∞–∂–∞ {quantity} {symbol} –ø–æ —Ä—ã–Ω–∫—É...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            order = self.mex_api.place_order(
                symbol=symbol,
                side='SELL',
                quantity=quantity,
                price=None  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
            return order
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol}: {e}")
            return {'error': str(e)}
    
    def place_market_buy_order(self, symbol: str, quote_quantity: float) -> dict:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        try:
            logger.info(f"üì• –ü–æ–∫—É–ø–∫–∞ {symbol} –Ω–∞ ${quote_quantity} –ø–æ —Ä—ã–Ω–∫—É...")
            
            # –°–æ–∑–¥–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            order = self.mex_api.place_order(
                symbol=symbol,
                side='BUY',
                quantity=quote_quantity,
                price=None  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            )
            
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
            return order
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol}: {e}")
            return {'error': str(e)}
    
    def execute_sell_and_buy(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É SOL/KAVA –∏ –ø–æ–∫—É–ø–∫—É USDC"""
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é: –ø—Ä–æ–¥–∞–∂–∞ SOL/KAVA ‚Üí –ø–æ–∫—É–ø–∫–∞ USDC")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_account_balances()
            if not balances:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã SOL –∏ KAVA
            sol_balance = balances.get('SOL', {}).get('free', 0)
            kava_balance = balances.get('KAVA', {}).get('free', 0)
            
            logger.info(f"üìä –ë–∞–ª–∞–Ω—Å—ã: SOL={sol_balance}, KAVA={kava_balance}")
            
            if sol_balance <= 0 and kava_balance <= 0:
                logger.warning("–ù–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ SOL –∏ KAVA –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            sol_price = self.get_current_price('SOLUSDT')
            kava_price = self.get_current_price('KAVAUSDT')
            
            logger.info(f"üí∞ –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã: SOL=${sol_price}, KAVA=${kava_price}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –≤—ã—Ä—É—á–∫—É
            sol_value = sol_balance * sol_price
            kava_value = kava_balance * kava_price
            total_expected_revenue = sol_value + kava_value
            
            logger.info(f"üíµ –û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞: SOL=${sol_value:.2f}, KAVA=${kava_value:.2f}, –í—Å–µ–≥–æ=${total_expected_revenue:.2f}")
            
            # –ü—Ä–æ–¥–∞–µ–º SOL –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å
            sol_order = None
            if sol_balance > 0:
                logger.info(f"üì§ –ü—Ä–æ–¥–∞–µ–º {sol_balance} SOL –ø–æ —Ä—ã–Ω–∫—É...")
                sol_order = self.place_market_sell_order('SOLUSDT', sol_balance)
                if 'error' in sol_order:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ SOL: {sol_order['error']}")
                    return False
            
            # –ü—Ä–æ–¥–∞–µ–º KAVA –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å
            kava_order = None
            if kava_balance > 0:
                logger.info(f"üì§ –ü—Ä–æ–¥–∞–µ–º {kava_balance} KAVA –ø–æ —Ä—ã–Ω–∫—É...")
                kava_order = self.place_market_sell_order('KAVAUSDT', kava_balance)
                if 'error' in kava_order:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ KAVA: {kava_order['error']}")
                    return False
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
            logger.info("‚è≥ –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤...")
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT
            new_balances = self.get_account_balances()
            usdt_balance = new_balances.get('USDT', {}).get('free', 0)
            
            logger.info(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            
            # –ü–æ–∫—É–ø–∞–µ–º USDC –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É
            if usdt_balance > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É, –Ω–æ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
                buy_amount = usdt_balance * 0.99  # 1% –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
                
                logger.info(f"üì• –ü–æ–∫—É–ø–∞–µ–º USDC –Ω–∞ ${buy_amount:.2f} (–¥–æ—Å—Ç—É–ø–Ω–æ ${usdt_balance:.2f})...")
                usdc_order = self.place_market_buy_order('USDCUSDT', buy_amount)
                
                if 'error' in usdc_order:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ USDC: {usdc_order['error']}")
                    return False
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = f"‚úÖ <b>–û–ü–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
                report += f"üì§ <b>–ü—Ä–æ–¥–∞–Ω–æ:</b>\n"
                if sol_order:
                    report += f"   SOL: {sol_balance} –º–æ–Ω–µ—Ç\n"
                if kava_order:
                    report += f"   KAVA: {kava_balance} –º–æ–Ω–µ—Ç\n"
                report += f"üì• <b>–ö—É–ø–ª–µ–Ω–æ:</b>\n"
                report += f"   USDC: ${buy_amount:.2f}\n\n"
                report += f"üí∞ –í—ã—Ä—É—á–∫–∞: ${usdt_balance:.2f}\n"
                report += f"üí∏ –ö–æ–º–∏—Å—Å–∏–∏: ~${(total_expected_revenue - usdt_balance):.2f}\n"
                report += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                
                self.send_telegram_message(report)
                logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                return True
            else:
                logger.error(f"–ù–µ—Ç USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC")
                return False
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}"
            logger.error(error_msg)
            self.send_telegram_message(error_msg)
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ SOL/KAVA –∏ –ø–æ–∫—É–ø–∫–∏ USDC")
        
        success = self.execute_sell_and_buy()
        
        if success:
            print("\n" + "="*60)
            print("‚úÖ –û–ü–ï–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê")
            print("="*60)
            print("üì§ –ü—Ä–æ–¥–∞–Ω—ã SOL –∏ KAVA –ø–æ —Ä—ã–Ω–∫—É")
            print("üì• –ö—É–ø–ª–µ–Ω–æ $15 USDC")
            print("="*60)
        else:
            print("\n" + "="*60)
            print("‚ùå –û–ü–ï–†–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
            print("="*60)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    trader = SellSolKavaBuyUsdc()
    trader.run()

if __name__ == "__main__":
    main()
