#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ –ø—ã–ª–∏–Ω–æ–∫: –¥–æ–∫—É–ø–∏—Ç—å –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –∏ –ø—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –æ—Å—Ç–∞—Ç–æ–∫ –≤ USDT
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º free:
  - –°—Ç—Ä–æ–∏–º –ø–∞—Ä—É SYMBOLUSDT
  - –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –Ω–æ—Ç–∏–æ–Ω–∞–ª < minNotional (–∏–ª–∏ 1 USDT –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –¥–æ–∫—É–ø–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
  - –ó–∞—Ç–µ–º –ø—Ä–æ–¥–∞—ë–º –≤–µ—Å—å –æ–±—ä—ë–º –º–∞—Ä–∫–µ—Ç–æ–º
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º 2 USDT –Ω–∞ –¥–æ–∫—É–ø–∫—É –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª (safety)
"""

import time
from typing import Dict, Optional

from mex_api import MexAPI
from mexc_advanced_api import MexAdvancedAPI

SAFETY_TOPUP_USDT_LIMIT = 4.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–∫—É–ø–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª


def get_rules(adv: MexAdvancedAPI, symbol: str) -> Dict:
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞. –ï—Å–ª–∏ LOT_SIZE –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–∑—è—Ç—å baseSizePrecision –∫–∞–∫ step."""
    rules: Dict = {}
    try:
        rules = adv.get_symbol_rules(symbol) or {}
    except Exception:
        rules = {}

    # –ï—Å–ª–∏ –Ω–µ—Ç stepSize/minQty ‚Äî –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ exchangeInfo v3
    if not rules or float(rules.get('stepSize', 0) or 0) == 0:
        try:
            mex = MexAPI()
            ex = mex.get_exchange_info()
            for s in (ex.get('symbols') or []):
                if s.get('symbol') == symbol:
                    # baseSizePrecision –≤ v3 –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ —à–∞–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "0.1"
                    base_size_prec = s.get('baseSizePrecision')
                    if isinstance(base_size_prec, str):
                        try:
                            step = float(base_size_prec)
                            if step > 0:
                                rules.setdefault('quantityPrecision', 8)
                                rules['stepSize'] = step
                        except Exception:
                            pass
                    break
        except Exception:
            pass

    return rules


def get_price(api: MexAPI, symbol: str) -> Optional[float]:
	data = api.get_ticker_price(symbol)
	try:
		if isinstance(data, dict) and 'price' in data:
			return float(data['price'])
	except Exception:
		return None
	return None


def round_down(value: float, decimals: int) -> float:
	if decimals <= 0:
		return float(int(value))
	factor = 10 ** decimals
	return int(value * factor) / factor


def apply_step(value: float, step: float) -> float:
	if step and step > 0:
		return (int(value / step)) * step
	return value


def compute_sell_qty(free_qty: float, rules: Dict) -> float:
	qty_prec = int(rules.get('quantityPrecision', 8) or 8)
	step = float(rules.get('stepSize', 0) or 0)
	q = max(0.0, free_qty * 0.999)
	q = round_down(q, qty_prec)
	q = apply_step(q, step)
	return max(0.0, q)


def main():
	api = MexAPI()
	adv = MexAdvancedAPI()

	info = api.get_account_info()
	balances = info.get('balances', []) if isinstance(info, dict) else []
	if not balances:
		print('‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã')
		return

	print('üîç –ü–æ–∏—Å–∫ –ø—ã–ª–∏–Ω–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏...')

	for b in balances:
		asset = b.get('asset')
		try:
			free = float(b.get('free', 0))
		except Exception:
			free = 0.0
		if not asset or free <= 0:
			continue
		if asset == 'USDT':
			continue

		symbol = f"{asset}USDT"
		rules = get_rules(adv, symbol)
		min_notional = float(rules.get('minNotional', 1.0) or 1.0)
		qty_prec = int(rules.get('quantityPrecision', 8) or 8)
		step = float(rules.get('stepSize', 0) or 0)

		price = get_price(api, symbol)
		if not price or price <= 0:
			print(f"{symbol}: –ø—Ä–æ–ø—É—Å–∫ ‚Äî –Ω–µ—Ç —Ü–µ–Ω—ã")
			continue

		notional = free * price
		need_topup_usdt = max(0.0, min_notional - notional)

		# –ï—Å–ª–∏ —É–∂–µ >= minNotional ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞—ë–º
		if need_topup_usdt <= 0.0:
			sell_qty = compute_sell_qty(free, rules)
			if sell_qty <= 0:
				print(f"{symbol}: –ø—Ä–æ–ø—É—Å–∫ ‚Äî –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è")
				continue
			resp = api.place_market_order(symbol=symbol, side='SELL', quantity=sell_qty)
			print(f"{symbol}: SELL {sell_qty} -> {resp}")
			time.sleep(0.2)
			continue

		# –ù—É–∂–Ω–∞ –¥–æ–∫—É–ø–∫–∞, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤–µ—Ä—Ö–Ω–∏–º –ª–∏–º–∏—Ç–æ–º
		if need_topup_usdt > SAFETY_TOPUP_USDT_LIMIT:
			print(f"{symbol}: –ø—Ä–æ–ø—É—Å–∫ ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–∫—É–ø–∏—Ç—å {need_topup_usdt:.2f} USDT (> {SAFETY_TOPUP_USDT_LIMIT} USDT)")
			continue

		# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–∫—É–ø–∫–∏
		topup_qty = need_topup_usdt / price
		topup_qty = round_down(topup_qty, qty_prec)
		topup_qty = apply_step(topup_qty, step)
		if topup_qty <= 0:
			# –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –¥–æ–∫—É–ø–∫–∞ –ø–æ —à–∞–≥—É
			min_step_qty = step if step > 0 else (10 ** -qty_prec)
			topup_qty = min_step_qty
		
		print(f"{symbol}: –¥–æ–∫—É–ø–∫–∞ ~{need_topup_usdt:.4f} USDT ({topup_qty} {asset}) –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è minNotional {min_notional}")
		buy_resp = api.place_market_order(symbol=symbol, side='BUY', quantity=topup_qty)
		print(f"{symbol}: BUY {topup_qty} -> {buy_resp}")
		time.sleep(0.4)

		# –ü–æ–≤—Ç–æ—Ä–Ω–æ —á–∏—Ç–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ –ø—Ä–æ–¥–∞—ë–º –≤–µ—Å—å –æ–±—ä—ë–º
		info2 = api.get_account_info()
		new_free = free
		for bb in info2.get('balances', []):
			if bb.get('asset') == asset:
				try:
					new_free = float(bb.get('free', 0))
				except Exception:
					new_free = new_free
				break
		sell_qty = compute_sell_qty(new_free, rules)
		if sell_qty <= 0:
			print(f"{symbol}: –ø–æ—Å–ª–µ –¥–æ–∫—É–ø–∫–∏ –Ω–µ—á–µ–≥–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å (sell_qty=0)")
			continue
		sell_resp = api.place_market_order(symbol=symbol, side='SELL', quantity=sell_qty)
		print(f"{symbol}: SELL {sell_qty} -> {sell_resp}")
		time.sleep(0.4)

	print('‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—ã–ª–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


if __name__ == '__main__':
	main()
