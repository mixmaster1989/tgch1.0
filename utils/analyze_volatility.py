#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ BTCUSDC –∏ ETHUSDC –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
"""

from mex_api import MexAPI
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_volatility():
    api = MexAPI()

    symbols = ['BTCUSDC', 'ETHUSDC']
    timeframes = ['1m', '1h', '1d']

    print("–ê–ù–ê–õ–ò–ó –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)

    for symbol in symbols:
        print(f"\nü™ô {symbol}")
        print("-" * 30)

        for timeframe in timeframes:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
                candles = api.get_klines(symbol, timeframe, 100)

                if candles and len(candles) > 1:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    price_changes = []
                    volumes = []

                    for i in range(1, len(candles)):
                        prev_close = float(candles[i-1][4])  # close price –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏
                        curr_close = float(candles[i][4])    # close price —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏

                        if prev_close > 0:
                            change_percent = ((curr_close - prev_close) / prev_close) * 100
                            price_changes.append(abs(change_percent))

                        volume = float(candles[i][5]) if len(candles[i]) > 5 else 0
                        volumes.append(volume)

                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    avg_change = sum(price_changes) / len(price_changes) if price_changes else 0
                    max_change = max(price_changes) if price_changes else 0
                    min_change = min(price_changes) if price_changes else 0

                    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
                    variance = sum([(x - avg_change)**2 for x in price_changes]) / len(price_changes)
                    volatility = variance ** 0.5

                    print(f"\nüìä {timeframe.upper()} –¢–§:")
                    print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {avg_change:.4f}%")
                    print(f"   üìà –ú–∞–∫—Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {max_change:.4f}%")
                    print(f"   üìâ –ú–∏–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {min_change:.4f}%")
                    print(f"   üé≤ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.4f}%")
                    print(f"   üìä –ö–æ–ª-–≤–æ —Å–≤–µ—á–µ–π: {len(price_changes)}")

                    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
                    if timeframe == '1m':
                        if avg_change < 0.05:
                            scalp_feasibility = "‚ùå –°–õ–ò–®–ö–û–ú –ú–ê–õ–û –î–í–ò–ñ–ï–ù–ò–Ø"
                        elif avg_change < 0.1:
                            scalp_feasibility = "‚ö†Ô∏è –°–õ–ê–ë–û–í–∞—Ç–æ –¥–ª—è $0.02"
                        elif avg_change < 0.2:
                            scalp_feasibility = "‚úÖ –•–û–†–û–®–û –¥–ª—è $0.01-0.02"
                        else:
                            scalp_feasibility = "üî• –û–ß–ï–ù–¨ –í–û–õ–ê–¢–ò–õ–¨–ù–û"

                        print(f"   üíπ –°–∫–∞–ª—å–ø–∏–Ω–≥: {scalp_feasibility}")

                else:
                    print(f"\nüìä {timeframe.upper()}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            except Exception as e:
                print(f"\nüìä {timeframe.upper()}: –û—à–∏–±–∫–∞ - {e}")

def get_current_prices():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã"""
    api = MexAPI()

    print("\n\n–ê–ö–¢–£–ê–õ–¨–ù–´–ï –¶–ï–ù–´:")
    print("=" * 30)

    for symbol in ['BTCUSDC', 'ETHUSDC']:
        try:
            ticker = api.get_ticker_price(symbol)
            if 'price' in ticker:
                price = float(ticker['price'])
                print(f"{symbol}: ${price:.2f}")
            else:
                print(f"{symbol}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã")
        except Exception as e:
            print(f"{symbol}: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    analyze_volatility()
    get_current_prices()

