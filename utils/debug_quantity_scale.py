#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ quantity scale is invalid
"""

import asyncio
import logging
from datetime import datetime
from market_scanner import MarketScanner
from mexc_advanced_api import MexAdvancedAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def debug_quantity_scale():
    """–û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ quantity scale"""
    try:
        print("üîß –û–¢–õ–ê–î–ö–ê –û–®–ò–ë–ö–ò QUANTITY SCALE")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –º–æ–Ω–µ—Ç–µ
        test_symbol = "COWUSDT"
        test_amount = 6.64  # –¢–∞ –∂–µ —Å—É–º–º–∞ —á—Ç–æ –≤ –æ—à–∏–±–∫–µ
        
        print(f"üß™ –¢–ï–°–¢–ò–†–£–ï–ú: {test_symbol}")
        print(f"üí∞ –°—É–º–º–∞: ${test_amount}")
        print()
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        print("1Ô∏è‚É£ –ü–û–õ–£–ß–ê–ï–ú –ü–†–ê–í–ò–õ–ê –¢–û–†–ì–û–í–õ–ò:")
        print("-" * 30)
        
        advanced_api = MexAdvancedAPI()
        symbol_rules = advanced_api.get_symbol_rules(test_symbol)
        
        print(f"üìä –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è {test_symbol}:")
        if symbol_rules:
            for key, value in symbol_rules.items():
                print(f"   {key}: {value}")
        else:
            print("   ‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        print()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        print("2Ô∏è‚É£ –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–£–©–£–Æ –¶–ï–ù–£:")
        print("-" * 30)
        
        from mex_api import MexAPI
        mex_api = MexAPI()
        ticker = mex_api.get_ticker_price(test_symbol)
        
        if ticker and 'price' in ticker:
            current_price = float(ticker['price'])
            print(f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}")
            
            # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            print("3Ô∏è‚É£ –†–ê–°–°–ß–ò–¢–´–í–ê–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û:")
            print("-" * 30)
            
            raw_quantity = test_amount / current_price
            print(f"üìä –°—ã—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {raw_quantity}")
            
            # 4. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            print("4Ô∏è‚É£ –ü–†–û–ë–£–ï–ú –û–ö–†–£–ì–õ–ï–ù–ò–ï:")
            print("-" * 30)
            
            # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
            if 'BTC' in test_symbol:
                old_quantity = round(raw_quantity, 6)
            elif 'ETH' in test_symbol:
                old_quantity = round(raw_quantity, 5)
            else:
                old_quantity = round(raw_quantity, 4)
            
            print(f"üìä –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±: {old_quantity}")
            
            # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
            if symbol_rules and 'min_qty' in symbol_rules:
                min_qty = symbol_rules['min_qty']
                step_size = symbol_rules.get('step_size', 0.0001)
                
                # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
                new_quantity = round(raw_quantity / step_size) * step_size
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if new_quantity < min_qty:
                    print(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {new_quantity} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {min_qty}")
                    new_quantity = min_qty
                
                print(f"üìä –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–±: {new_quantity}")
                print(f"üìä –ú–∏–Ω–∏–º—É–º: {min_qty}")
                print(f"üìä –®–∞–≥: {step_size}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞")
                new_quantity = old_quantity
            
            # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞
            print("5Ô∏è‚É£ –¢–ï–°–¢–ò–†–£–ï–ú –†–ê–ó–ú–ï–©–ï–ù–ò–ï –û–†–î–ï–†–ê:")
            print("-" * 30)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±: {old_quantity}")
            try:
                old_order = mex_api.place_order(
                    symbol=test_symbol,
                    side='BUY',
                    quantity=old_quantity,
                    price=None
                )
                if 'orderId' in old_order:
                    print(f"‚úÖ –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –†–ê–ë–û–¢–ê–ï–¢: {old_order['orderId']}")
                else:
                    print(f"‚ùå –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {old_order}")
            except Exception as e:
                print(f"‚ùå –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –û–®–ò–ë–ö–ê: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±: {new_quantity}")
            try:
                new_order = mex_api.place_order(
                    symbol=test_symbol,
                    side='BUY',
                    quantity=new_quantity,
                    price=None
                )
                if 'orderId' in new_order:
                    print(f"‚úÖ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –†–ê–ë–û–¢–ê–ï–¢: {new_order['orderId']}")
                else:
                    print(f"‚ùå –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {new_order}")
            except Exception as e:
                print(f"‚ùå –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –û–®–ò–ë–ö–ê: {e}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

if __name__ == "__main__":
    asyncio.run(debug_quantity_scale()) 