#!/usr/bin/env python3
"""
–û–¢–õ–ê–î–ö–ê –ü–†–û–î–ê–ñ–ò LUMAUSDT
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
"""

import json
import time
import hmac
import hashlib
import urllib.parse
from urllib.request import Request, urlopen

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
def load_env():
    env_vars = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    except:
        pass
    return env_vars

env = load_env()
API_KEY = env.get('MEX_API_KEY', '')
SECRET_KEY = env.get('MEX_SECRET_KEY', '')

def get_signature(query_string):
    return hmac.new(
        SECRET_KEY.encode('utf-8'),
        query_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API"""
    print("üîç –¢–ï–°–¢–ò–†–£–ï–ú API MEXC")
    print("=" * 30)
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    print("1Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
    timestamp = int(time.time() * 1000)
    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }
    
    signature = get_signature(urllib.parse.urlencode(params))
    params['signature'] = signature
    
    url = "https://api.mexc.com/api/v3/account?" + urllib.parse.urlencode(params)
    headers = {'X-MEXC-APIKEY': API_KEY}
    
    try:
        req = Request(url, headers=headers)
        with urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: {len(result.get('balances', []))} –∞–∫—Ç–∏–≤–æ–≤")
            
            # –ò—â–µ–º LUMA
            for balance in result.get('balances', []):
                if balance['asset'] == 'LUMA':
                    free = float(balance['free'])
                    print(f"üí∞ LUMA –Ω–∞–π–¥–µ–Ω: {free}")
                    return free
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def test_order_params(quantity):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞"""
    print(f"\n2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è {quantity} LUMA...")
    
    timestamp = int(time.time() * 1000)
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    test_cases = [
        {
            'symbol': 'LUMAUSDT',
            'side': 'SELL',
            'type': 'MARKET',
            'quantity': str(quantity),
            'timestamp': timestamp,
            'recvWindow': 5000
        },
        {
            'symbol': 'LUMAUSDT',
            'side': 'SELL',
            'type': 'MARKET',
            'quantity': str(round(quantity, 2)),
            'timestamp': timestamp,
            'recvWindow': 5000
        }
    ]
    
    for i, params in enumerate(test_cases, 1):
        print(f"\n–¢–µ—Å—Ç {i}:")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2)}")
        
        signature = get_signature(urllib.parse.urlencode(params))
        params['signature'] = signature
        
        url = "https://api.mexc.com/api/v3/order"
        headers = {
            'X-MEXC-APIKEY': API_KEY,
            'Content-Type': 'application/json'
        }
        
        try:
            data = json.dumps(params).encode('utf-8')
            req = Request(url, data=data, headers=headers)
            with urlopen(req) as response:
                result = json.loads(response.read().decode())
                print(f"‚úÖ –£—Å–ø–µ—Ö: {result}")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            if hasattr(e, 'read'):
                try:
                    error_body = e.read().decode()
                    print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_body}")
                except:
                    pass
    
    return False

def main():
    print("üö® –û–¢–õ–ê–î–ö–ê –ü–†–û–î–ê–ñ–ò LUMAUSDT")
    print("=" * 40)
    
    if not API_KEY or not SECRET_KEY:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
    luma_balance = test_api()
    
    if luma_balance <= 0:
        print("‚ùå LUMA –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
    test_order_params(luma_balance)

if __name__ == "__main__":
    main() 