#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–∞–∂–∞ ETH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 20 USDC
"""

from mex_api import MexAPI
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def sell_eth_for_usdc():
    api = MexAPI()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        account_info = api.get_account_info()
        eth_balance = 0
        current_usdc = 0

        for balance in account_info.get('balances', []):
            if balance['asset'] == 'ETH':
                eth_balance = float(balance.get('free', 0))
            elif balance['asset'] == 'USDC':
                current_usdc = float(balance.get('free', 0))

        print("–ü–†–û–î–ê–ñ–ê ETH –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø 20 USDC")
        print("=" * 50)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
        print(f"ü™ô –ë–∞–ª–∞–Ω—Å ETH: {eth_balance:.6f}")
        print(f"üí∞ –¢–µ–∫—É—â–∏–π USDC: ${current_usdc:.2f}")

        target_usdc = 20.0
        print(f"üéØ –ù—É–∂–Ω–æ USDC: ${target_usdc:.2f}")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
        ticker = api.get_ticker_price('ETHUSDC')
        current_price = float(ticker.get('price', 0))
        print(f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${current_price:.2f}")
        # –†–∞—Å—á–µ—Ç —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
        needed_usdc = target_usdc - current_usdc
        eth_to_sell = needed_usdc / current_price

        print(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—ë—Ç USDC: ${needed_usdc:.2f}")
        print(f"üîÑ –ù—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å ETH: {eth_to_sell:.6f}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ ETH
        if eth_to_sell > eth_balance:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH! –ù—É–∂–Ω–æ: {eth_to_sell:.6f}, –µ—Å—Ç—å: {eth_balance:.6f}")
            return False

        # –ü—Ä–æ–¥–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (—á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∫–æ–º–∏—Å—Å–∏–∏)
        eth_to_sell_adjusted = eth_to_sell * 1.002  # +0.2% –∑–∞–ø–∞—Å
        eth_to_sell_adjusted = min(eth_to_sell_adjusted, eth_balance)  # –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å

        print(f"üîÑ –° –∑–∞–ø–∞—Å–æ–º –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏: {eth_to_sell_adjusted:.6f} ETH")
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è ETH)
        eth_to_sell_rounded = round(eth_to_sell_adjusted, 6)

        print(f"üéØ –ë—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ: {eth_to_sell_rounded:.6f} ETH")
        print(f"üí∞ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${(eth_to_sell_rounded * current_price):.2f}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
        min_eth = 0.01  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –¥–ª—è ETH –Ω–∞ MEXC (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        if eth_to_sell_rounded < min_eth:
            print(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ! –ú–∏–Ω–∏–º—É–º: {min_eth:.6f} ETH")
            eth_to_sell_rounded = min_eth
            print(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {eth_to_sell_rounded:.6f} ETH")
            print(f"üí∞ –ù–æ–≤—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ${(eth_to_sell_rounded * current_price):.2f}")
        else:
            print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–∏—Ç: {eth_to_sell_rounded:.6f} ETH")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª)
        print("üöÄ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–¥–∞–∂—É ETH...")

        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        print("üìä –†–∞–∑–º–µ—â–∞—é –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º LIMIT –æ—Ä–¥–µ—Ä —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
        order_result = api.place_order(
            symbol='ETHUSDC',
            side='SELL',
            price=current_price,
            quantity=eth_to_sell_rounded
        )

        if order_result and 'orderId' in order_result:
            order_id = order_result.get('orderId')
            order_status = order_result.get('status', 'NEW')

            print(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã Order ID: {order_id}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {order_status}")
            print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order_result.get('origQty', 0)} ETH")
            print(f"üí∞ –¶–µ–Ω–∞: ${order_result.get('price', 0)}")

            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if order_status == 'FILLED':
                executed_qty = float(order_result.get('executedQty', 0))
                executed_price = float(order_result.get('price', 0))
                usdc_received = executed_qty * executed_price

                print("üéâ –û—Ä–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω!")
                print(f"üîÑ –ü—Ä–æ–¥–∞–Ω–æ ETH: {executed_qty:.6f}")
                print(f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ USDC: ${usdc_received:.2f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            final_check()
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order_result}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def final_check():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞"""
    api = MexAPI()

    try:
        account_info = api.get_account_info()
        for balance in account_info.get('balances', []):
            if balance['asset'] == 'USDC':
                final_usdc = float(balance.get('free', 0))
                print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–° USDC: ${final_usdc:.2f}")
                return final_usdc
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")

    return 0

if __name__ == "__main__":
    sell_eth_for_usdc()
