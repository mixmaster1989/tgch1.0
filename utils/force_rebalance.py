#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ BTC/ETH —á–µ—Ä–µ–∑ API –ª–∏–º–∏—Ç–Ω—ã–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏
"""

from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests
import time
import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ForceRebalancer:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        self.target_btc_percent = 60.0
        self.target_eth_percent = 40.0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {'chat_id': self.chat_id, 'text': message, 'parse_mode': 'HTML'}
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_current_allocation(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            account_info = self.mex_api.get_account_info()
            btc_balance = 0.0
            eth_balance = 0.0
            
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                if asset == 'BTC':
                    btc_balance = float(balance['free']) + float(balance['locked'])
                elif asset == 'ETH':
                    eth_balance = float(balance['free']) + float(balance['locked'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            btc_price = self.mex_api.get_ticker_price('BTCUSDC')
            eth_price = self.mex_api.get_ticker_price('ETHUSDC')
            
            if 'price' in btc_price and 'price' in eth_price:
                btc_price = float(btc_price['price'])
                eth_price = float(eth_price['price'])
                
                btc_value = btc_balance * btc_price
                eth_value = eth_balance * eth_price
                total_crypto = btc_value + eth_value
                
                if total_crypto > 0:
                    return {
                        'btc_balance': btc_balance,
                        'eth_balance': eth_balance,
                        'btc_value': btc_value,
                        'eth_value': eth_value,
                        'total_crypto': total_crypto,
                        'btc_percent': (btc_value / total_crypto) * 100,
                        'eth_percent': (eth_value / total_crypto) * 100,
                        'btc_price': btc_price,
                        'eth_price': eth_price
                    }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return None
    
    def calculate_rebalance_orders(self, allocation):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            btc_percent = allocation['btc_percent']
            eth_percent = allocation['eth_percent']
            total_crypto = allocation['total_crypto']
            
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BTC {btc_percent:.1f}%, ETH {eth_percent:.1f}%")
            logger.info(f"üéØ –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BTC {self.target_btc_percent}%, ETH {self.target_eth_percent}%")
            
            orders = []
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            target_btc_value = total_crypto * (self.target_btc_percent / 100)
            target_eth_value = total_crypto * (self.target_eth_percent / 100)
            
            current_btc_value = allocation['btc_value']
            current_eth_value = allocation['eth_value']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º BTC
            if btc_percent > self.target_btc_percent:
                # BTC —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
                excess_btc_value = current_btc_value - target_btc_value
                excess_btc_quantity = excess_btc_value / allocation['btc_price']
                
                if excess_btc_quantity >= 0.0001:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è BTC
                    orders.append({
                        'symbol': 'BTCUSDC',
                        'side': 'SELL',
                        'quantity': round(excess_btc_quantity, 6),
                        'value': excess_btc_value,
                        'reason': f'–ü—Ä–æ–¥–∞–∂–∞ –∏–∑–±—ã—Ç–∫–∞ BTC ({btc_percent:.1f}% ‚Üí {self.target_btc_percent}%)'
                    })
                    logger.info(f"üì§ –ü—Ä–æ–¥–∞–∂–∞ BTC: {excess_btc_quantity:.6f} BTC –Ω–∞ ${excess_btc_value:.2f}")
            
            elif btc_percent < self.target_btc_percent:
                # BTC —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å
                needed_btc_value = target_btc_value - current_btc_value
                needed_btc_quantity = needed_btc_value / allocation['btc_price']
                
                if needed_btc_quantity >= 0.0001:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è BTC
                    orders.append({
                        'symbol': 'BTCUSDC',
                        'side': 'BUY',
                        'quantity': round(needed_btc_quantity, 6),
                        'value': needed_btc_value,
                        'reason': f'–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ BTC ({btc_percent:.1f}% ‚Üí {self.target_btc_percent}%)'
                    })
                    logger.info(f"üì• –ü–æ–∫—É–ø–∫–∞ BTC: {needed_btc_quantity:.6f} BTC –Ω–∞ ${needed_btc_value:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ETH
            if eth_percent > self.target_eth_percent:
                # ETH —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å
                excess_eth_value = current_eth_value - target_eth_value
                excess_eth_quantity = excess_eth_value / allocation['eth_price']
                
                if excess_eth_quantity >= 0.001:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è ETH
                    orders.append({
                        'symbol': 'ETHUSDC',
                        'side': 'SELL',
                        'quantity': round(excess_eth_quantity, 6),
                        'value': excess_eth_value,
                        'reason': f'–ü—Ä–æ–¥–∞–∂–∞ –∏–∑–±—ã—Ç–∫–∞ ETH ({eth_percent:.1f}% ‚Üí {self.target_eth_percent}%)'
                    })
                    logger.info(f"üì§ –ü—Ä–æ–¥–∞–∂–∞ ETH: {excess_eth_quantity:.6f} ETH –Ω–∞ ${excess_eth_value:.2f}")
            
            elif eth_percent < self.target_eth_percent:
                # ETH —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ - –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å
                needed_eth_value = target_eth_value - current_eth_value
                needed_eth_quantity = needed_eth_value / allocation['eth_price']
                
                if needed_eth_quantity >= 0.001:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è ETH
                    orders.append({
                        'symbol': 'ETHUSDC',
                        'side': 'BUY',
                        'quantity': round(needed_eth_quantity, 6),
                        'value': needed_eth_value,
                        'reason': f'–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ ETH ({eth_percent:.1f}% ‚Üí {self.target_eth_percent}%)'
                    })
                    logger.info(f"üì• –ü–æ–∫—É–ø–∫–∞ ETH: {needed_eth_quantity:.6f} ETH –Ω–∞ ${needed_eth_value:.2f}")
            
            return orders
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return []
    
    def get_limit_price(self, symbol: str, side: str):
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook = self.mex_api.get_depth(symbol, limit=10)
            
            if 'bids' in orderbook and 'asks' in orderbook:
                best_bid = float(orderbook['bids'][0][0])
                best_ask = float(orderbook['asks'][0][0])
                
                if side == 'BUY':
                    # –î–ª—è –ø–æ–∫—É–ø–∫–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –Ω–∏–∂–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                    return best_ask * 0.9995  # –ù–∞ 0.05% –Ω–∏–∂–µ
                else:
                    # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
                    return best_bid * 1.0005  # –ù–∞ 0.05% –≤—ã—à–µ
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return None
    
    def place_rebalance_order(self, order_info):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            symbol = order_info['symbol']
            side = order_info['side']
            quantity = order_info['quantity']
            
            logger.info(f"üîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {side} {quantity} {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É
            limit_price = self.get_limit_price(symbol, side)
            
            if not limit_price:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'}
            
            logger.info(f"üí∞ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${limit_price:.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            if side == 'BUY':
                usdc_balance = 0.0
                account_info = self.mex_api.get_account_info()
                for balance in account_info.get('balances', []):
                    if balance['asset'] == 'USDC':
                        usdc_balance = float(balance['free'])
                        break
                
                required_usdc = quantity * limit_price
                if required_usdc > usdc_balance:
                    logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${usdc_balance:.2f}")
                    return {'success': False, 'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side=side,
                quantity=quantity,
                price=limit_price
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order['orderId']}")
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': limit_price,
                    'order': order
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return {'success': False, 'error': f'API –æ—à–∏–±–∫–∞: {order}'}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def execute_force_rebalance(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò BTC/ETH")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            allocation = self.get_current_allocation()
            
            if not allocation:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
            rebalance_orders = self.calculate_rebalance_orders(allocation)
            
            if not rebalance_orders:
                logger.info("‚úÖ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ")
                return
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(rebalance_orders)} –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞
            results = []
            for order_info in rebalance_orders:
                logger.info(f"\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {order_info['reason']}")
                result = self.place_rebalance_order(order_info)
                results.append({
                    'order_info': order_info,
                    'result': result
                })
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                time.sleep(2)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            self.send_rebalance_report(allocation, rebalance_orders, results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
    
    def send_rebalance_report(self, allocation, orders, results):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ"""
        try:
            message = f"<b>üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê BTC/ETH</b>\n\n"
            
            message += f"üìä <b>–î–û –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ò:</b>\n"
            message += f"üíö BTC: {allocation['btc_percent']:.1f}% (${allocation['btc_value']:.2f})\n"
            message += f"üíô ETH: {allocation['eth_percent']:.1f}% (${allocation['eth_value']:.2f})\n"
            message += f"üí∞ –í—Å–µ–≥–æ: ${allocation['total_crypto']:.2f}\n\n"
            
            message += f"üéØ <b>–¶–ï–õ–¨:</b> BTC {self.target_btc_percent}% / ETH {self.target_eth_percent}%\n\n"
            
            if results:
                message += f"üìã <b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –û–†–î–ï–†–ê:</b>\n"
                for result in results:
                    order_info = result['order_info']
                    order_result = result['result']
                    
                    if order_result['success']:
                        message += f"‚úÖ {order_info['reason']}\n"
                        message += f"   üìä {order_info['symbol']} {order_result['side']} {order_info['quantity']}\n"
                        message += f"   üí∞ ${order_info['value']:.2f}\n"
                        message += f"   üÜî {order_result['order_id']}\n\n"
                    else:
                        message += f"‚ùå {order_info['reason']}\n"
                        message += f"   üí• –û—à–∏–±–∫–∞: {order_result['error']}\n\n"
            else:
                message += f"‚úÖ –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
            
            message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            
            self.send_telegram_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    rebalancer = ForceRebalancer()
    rebalancer.execute_force_rebalance()

if __name__ == "__main__":
    main() 