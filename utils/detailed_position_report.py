#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–æ–∑–∏—Ü–∏—è–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

from mexc_advanced_api import MexAdvancedAPI
from mex_api import MexAPI
import time
from datetime import datetime
import json

def main():
    api = MexAPI()
    advanced_api = MexAdvancedAPI()
    
    print("üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ü–û–ó–ò–¶–ò–Ø–ú")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    account_info = api.get_account_info()
    
    if not isinstance(account_info, dict) or 'balances' not in account_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤—ã —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
    active_assets = []
    for balance in account_info['balances']:
        free = float(balance.get('free', 0))
        locked = float(balance.get('locked', 0))
        if free > 0 or locked > 0:
            active_assets.append((balance['asset'], free, locked))
    
    print(f"üí∞ –ê–ö–¢–ò–í–´ –° –ë–ê–õ–ê–ù–°–ê–ú–ò ({len(active_assets)} —à—Ç.):")
    print("-" * 50)
    for asset, free, locked in sorted(active_assets, key=lambda x: x[1] + x[2], reverse=True):
        total = free + locked
        print(f"{asset:8} | –°–≤–æ–±–æ–¥–Ω–æ: {free:12.6f} | –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked:12.6f} | –í—Å–µ–≥–æ: {total:12.6f}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    pairs_to_check = []
    for asset, free, locked in active_assets:
        if asset != 'USDT' and (free > 0 or locked > 0):
            pairs_to_check.append(f"{asset}USDT")
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û–ó–ò–¶–ò–ô –ü–û {len(pairs_to_check)} –ü–ê–†–ê–ú:")
    print("=" * 80)
    
    all_positions = []
    current_positions = []
    
    for i, symbol in enumerate(pairs_to_check):
        print(f"\n[{i+1:2d}/{len(pairs_to_check)}] {symbol}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
            trades = advanced_api.get_my_trades(symbol, limit=1000)
            
            if not trades:
                print(f"    ‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                continue
            
            print(f"    ‚úÖ –°–¥–µ–ª–æ–∫: {len(trades)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
            positions = analyze_positions_for_symbol(symbol, trades)
            
            if positions:
                closed_positions = [p for p in positions if p.get('end_price') is not None]
                open_positions = [p for p in positions if p.get('end_price') is None]
                
                print(f"    üìà –ü–æ–∑–∏—Ü–∏–π: {len(positions)} (–∑–∞–∫—Ä—ã—Ç—ã—Ö: {len(closed_positions)}, –æ—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_positions)})")
                
                all_positions.extend(positions)
                current_positions.extend(open_positions)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—É—é –¥–æ–ª–≥—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
                longest = max(positions, key=lambda x: x['duration_days'])
                print(f"    üèÜ –°–∞–º–∞—è –¥–æ–ª–≥–∞—è: {longest['duration_days']:.1f} –¥–Ω–µ–π ({longest['type']})")
                
            else:
                print(f"    ‚ùå –ü–æ–∑–∏—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
            continue
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    all_positions.sort(key=lambda x: x['duration_days'], reverse=True)
    current_positions.sort(key=lambda x: x['duration_days'], reverse=True)
    
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 80)
    print(f"–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(all_positions)}")
    print(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(current_positions)}")
    print(f"–ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(all_positions) - len(current_positions)}")
    
    if all_positions:
        avg_duration = sum(p['duration_days'] for p in all_positions) / len(all_positions)
        print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} –¥–Ω–µ–π")
        
        longest_overall = all_positions[0]
        print(f"–°–∞–º–∞—è –¥–æ–ª–≥–∞—è –ø–æ–∑–∏—Ü–∏—è: {longest_overall['symbol']} - {longest_overall['duration_days']:.1f} –¥–Ω–µ–π")
    
    # –¢–û–ü-20 —Å–∞–º—ã—Ö –¥–æ–ª–≥–∏—Ö –ø–æ–∑–∏—Ü–∏–π
    print(f"\nüèÜ –¢–û–ü-20 –°–ê–ú–´–• –î–û–õ–ì–ò–• –ü–û–ó–ò–¶–ò–ô:")
    print("=" * 80)
    
    for i, position in enumerate(all_positions[:20], 1):
        status = "üü¢ –û–¢–ö–†–´–¢–ê" if position.get('end_price') is None else "üî¥ –ó–ê–ö–†–´–¢–ê"
        pnl_str = f"P&L: {position['pnl']:.2f} USDT" if position.get('pnl') is not None else "P&L: –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω"
        
        print(f"\n#{i:2d}. {position['symbol']} - {status}")
        print(f"    –¢–∏–ø: {position['type']}")
        print(f"    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {position['duration_days']:.2f} –¥–Ω–µ–π")
        print(f"    –ù–∞—á–∞–ª–æ: {datetime.fromtimestamp(position['start_time']/1000).strftime('%Y-%m-%d %H:%M:%S')}")
        if position.get('end_time'):
            print(f"    –ö–æ–Ω–µ—Ü: {datetime.fromtimestamp(position['end_time']/1000).strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position['quantity']:.6f}")
        print(f"    –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {position['start_price']:.6f}")
        if position.get('end_price'):
            print(f"    –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {position['end_price']:.6f}")
        print(f"    {pnl_str}")
        print("-" * 60)
    
    # –¢–µ–∫—É—â–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if current_positions:
        print(f"\nüü¢ –¢–ï–ö–£–©–ò–ï –û–¢–ö–†–´–¢–´–ï –ü–û–ó–ò–¶–ò–ò ({len(current_positions)} —à—Ç.):")
        print("=" * 80)
        
        for i, position in enumerate(current_positions, 1):
            print(f"\n#{i:2d}. {position['symbol']} - {position['type']}")
            print(f"    –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {position['duration_days']:.2f} –¥–Ω–µ–π")
            print(f"    –ù–∞—á–∞–ª–æ: {datetime.fromtimestamp(position['start_time']/1000).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {position['quantity']:.6f}")
            print(f"    –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {position['start_price']:.6f}")
            print(f"    –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
            print("-" * 40)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    symbol_stats = {}
    for position in all_positions:
        symbol = position['symbol']
        if symbol not in symbol_stats:
            symbol_stats[symbol] = {
                'count': 0,
                'total_days': 0,
                'max_days': 0,
                'open_count': 0,
                'closed_count': 0
            }
        
        symbol_stats[symbol]['count'] += 1
        symbol_stats[symbol]['total_days'] += position['duration_days']
        symbol_stats[symbol]['max_days'] = max(symbol_stats[symbol]['max_days'], position['duration_days'])
        
        if position.get('end_price') is None:
            symbol_stats[symbol]['open_count'] += 1
        else:
            symbol_stats[symbol]['closed_count'] += 1
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
    print("=" * 80)
    print(f"{'–°–∏–º–≤–æ–ª':<12} {'–í—Å–µ–≥–æ':<6} {'–û—Ç–∫—Ä.':<6} {'–ó–∞–∫—Ä.':<6} {'–ú–∞–∫—Å.–¥–Ω.':<8} {'–°—Ä.–¥–Ω.':<8}")
    print("-" * 80)
    
    sorted_symbols = sorted(symbol_stats.items(), key=lambda x: x[1]['max_days'], reverse=True)
    
    for symbol, stats in sorted_symbols:
        avg_days = stats['total_days'] / stats['count']
        print(f"{symbol:<12} {stats['count']:<6} {stats['open_count']:<6} {stats['closed_count']:<6} {stats['max_days']:<8.1f} {avg_days:<8.1f}")

def analyze_positions_for_symbol(symbol: str, trades: list) -> list:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    trades.sort(key=lambda x: x['time'])
    
    positions = []
    current_position = 0  # –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    position_start_time = None
    position_start_price = 0
    position_quantity = 0
    
    for trade in trades:
        trade_time = trade['time']
        trade_price = trade['price']
        trade_qty = trade['qty']
        is_buy = trade['isBuyer']
        
        if is_buy:
            # –ü–æ–∫—É–ø–∫–∞
            if current_position <= 0:  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                if current_position < 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                    if position_start_time:
                        duration_days = (trade_time - position_start_time) / (1000 * 60 * 60 * 24)
                        positions.append({
                            'symbol': symbol,
                            'type': 'SHORT',
                            'start_time': position_start_time,
                            'end_time': trade_time,
                            'duration_days': duration_days,
                            'start_price': position_start_price,
                            'end_price': trade_price,
                            'quantity': abs(position_quantity),
                            'pnl': (position_start_price - trade_price) * abs(position_quantity)
                        })
                
                # –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                current_position = trade_qty
                position_start_time = trade_time
                position_start_price = trade_price
                position_quantity = trade_qty
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                current_position += trade_qty
                position_quantity += trade_qty
        else:
            # –ü—Ä–æ–¥–∞–∂–∞
            if current_position >= 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                if current_position > 0:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏—é
                    if position_start_time:
                        duration_days = (trade_time - position_start_time) / (1000 * 60 * 60 * 24)
                        positions.append({
                            'symbol': symbol,
                            'type': 'LONG',
                            'start_time': position_start_time,
                            'end_time': trade_time,
                            'duration_days': duration_days,
                            'start_price': position_start_price,
                            'end_price': trade_price,
                            'quantity': position_quantity,
                            'pnl': (trade_price - position_start_price) * position_quantity
                        })
                
                # –ù–∞—á–∏–Ω–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                current_position = -trade_qty
                position_start_time = trade_time
                position_start_price = trade_price
                position_quantity = -trade_qty
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏—é
                current_position -= trade_qty
                position_quantity -= trade_qty
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å—á–∏—Ç–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—É—â—É—é
    if current_position != 0 and position_start_time:
        current_time = int(time.time() * 1000)
        duration_days = (current_time - position_start_time) / (1000 * 60 * 60 * 24)
        positions.append({
            'symbol': symbol,
            'type': 'LONG' if current_position > 0 else 'SHORT',
            'start_time': position_start_time,
            'end_time': current_time,
            'duration_days': duration_days,
            'start_price': position_start_price,
            'end_price': None,  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            'quantity': abs(current_position),
            'pnl': None  # –ù–µ –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ–∑ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        })
    
    return positions

if __name__ == "__main__":
    main()

