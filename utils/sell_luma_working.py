#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT!
–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API –∫–ª–∞—Å—Å
"""

from mex_api import MexAPI
import json

print("üö® –†–ê–ë–û–ß–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT!")
print("=" * 40)

try:
    # –°–æ–∑–¥–∞–µ–º API –æ–±—ä–µ–∫—Ç
    api = MexAPI()
    print("‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å LUMA
    print("üîç –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å LUMA...")
    account_info = api.get_account_info()
    
    luma_balance = 0.0
    for balance in account_info.get('balances', []):
        if balance['asset'] == 'LUMA':
            luma_balance = float(balance['free'])
            break
    
    if luma_balance <= 0:
        print("‚ùå LUMA –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–µ")
        exit()
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω LUMA: {luma_balance}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É LUMA
    print("üìä –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É LUMA...")
    ticker = api.get_ticker_price('LUMAUSDT')
    current_price = float(ticker['price']) if ticker and 'price' in ticker else 0
    estimated_value = luma_balance * current_price
    
    print(f"üíµ –¶–µ–Ω–∞ LUMA: ${current_price}")
    print(f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${estimated_value:.2f}")
    
    # 3. –ü–†–û–î–ê–ï–ú LUMA
    print(f"\nüî• –ü–†–û–î–ê–ï–ú {luma_balance} LUMA...")
    print("üö® –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–´–ù–û–ß–ù–´–ô –û–†–î–ï–† (price=None)")
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    quantity = round(luma_balance, 2)
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {quantity}")
    
    # –ü–†–û–î–ê–ï–ú –ö–ê–ö –í sell_all.py - price=None –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞!
    result = api.place_order(
        symbol='LUMAUSDT',
        side='SELL', 
        quantity=quantity,
        price=None  # –†–´–ù–û–ß–ù–´–ô –û–†–î–ï–†!
    )
    
    if result and 'orderId' in result:
        print(f"‚úÖ LUMA –ü–†–û–î–ê–ù –£–°–ü–ï–®–ù–û!")
        print(f"üÜî –û—Ä–¥–µ—Ä: {result['orderId']}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        print(f"üí∞ –°–∏–º–≤–æ–ª: LUMAUSDT")
        print(f"üìà –°—Ç–∞—Ç—É—Å: {result.get('status', 'N/A')}")
        print(f"üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Ä—É—á–∫–∞: ${estimated_value:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å...")
        new_account = api.get_account_info()
        for balance in new_account.get('balances', []):
            if balance['asset'] == 'USDT':
                usdt_balance = float(balance['free'])
                print(f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
                break
                
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result}")
        
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\nüèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω") 