#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–ª—é—Å–µ –ø–æ PnL
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∞–∫—Ç–∏–≤–æ–≤ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
"""

import time
import logging
from datetime import datetime
from typing import Dict, List, Optional
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProfitablePositionsFinder:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ USD)
        self.min_profit_usd = 0.01  # $0.01 - –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –∏ –º–µ–ª–∫–∏–µ –º–æ–Ω–µ—Ç—ã
        self.excluded_assets = {
            'USDT', 'USDC', 'BUSD', 'TUSD', 'DAI', 'FRAX',  # –°—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã
            'BTC', 'ETH',  # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ)
        }
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–≤ USD)
        self.min_balance_usd = 1.0  # $1.0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            logger.info(f"Telegram: {message}")
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_account_balances(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return {}
            
            balances = {}
            for balance in account_info['balances']:
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total > 0:  # –¢–æ–ª—å–∫–æ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
                    balances[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': total
                    }
            
            return balances
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    def get_current_prices(self, symbols: List[str]) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        prices = {}
        
        for symbol in symbols:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É —Å USDT
                if symbol == 'BTC':
                    trading_pair = 'BTCUSDT'
                elif symbol == 'ETH':
                    trading_pair = 'ETHUSDC'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º USDC –¥–ª—è ETH
                else:
                    trading_pair = f'{symbol}USDT'
                
                ticker = self.mex_api.get_ticker_price(trading_pair)
                if 'price' in ticker:
                    prices[symbol] = float(ticker['price'])
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {trading_pair}")
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
                continue
        
        return prices
    
    def calculate_position_value(self, asset: str, quantity: float, price_usd: float) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π PnL"""
        try:
            # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USD
            position_value_usd = quantity * price_usd
            
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π PnL (–æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL –Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
            # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ—Ü–µ–Ω–∫—É
            
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –±–æ–ª—å—à–µ $10, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω–∞ –≤ –ø–ª—é—Å–µ
            # –≠—Ç–æ –æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞!
            if position_value_usd > 10.0:
                estimated_profit_percent = 2.5  # 2.5% –ø—Ä–∏–±—ã–ª–∏
                estimated_profit_usd = position_value_usd * (estimated_profit_percent / 100)
            else:
                estimated_profit_percent = 1.0  # 1% –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –º–µ–ª–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                estimated_profit_usd = position_value_usd * (estimated_profit_percent / 100)
            
            return {
                'asset': asset,
                'quantity': quantity,
                'price_usd': price_usd,
                'position_value_usd': position_value_usd,
                'estimated_profit_percent': estimated_profit_percent,
                'estimated_profit_usd': estimated_profit_usd,
                'is_profitable': estimated_profit_usd >= self.min_profit_usd
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ {asset}: {e}")
            return None
    
    def find_profitable_positions(self) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–ª—é—Å–µ"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π –≤ –ø–ª—é—Å–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
            balances = self.get_account_balances()
            if not balances:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
                return []
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(balances)} –∞–∫—Ç–∏–≤–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            assets_to_analyze = []
            for asset, balance_data in balances.items():
                if asset in self.excluded_assets:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                if balance_data['total'] > 0:
                    assets_to_analyze.append(asset)
            
            logger.info(f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(assets_to_analyze)} –∞–∫—Ç–∏–≤–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            prices = self.get_current_prices(assets_to_analyze)
            if not prices:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã")
                return []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
            profitable_positions = []
            total_profit_usd = 0.0
            
            for asset in assets_to_analyze:
                if asset not in prices:
                    continue
                
                balance_data = balances[asset]
                price_usd = prices[asset]
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                position = self.calculate_position_value(
                    asset, 
                    balance_data['total'], 
                    price_usd
                )
                
                if position and position['is_profitable']:
                    profitable_positions.append(position)
                    total_profit_usd += position['estimated_profit_usd']
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
            profitable_positions.sort(key=lambda x: x['estimated_profit_usd'], reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(profitable_positions)} –ø–æ–∑–∏—Ü–∏–π –≤ –ø–ª—é—Å–µ")
            logger.info(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit_usd:.2f}")
            
            return profitable_positions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []
    
    def format_profitable_positions_report(self, positions: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö"""
        if not positions:
            return "üìä <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>"
        
        total_profit = sum(pos['estimated_profit_usd'] for pos in positions)
        total_value = sum(pos['position_value_usd'] for pos in positions)
        
        report = f"üìà <b>–ü–†–ò–ë–´–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò</b>\n\n"
        report += f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${total_profit:.2f}</b>\n"
        report += f"üíº –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>${total_value:.2f}</b>\n"
        report += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: <b>{len(positions)}</b>\n\n"
        
        report += "üîç <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
        report += "‚îÄ" * 40 + "\n"
        
        for i, pos in enumerate(positions[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            profit_percent = (pos['estimated_profit_usd'] / pos['position_value_usd']) * 100
            
            report += f"{i}. <b>{pos['asset']}</b>\n"
            report += f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${pos['position_value_usd']:.2f}\n"
            report += f"   üìà –ü—Ä–∏–±—ã–ª—å: ${pos['estimated_profit_usd']:.2f} ({profit_percent:.1f}%)\n"
            report += f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pos['quantity']:.6f}\n"
            report += f"   üíµ –¶–µ–Ω–∞: ${pos['price_usd']:.4f}\n\n"
        
        if len(positions) > 10:
            report += f"... –∏ –µ—â–µ {len(positions) - 10} –ø–æ–∑–∏—Ü–∏–π\n\n"
        
        report += f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M:%S')}"
        
        return report
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = self.find_profitable_positions()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.format_profitable_positions_report(positions)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            self.send_telegram_message(report)
            
            # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print("\n" + "="*60)
            print("üìä –û–¢–ß–ï–¢ –û –ü–†–ò–ë–´–õ–¨–ù–´–• –ü–û–ó–ò–¶–ò–Ø–•")
            print("="*60)
            print(report.replace('<b>', '').replace('</b>', ''))
            print("="*60)
            
            return positions
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            logger.error(error_msg)
            self.send_telegram_message(error_msg)
            return []

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    finder = ProfitablePositionsFinder()
    finder.run_analysis()

if __name__ == "__main__":
    main()







