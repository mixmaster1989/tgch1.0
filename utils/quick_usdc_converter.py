#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT –≤ USDC —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞
"""

from mex_api import MexAPI
import time
import logging
import requests
from datetime import datetime
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class QuickUSDCConverter:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def cancel_existing_order(self, order_id: str, symbol: str = 'USDCUSDT'):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä"""
        try:
            logger.info(f"üîÑ –û—Ç–º–µ–Ω—è—é –æ—Ä–¥–µ—Ä {order_id}...")
            result = self.mex_api.cancel_order(symbol, order_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã: {result}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def analyze_orderbook(self, symbol: str = 'USDCUSDT'):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–∫–∞–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç–∞–∫–∞–Ω {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook = self.mex_api.get_depth(symbol, limit=20)
            
            if 'bids' not in orderbook or 'asks' not in orderbook:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞")
                return None
            
            bids = orderbook['bids'][:10]  # –¢–æ–ø-10 –ø–æ–∫—É–ø–æ–∫
            asks = orderbook['asks'][:10]  # –¢–æ–ø-10 –ø—Ä–æ–¥–∞–∂
            
            if not bids or not asks:
                logger.error("–°—Ç–∞–∫–∞–Ω –ø—É—Å—Ç–æ–π")
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_bid = float(bids[0][0])  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            best_ask = float(asks[0][0])  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
            spread = best_ask - best_bid
            spread_percent = (spread / best_bid) * 100
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
            bid_volume = sum(float(bid[1]) for bid in bids)
            ask_volume = sum(float(ask[1]) for ask in asks)
            
            logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞:")
            logger.info(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${best_bid:.4f}")
            logger.info(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${best_ask:.4f}")
            logger.info(f"   –°–ø—Ä–µ–¥: ${spread:.4f} ({spread_percent:.4f}%)")
            logger.info(f"   –û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫: {bid_volume:.2f}")
            logger.info(f"   –û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: {ask_volume:.2f}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä —á—É—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            optimal_price = best_bid + (spread * 0.1)  # 10% –æ—Ç —Å–ø—Ä–µ–¥–∞ –≤—ã—à–µ –ª—É—á—à–µ–π –ø–æ–∫—É–ø–∫–∏
            
            return {
                'best_bid': best_bid,
                'best_ask': best_ask,
                'spread': spread,
                'spread_percent': spread_percent,
                'bid_volume': bid_volume,
                'ask_volume': ask_volume,
                'optimal_price': optimal_price,
                'bids': bids,
                'asks': asks
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–∞: {e}")
            return None
    
    def place_quick_order(self, usdt_amount: float, symbol: str = 'USDCUSDT'):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        try:
            logger.info(f"üöÄ –†–∞–∑–º–µ—â–∞—é –±—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {usdt_amount} USDT...")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞–∫–∞–Ω
            orderbook_analysis = self.analyze_orderbook(symbol)
            if not orderbook_analysis:
                return None
            
            optimal_price = orderbook_analysis['optimal_price']
            best_bid = orderbook_analysis['best_bid']
            best_ask = orderbook_analysis['best_ask']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC
            usdc_quantity = usdt_amount / optimal_price
            
            logger.info(f"üí∞ –î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:")
            logger.info(f"   –°—É–º–º–∞ USDT: {usdt_amount}")
            logger.info(f"   –¶–µ–Ω–∞: {optimal_price:.4f} USDT")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC: {usdc_quantity:.4f}")
            logger.info(f"   –ü–æ–∑–∏—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–∫–∞–Ω–∞: {optimal_price:.4f} (–ª—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {best_bid:.4f})")
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side='BUY',
                quantity=usdc_quantity,
                price=optimal_price
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order['orderId']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                message = (
                    f"üöÄ <b>–ë–´–°–¢–†–´–ô –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù</b>\n\n"
                    f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>\n"
                    f"üÜî ID: <code>{order['orderId']}</code>\n"
                    f"üí± –ü–∞—Ä–∞: {symbol}\n"
                    f"üí∞ –°—É–º–º–∞: {usdt_amount} USDT\n"
                    f"üìà –¶–µ–Ω–∞: {optimal_price:.4f} USDT\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {usdc_quantity:.4f} USDC\n\n"
                    f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞:</b>\n"
                    f"üü¢ –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {best_bid:.4f}\n"
                    f"üî¥ –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {best_ask:.4f}\n"
                    f"üìè –°–ø—Ä–µ–¥: {orderbook_analysis['spread_percent']:.4f}%\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(message)
                
                return order
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def monitor_quick_order(self, order_id: str, symbol: str = 'USDCUSDT', max_wait_minutes: int = 5):
        """–ë—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞"""
        logger.info(f"üîç –ë—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {order_id}...")
        
        start_time = time.time()
        
        while True:
            current_time = time.time()
            elapsed_minutes = (current_time - start_time) / 60
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
            if elapsed_minutes >= max_wait_minutes:
                logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_minutes} –º–∏–Ω)")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
            try:
                open_orders = self.mex_api.get_open_orders(symbol)
                order_found = False
                
                for order in open_orders:
                    if order.get('orderId') == order_id:
                        order_found = True
                        status = order.get('status', 'UNKNOWN')
                        filled = float(order.get('executedQty', 0))
                        total = float(order.get('origQty', 0))
                        
                        logger.info(f"–°—Ç–∞—Ç—É—Å: {status}, –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled:.4f}/{total:.4f}")
                        
                        if status == 'FILLED' or filled >= total:
                            logger.info("‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω!")
                            return True
                        break
                
                if not order_found:
                    logger.info("‚úÖ –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö)")
                    return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

def main():
    converter = QuickUSDCConverter()
    
    # 1. –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ä–¥–µ—Ä
    existing_order_id = "C02__582571019856932868067"
    converter.cancel_existing_order(existing_order_id)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
    time.sleep(3)
    
    # 2. –†–∞–∑–º–µ—â–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä
    usdt_amount = 50.0
    new_order = converter.place_quick_order(usdt_amount)
    
    if new_order:
        # 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä
        converter.monitor_quick_order(new_order['orderId'])
        
        # 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        final_message = (
            f"üéâ <b>–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê</b>\n\n"
            f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω\n"
            f"üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {usdt_amount} USDT ‚Üí USDC\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        converter.send_telegram_message(final_message)
    else:
        error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ä–¥–µ—Ä"
        converter.send_telegram_message(error_message)

if __name__ == "__main__":
    main() 