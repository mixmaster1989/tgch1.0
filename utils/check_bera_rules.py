#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è BERAUSDT
"""

from mexc_advanced_api import MexAdvancedAPI
import json

def check_bera_rules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ BERA"""
    try:
        print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ BERAUSDT")
        print("=" * 50)
        
        api = MexAdvancedAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞
        rules = api.get_symbol_rules("BERAUSDT")
        
        print(f"üìä –ü—Ä–∞–≤–∏–ª–∞ BERAUSDT:")
        print(json.dumps(rules, indent=2, ensure_ascii=False))
        
        if rules:
            print(f"\nüìà min_qty: {rules.get('min_qty', '–ù–ï–¢')}")
            print(f"üìä step_size: {rules.get('step_size', '–ù–ï–¢')}")
            print(f"üí∞ min_notional: {rules.get('min_notional', '–ù–ï–¢')}")
        else:
            print("‚ùå –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = api.get_ticker_price("BERAUSDT")
        if ticker:
            price = float(ticker['price'])
            print(f"\nüíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BERA: ${price}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è $6.68
            amount = 6.68
            raw_quantity = amount / price
            print(f"üìä –°—ã—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ${amount}: {raw_quantity}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            print(f"\nüîÑ –†–ê–ó–ù–´–ï –ú–ï–¢–û–î–´ –û–ö–†–£–ì–õ–ï–ù–ò–Ø:")
            print(f"2 –∑–Ω–∞–∫–∞: {round(raw_quantity, 2)}")
            print(f"3 –∑–Ω–∞–∫–∞: {round(raw_quantity, 3)}")
            print(f"4 –∑–Ω–∞–∫–∞: {round(raw_quantity, 4)}")
            print(f"5 –∑–Ω–∞–∫–æ–≤: {round(raw_quantity, 5)}")
            print(f"6 –∑–Ω–∞–∫–æ–≤: {round(raw_quantity, 6)}")
            print(f"8 –∑–Ω–∞–∫–æ–≤: {round(raw_quantity, 8)}")
            
            # –ü—Ä–æ–±—É–µ–º —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±–∏—Ä–∂–∏
            if rules:
                quantity_precision = rules.get('quantityPrecision', 8)
                step_size = rules.get('stepSize', 1e-08)
                print(f"\nüìä –ü–û –ü–†–ê–í–ò–õ–ê–ú –ë–ò–†–ñ–ò:")
                print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {quantity_precision} –∑–Ω–∞–∫–æ–≤")
                print(f"–®–∞–≥: {step_size}")
                print(f"–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ: {round(raw_quantity, quantity_precision)}")
                if step_size > 0:
                    step_rounded = round(raw_quantity / step_size) * step_size
                    print(f"–ü–æ —à–∞–≥—É: {step_rounded}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    check_bera_rules() 