#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ BTCUSDC
–ü–æ–ª—É—á–∞–µ–º PnL, –∫–æ–º–∏—Å—Å–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ MEX API
"""

import sys
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from mex_api import MexAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class BTCTradeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–¥–µ–ª–æ–∫ –ø–æ BTCUSDC"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.symbol = 'BTCUSDC'
        
    def get_recent_trades(self, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –ø–æ BTCUSDC"""
        try:
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–¥–µ–ª–æ–∫ –ø–æ {self.symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
            orders = self.mex_api.get_order_history(symbol=self.symbol, limit=limit)
            
            if not orders or 'code' in orders:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤: {orders}")
                return []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            executed_orders = [
                order for order in orders 
                if order.get('status') == 'FILLED'
            ]
            
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(executed_orders)} –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤")
            return executed_orders
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
            return []
    
    def get_current_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTCUSDC"""
        try:
            ticker = self.mex_api.get_ticker_price(self.symbol)
            if ticker and 'price' in ticker:
                return float(ticker['price'])
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return None
    
    def calculate_pnl(self, order: Dict, current_price: float) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å PnL –¥–ª—è –æ—Ä–¥–µ—Ä–∞"""
        try:
            side = order.get('side', 'BUY')
            executed_qty = float(order.get('executedQty', 0))
            price = float(order.get('price', 0))
            commission = float(order.get('commission', 0))
            commission_asset = order.get('commissionAsset', 'USDC')
            
            if side == 'BUY':
                # –ü–æ–∫—É–ø–∫–∞ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
                cost_basis = executed_qty * price
                current_value = executed_qty * current_price
                unrealized_pnl = current_value - cost_basis
                pnl_percent = (unrealized_pnl / cost_basis) * 100 if cost_basis > 0 else 0
                
                return {
                    'type': 'BUY',
                    'quantity': executed_qty,
                    'entry_price': price,
                    'current_price': current_price,
                    'cost_basis': cost_basis,
                    'current_value': current_value,
                    'unrealized_pnl': unrealized_pnl,
                    'pnl_percent': pnl_percent,
                    'commission': commission,
                    'commission_asset': commission_asset,
                    'total_cost': cost_basis + commission
                }
            else:
                # –ü—Ä–æ–¥–∞–∂–∞ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                revenue = executed_qty * price
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
                return {
                    'type': 'SELL',
                    'quantity': executed_qty,
                    'sell_price': price,
                    'revenue': revenue,
                    'commission': commission,
                    'commission_asset': commission_asset,
                    'net_revenue': revenue - commission
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL: {e}")
            return {}
    
    def analyze_trades(self, trades: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            if not trades:
                return {}
            
            current_price = self.get_current_price()
            if not current_price:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É")
                return {}
            
            logger.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.symbol}: ${current_price:.2f}")
            
            total_buy_qty = 0.0
            total_buy_cost = 0.0
            total_commission = 0.0
            total_sell_qty = 0.0
            total_sell_revenue = 0.0
            
            buy_orders = []
            sell_orders = []
            
            for trade in trades:
                side = trade.get('side', 'BUY')
                executed_qty = float(trade.get('executedQty', 0))
                price = float(trade.get('price', 0))
                commission = float(trade.get('commission', 0))
                commission_asset = trade.get('commissionAsset', 'USDC')
                
                if side == 'BUY':
                    total_buy_qty += executed_qty
                    total_buy_cost += executed_qty * price
                    total_commission += commission
                    buy_orders.append(trade)
                else:
                    total_sell_qty += executed_qty
                    total_sell_revenue += executed_qty * price
                    total_commission += commission
                    sell_orders.append(trade)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π PnL
            total_commission_usdc = total_commission  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–æ–º–∏—Å—Å–∏–∏ –≤ USDC
            
            if total_buy_qty > 0:
                avg_buy_price = total_buy_cost / total_buy_qty
                current_value = total_buy_qty * current_price
                unrealized_pnl = current_value - total_buy_cost
                unrealized_pnl_percent = (unrealized_pnl / total_buy_cost) * 100 if total_buy_cost > 0 else 0
                
                # PnL —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                total_pnl = unrealized_pnl - total_commission_usdc
                total_pnl_percent = (total_pnl / total_buy_cost) * 100 if total_buy_cost > 0 else 0
            else:
                avg_buy_price = 0.0
                current_value = 0.0
                unrealized_pnl = 0.0
                unrealized_pnl_percent = 0.0
                total_pnl = 0.0
                total_pnl_percent = 0.0
            
            return {
                'summary': {
                    'total_buy_quantity': total_buy_qty,
                    'total_buy_cost': total_buy_cost,
                    'total_sell_quantity': total_sell_qty,
                    'total_sell_revenue': total_sell_revenue,
                    'total_commission': total_commission_usdc,
                    'avg_buy_price': avg_buy_price,
                    'current_price': current_price,
                    'current_value': current_value,
                    'unrealized_pnl': unrealized_pnl,
                    'unrealized_pnl_percent': unrealized_pnl_percent,
                    'total_pnl': total_pnl,
                    'total_pnl_percent': total_pnl_percent
                },
                'buy_orders': buy_orders,
                'sell_orders': sell_orders,
                'all_trades': trades
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫: {e}")
            return {}
    
    def format_trade_report(self, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–¥–µ–ª–∫–∞—Ö"""
        try:
            if not analysis:
                return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            
            summary = analysis['summary']
            buy_orders = analysis['buy_orders']
            sell_orders = analysis['sell_orders']
            
            message = f"<b>üìä –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö {self.symbol}</b>\n"
            message += "=" * 50 + "\n\n"
            
            message += f"üìÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${summary['current_price']:.2f}\n\n"
            
            message += "<b>üìà –ü–û–ö–£–ü–ö–ò:</b>\n"
            message += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {summary['total_buy_quantity']:.6f} BTC\n"
            message += f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${summary['total_buy_cost']:.2f} USDC\n"
            message += f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${summary['avg_buy_price']:.2f} USDC\n\n"
            
            message += "<b>üìâ –ü–†–û–î–ê–ñ–ò:</b>\n"
            message += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {summary['total_sell_quantity']:.6f} BTC\n"
            message += f"   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${summary['total_sell_revenue']:.2f} USDC\n\n"
            
            message += "<b>üí∏ –ö–û–ú–ò–°–°–ò–ò:</b>\n"
            message += f"   –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${summary['total_commission']:.4f} USDC\n"
            message += f"   –ö–æ–º–∏—Å—Å–∏—è –≤ % –æ—Ç –ø–æ–∫—É–ø–æ–∫: {(summary['total_commission']/summary['total_buy_cost']*100):.2f}%\n\n"
            
            message += "<b>üìä P&L –ê–ù–ê–õ–ò–ó:</b>\n"
            message += f"   –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${summary['current_value']:.2f} USDC\n"
            message += f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${summary['unrealized_pnl']:.2f} USDC ({summary['unrealized_pnl_percent']:.2f}%)\n"
            message += f"   –û–±—â–∏–π P&L (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏): ${summary['total_pnl']:.2f} USDC ({summary['total_pnl_percent']:.2f}%)\n\n"
            
            message += "<b>üîç –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:</b>\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            recent_trades = analysis['all_trades'][:5]
            for i, trade in enumerate(recent_trades, 1):
                side = trade.get('side', 'BUY')
                qty = float(trade.get('executedQty', 0))
                price = float(trade.get('price', 0))
                commission = float(trade.get('commission', 0))
                time_str = datetime.fromtimestamp(int(trade.get('time', 0))/1000).strftime('%H:%M:%S')
                
                emoji = "üü¢" if side == 'BUY' else "üî¥"
                message += f"   {i}. {emoji} {side} {qty:.6f} BTC @ ${price:.2f} | –ö–æ–º–∏—Å—Å–∏—è: ${commission:.4f} | {time_str}\n"
            
            message += "\n" + "=" * 50 + "\n"
            message += "<b>üìä –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö BTCUSDC</b>"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def run_analysis(self, limit: int = 50) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        try:
            print(f"üöÄ –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö –ü–û {self.symbol}")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
            trades = self.get_recent_trades(limit)
            if not trades:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö")
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            analysis = self.analyze_trades(trades)
            if not analysis:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏")
                return
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            summary = analysis['summary']
            
            print(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –ü–æ–∫—É–ø–∫–∏: {summary['total_buy_quantity']:.6f} BTC –Ω–∞ ${summary['total_buy_cost']:.2f} USDC")
            print(f"   –ü—Ä–æ–¥–∞–∂–∏: {summary['total_sell_quantity']:.6f} BTC –Ω–∞ ${summary['total_sell_revenue']:.2f} USDC")
            print(f"   –ö–æ–º–∏—Å—Å–∏–∏: ${summary['total_commission']:.4f} USDC")
            print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${summary['avg_buy_price']:.2f} USDC")
            print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${summary['current_price']:.2f} USDC")
            print()
            
            print(f"üí∞ P&L –ê–ù–ê–õ–ò–ó:")
            print(f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${summary['unrealized_pnl']:.2f} USDC ({summary['unrealized_pnl_percent']:.2f}%)")
            print(f"   –û–±—â–∏–π P&L (—Å –∫–æ–º–∏—Å—Å–∏—è–º–∏): ${summary['total_pnl']:.2f} USDC ({summary['total_pnl_percent']:.2f}%)")
            print()
            
            print(f"üîç –ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:")
            recent_trades = analysis['all_trades'][:10]
            for i, trade in enumerate(recent_trades, 1):
                side = trade.get('side', 'BUY')
                qty = float(trade.get('executedQty', 0))
                price = float(trade.get('price', 0))
                commission = float(trade.get('commission', 0))
                time_str = datetime.fromtimestamp(int(trade.get('time', 0))/1000).strftime('%d.%m %H:%M:%S')
                
                emoji = "üü¢" if side == 'BUY' else "üî¥"
                print(f"   {i:2d}. {emoji} {side:4s} {qty:8.6f} BTC @ ${price:8.2f} | –ö–æ–º–∏—Å—Å–∏—è: ${commission:6.4f} | {time_str}")
            
            print("\n" + "=" * 60)
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = BTCTradeAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–¥–µ–ª–æ–∫
    analyzer.run_analysis(limit=50)

if __name__ == "__main__":
    main() 