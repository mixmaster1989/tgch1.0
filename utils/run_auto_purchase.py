#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ BTC/ETH
"""

import asyncio
import logging
import sys
from datetime import datetime
from balance_monitor import BalanceMonitor
from auto_purchase_config import get_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_purchase.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ü–û–ö–£–ü–û–ö BTC/ETH")
        logger.info("=" * 60)
        logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        balance_config = config['balance_monitor']
        allocation_config = config['allocation']
        
        logger.info("üìä –ù–ê–°–¢–†–û–ô–ö–ò:")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_config['min_balance_threshold']}")
        logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance_config['max_purchase_amount']}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {balance_config['balance_check_interval']} —Å–µ–∫")
        logger.info(f"   BTC: {allocation_config['btc_allocation']*100}%")
        logger.info(f"   ETH: {allocation_config['eth_allocation']*100}%")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞
        monitor = BalanceMonitor()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        monitor.min_balance_threshold = balance_config['min_balance_threshold']
        monitor.max_purchase_amount = balance_config['max_purchase_amount']
        monitor.balance_check_interval = balance_config['balance_check_interval']
        monitor.min_purchase_interval = balance_config['min_purchase_interval']
        monitor.btc_allocation = allocation_config['btc_allocation']
        monitor.eth_allocation = allocation_config['eth_allocation']
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        await monitor.start_monitoring()
        
    except KeyboardInterrupt:
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        sys.exit(1)

def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = get_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        balance_config = config['balance_monitor']
        allocation_config = config['allocation']
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_config['min_balance_threshold']}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance_config['max_purchase_amount']}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {balance_config['balance_check_interval']} —Å–µ–∫")
        
        print(f"üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
        print(f"   BTC: {allocation_config['btc_allocation']*100}%")
        print(f"   ETH: {allocation_config['eth_allocation']*100}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    print("""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–£–ü–ö–ò BTC/ETH

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python3 run_auto_purchase.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏
  test      - –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  help      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python3 run_auto_purchase.py start
  python3 run_auto_purchase.py test

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ auto_purchase_config.py:
  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
  - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É BTC/ETH
  - –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
  - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
""")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "start":
            asyncio.run(main())
        elif command == "test":
            test_configuration()
        elif command == "help":
            show_help()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            show_help()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º
        asyncio.run(main()) 