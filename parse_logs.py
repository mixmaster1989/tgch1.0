#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ PM2 –∏ –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
"""

import subprocess
import re
import sys

def parse_pm2_logs():
    """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ PM2 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
        result = subprocess.run(
            ['pm2', 'logs', 'mex-trading-bot', '--lines', '1000'],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
            return
        
        logs = result.stdout
        
        # –ò—â–µ–º –æ—à–∏–±–∫–∏
        error_patterns = [
            r'local variable.*referenced before assignment',
            r'UnboundLocalError.*time',
            r'NameError.*time',
            r'Exception.*time',
            r'Traceback.*time',
            r'Error.*time',
            r'‚ùå.*–û—à–∏–±–∫–∞.*–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏',
            r'‚ùå.*–û—à–∏–±–∫–∞.*time'
        ]
        
        print("üîç –ü–û–ò–°–ö –û–®–ò–ë–û–ö –í –õ–û–ì–ê–•:")
        print("=" * 50)
        
        found_errors = False
        for pattern in error_patterns:
            matches = re.findall(pattern, logs, re.IGNORECASE)
            if matches:
                found_errors = True
                print(f"\nüö® –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê: {pattern}")
                for match in matches:
                    print(f"   {match}")
        
        if not found_errors:
            print("‚úÖ –û—à–∏–±–æ–∫ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'time' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å 'time' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø 'time':")
        print("=" * 50)
        
        time_lines = []
        for line in logs.split('\n'):
            if 'time' in line.lower() and ('error' in line.lower() or 'exception' in line.lower() or 'traceback' in line.lower()):
                time_lines.append(line.strip())
        
        if time_lines:
            print("–ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ —Å 'time' –∏ –æ—à–∏–±–∫–∞–º–∏:")
            for line in time_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                print(f"   {line}")
        else:
            print("–°—Ç—Ä–æ–∫ —Å 'time' –∏ –æ—à–∏–±–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    parse_pm2_logs()
