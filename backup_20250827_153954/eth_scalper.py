#!/usr/bin/env python3
"""
–°–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è BTC
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç BTC –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
- –í—Ö–æ–¥–∏—Ç –Ω–∞ 3 USDC –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ —Ä–æ—Å—Ç–∞
- –§–∏–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å –æ—Ç 3 —Ü–µ–Ω—Ç–æ–≤
- –ë—ã—Å—Ç—Ä—ã–µ –≤—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã
- –†–´–ù–û–ß–ù–´–ï –û–†–î–ï–†–ê –ë–ï–ó –ö–û–ú–ò–°–°–ò–ô (BTCUSDC)
"""

import asyncio
import time
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from decimal import Decimal

from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
# from neural_analyzer import NeuralAnalyzer  # –£–±–∏—Ä–∞–µ–º AI –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ETHScalper:
    """–°–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è ETH"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.tech_indicators = TechnicalIndicators()
        # self.neural_analyzer = NeuralAnalyzer()  # –£–±–∏—Ä–∞–µ–º AI –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ - –ü–ï–†–ï–í–û–î –ù–ê ETHUSDC!
        self.symbol = 'ETHUSDC'  # –ò–ó–ú–ï–ù–ï–ù–û: BTCUSDC ‚Üí ETHUSDC
        self.position_size_usdc = 4.9  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDC
        self.min_profit_usdc = 0.02   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (0.02 USDC = 2 —Ü–µ–Ω—Ç–∞) - –§–ò–ö–°–ò–†–£–ï–ú 2 –¶–ï–ù–¢–ê
        self.scan_interval = 5         # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        self.current_position = None   # –¢–µ–∫—É—â–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.entry_price = 0.0
        self.entry_time = None
        self.position_quantity = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_trades = 0
        self.profitable_trades = 0
        self.total_profit = 0.0
        self.max_profit_trade = 0.0
        self.max_loss_trade = 0.0
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.last_trade_time = None
        self.min_trade_cooldown = 30   # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.price_history = []
        self.max_history_size = 100
        
        # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ USDC
        self.last_balance_check = 0
        self.balance_check_interval = 300  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'eth_scalper_state.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.load_state()
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            state = {
                'current_position': self.current_position,
                'entry_price': self.entry_price,
                'entry_time': self.entry_time,
                'position_quantity': self.position_quantity,
                'total_trades': self.total_trades,
                'profitable_trades': self.profitable_trades,
                'total_profit': self.total_profit,
                'max_profit_trade': self.max_profit_trade,
                'max_loss_trade': self.max_loss_trade,
                'last_trade_time': self.last_trade_time,
                'saved_at': datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.state_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.state_file):
                logger.info("üìÅ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                return
            
            with open(self.state_file, 'r', encoding='utf-8') as f:
                state = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_position = state.get('current_position')
            self.entry_price = state.get('entry_price', 0.0)
            self.entry_time = state.get('entry_time')
            self.position_quantity = state.get('position_quantity', 0.0)
            self.total_trades = state.get('total_trades', 0)
            self.profitable_trades = state.get('profitable_trades', 0)
            self.total_profit = state.get('total_profit', 0.0)
            self.max_profit_trade = state.get('max_profit_trade', 0.0)
            self.max_loss_trade = state.get('max_loss_trade', 0.0)
            self.last_trade_time = state.get('last_trade_time')
            
            saved_at = state.get('saved_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            logger.info(f"üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {self.state_file}")
            logger.info(f"üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_at}")
            
            if self.current_position:
                logger.info(f"üìà –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {self.position_quantity:.6f} ETH @ ${self.entry_price:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_current_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH"""
        try:
            ticker = self.mex_api.get_ticker_price(self.symbol)
            if ticker and 'price' in ticker:
                price = float(ticker['price'])
                self.update_price_history(price)
                return price
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {self.symbol}: {e}")
            return None
    
    def update_price_history(self, price: float):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
        self.price_history.append({
            'price': price,
            'timestamp': time.time()
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.price_history) > self.max_history_size:
            self.price_history.pop(0)
    
    def get_technical_analysis(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ETH"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (1-–º–∏–Ω—É—Ç–Ω—ã–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
            klines = self.mex_api.get_klines(self.symbol, '1m', 50)
            if not klines or len(klines) < 20:
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.tech_indicators.calculate_all_indicators(klines, self.symbol)
            if not indicators:
                return None
            
            return indicators
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None
    
    # def get_ai_analysis(self) -> Optional[Dict]:
    #     """–ü–æ–ª—É—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ BTC - –£–ë–†–ê–ù–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏"""
    #     return None
    
    def calculate_scalping_signals(self, tech_analysis: Dict, ai_analysis: Dict = None) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            signals = {
                'action': 'HOLD',
                'confidence': 0.0,
                'reasons': [],
                'price': 0.0
            }
            
            current_price = self.get_current_price()
            if not current_price:
                return signals
            
            signals['price'] = current_price
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            tech_signals = 0
            tech_reasons = []
            
            # RSI —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            rsi = tech_analysis.get('rsi_14', 50)
            if rsi < 35:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                tech_signals += 2
                tech_reasons.append(f"RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω ({rsi:.1f})")
            elif rsi > 65:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                tech_signals -= 2
                tech_reasons.append(f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω ({rsi:.1f})")
            
            # MACD —Å–∏–≥–Ω–∞–ª—ã
            macd_data = tech_analysis.get('macd', {})
            macd_histogram = macd_data.get('histogram', 0)
            if macd_histogram > 0:
                tech_signals += 1
                tech_reasons.append("MACD –±—ã—á–∏–π")
            elif macd_histogram < 0:
                tech_signals -= 1
                tech_reasons.append("MACD –º–µ–¥–≤–µ–∂–∏–π")
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –ø–æ MA
            sma_20 = tech_analysis.get('sma_20', current_price)
            ema_12 = tech_analysis.get('ema_12', current_price)
            
            if current_price > sma_20 and current_price > ema_12:
                tech_signals += 1
                tech_reasons.append("–¶–µ–Ω–∞ –≤—ã—à–µ MA")
            elif current_price < sma_20 and current_price < ema_12:
                tech_signals -= 1
                tech_reasons.append("–¶–µ–Ω–∞ –Ω–∏–∂–µ MA")
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_ratio = tech_analysis.get('volume_ratio', 1.0)
            if volume_ratio > 1.2:
                tech_signals += 1
                tech_reasons.append("–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º")
            
            # AI —Å–∏–≥–Ω–∞–ª—ã - –£–ë–†–ê–ù–û –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            ai_signals = 0
            ai_reasons = []
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π)
            if len(self.price_history) >= 10:
                recent_prices = [p['price'] for p in self.price_history[-10:]]
                price_trend = (recent_prices[-1] - recent_prices[0]) / recent_prices[0]
                
                if price_trend > 0.001:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 0.1%
                    tech_signals += 1
                    tech_reasons.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç")
                elif price_trend < -0.001:  # –ü–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 0.1%
                    tech_signals -= 1
                    tech_reasons.append("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            total_signals = tech_signals + ai_signals
            all_reasons = tech_reasons + ai_reasons
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ - –°–ù–ò–ñ–ê–ï–ú –ü–û–†–û–ì–ò!
            if total_signals >= 1:  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ (–±—ã–ª–æ 3)
                signals['action'] = 'BUY'
                signals['confidence'] = min(0.9, 0.3 + (total_signals * 0.2))
            elif total_signals <= -1:  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏ (–±—ã–ª–æ -3)
                signals['action'] = 'SELL'
                signals['confidence'] = min(0.9, 0.3 + (abs(total_signals) * 0.2))
            else:
                signals['action'] = 'HOLD'
                signals['confidence'] = 0.0
            
            signals['reasons'] = all_reasons
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return {'action': 'HOLD', 'confidence': 0.0, 'reasons': [], 'price': 0.0}
    
    def check_exit_conditions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.current_position:
            return False
        
        current_price = self.get_current_price()
        if not current_price:
            return False
        
        # –ü–†–û–°–¢–ï–ô–®–ò–ô –§–ò–õ–¨–¢–†: –ù–ï –ü–†–û–î–ê–í–ê–¢–¨ –î–ï–®–ï–í–õ–ï –¶–ï–ù–´ –ü–û–ö–£–ü–ö–ò!
        if self.current_position['side'] == 'BUY':
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ - –ù–ï –ü–†–û–î–ê–ï–ú!
            if current_price < self.entry_price:
                logger.info(f"üõ°Ô∏è –¶–µ–Ω–∞ ${current_price:.2f} < —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ ${self.entry_price:.2f} - –ù–ï –ü–†–û–î–ê–ï–ú!")
                return False
            
            # –ü—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ü–µ–Ω–∞ –í–´–®–ï —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            pnl = (current_price - self.entry_price) * self.position_quantity
            if pnl >= self.min_profit_usdc:
                logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${pnl:.4f} USDC")
                return True
        else:
            # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if current_price > self.entry_price:
                logger.info(f"üõ°Ô∏è –¶–µ–Ω–∞ ${current_price:.2f} > —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏ ${self.entry_price:.2f} - –ù–ï –ü–û–ö–£–ü–ê–ï–ú!")
                return False
            
            pnl = (self.entry_price - current_price) * self.position_quantity
            if pnl >= self.min_profit_usdc:
                logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${pnl:.4f} USDC")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–±—ã—Ç–æ–∫ (—Å—Ç–æ–ø-–ª–æ—Å—Å) - –¢–û–õ–¨–ö–û –ï–°–õ–ò –¶–ï–ù–ê –í–´–®–ï –ü–û–ö–£–ü–ö–ò
        if self.current_position['side'] == 'BUY' and current_price >= self.entry_price:
            max_loss = -self.min_profit_usdc * 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ = 2x –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            if pnl <= max_loss:
                logger.warning(f"üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${pnl:.4f} USDC")
                return True
        
        return False
    
    def check_balance_periodically(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ USDC"""
        current_time = time.time()
        if current_time - self.last_balance_check > self.balance_check_interval:
            try:
                usdc_balance = self.get_usdc_balance()
                usdt_balance = self.get_usdt_balance()
                
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: ${usdc_balance:.2f}, USDT: ${usdt_balance:.2f}")
                
                # –ï—Å–ª–∏ USDC –º–∞–ª–æ, –Ω–æ –µ—Å—Ç—å USDT - –ø–æ–∫—É–ø–∞–µ–º USDC
                if usdc_balance < 5.0 and usdt_balance > 10.0:
                    logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ USDC –∑–∞ USDT...")
                    self.ensure_usdc_for_trade(5.0)
                
                self.last_balance_check = current_time
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
    
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
    
    def ensure_usdc_for_trade(self, required_usdc: float) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å USDC –¥–ª—è —Å–¥–µ–ª–∫–∏; –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—É–ø–∏—Ç—å –∑–∞ USDT"""
        try:
            buffer = 0.02  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
            need = required_usdc + buffer
            usdc_free = self.get_usdc_balance()
            
            if usdc_free >= need:
                return True

            # –ü–æ–∫—É–ø–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC –∑–∞ USDT
            shortfall = max(0.0, need - usdc_free)
            usdt_free = self.get_usdt_balance()
            
            if usdt_free < shortfall:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC: –Ω—É–∂–Ω–æ ${shortfall:.2f}, –µ—Å—Ç—å ${usdt_free:.2f}")
                return False

            qty = round(shortfall, 2)
            if qty < 1.0:
                qty = 1.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—É–º–Ω—ã–π —à–∞–≥

            # –ü–æ–∫—É–ø–∞–µ–º USDC –∑–∞ USDT —á–µ—Ä–µ–∑ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol='USDCUSDT', 
                side='BUY', 
                quantity=qty
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT: ${qty:.2f}")
                try:
                    self.send_telegram_message(f"üí± –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT –Ω–∞ ${qty:.2f} –¥–ª—è —Å–¥–µ–ª–∫–∏ –ø–æ {self.symbol}")
                except Exception:
                    pass
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å USDC: {order}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ensure_usdc_for_trade: {e}")
            return False
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0

    def execute_buy_order(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ–∫—É–ø–∫–∏ BTC –∑–∞ USDC"""
        try:
            current_price = self.get_current_price()
            if not current_price:
                return False
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç USDC –¥–ª—è —Å–¥–µ–ª–∫–∏
            if not self.ensure_usdc_for_trade(self.position_size_usdc):
                logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH")
                return False
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH
            quantity = self.position_size_usdc / current_price
            quantity = round(quantity, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
            
            # –†–∞–∑–º–µ—â–∞–µ–º –õ–ò–ú–ò–¢–ù–´–ô –æ—Ä–¥–µ—Ä –ø–æ –º–µ–π–∫–µ—Ä —Ü–µ–Ω–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏!)
            order = self.mex_api.place_order(
                symbol=self.symbol,
                side='BUY',
                quantity=quantity,
                price=current_price  # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            )
            
            if order and 'orderId' in order:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                self.current_position = {
                    'order_id': order['orderId'],
                    'side': 'BUY',
                    'quantity': quantity,
                    'price': current_price
                }
                self.entry_price = current_price
                self.entry_time = time.time()
                self.position_quantity = quantity
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
                self.save_state()
                
                logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ ETH: {quantity:.6f} @ ${current_price:.2f} –∑–∞ {self.position_size_usdc} USDC")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ ETH: {order}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏: {e}")
            return False
    
    def execute_sell_order(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –ø—Ä–æ–¥–∞–∂–∏ ETH –∑–∞ USDC"""
        try:
            if not self.current_position:
                return False
            
            current_price = self.get_current_price()
            if not current_price:
                return False
            
            # –ü—Ä–æ–¥–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
            quantity = self.position_quantity
            
            # –†–∞–∑–º–µ—â–∞–µ–º –õ–ò–ú–ò–¢–ù–´–ô –æ—Ä–¥–µ—Ä –ø–æ –º–µ–π–∫–µ—Ä —Ü–µ–Ω–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏!)
            order = self.mex_api.place_order(
                symbol=self.symbol,
                side='SELL',
                quantity=quantity,
                price=current_price  # –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
            )
            
            if order and 'orderId' in order:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L –≤ USDC
                if self.current_position['side'] == 'BUY':
                    pnl = (current_price - self.entry_price) * quantity
                else:
                    pnl = (self.entry_price - current_price) * quantity
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.total_trades += 1
                if pnl > 0:
                    self.profitable_trades += 1
                    self.max_profit_trade = max(self.max_profit_trade, pnl)
                else:
                    self.max_loss_trade = min(self.max_loss_trade, pnl)
                
                self.total_profit += pnl
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.current_position = None
                self.entry_price = 0.0
                self.entry_time = None
                self.position_quantity = 0.0
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
                self.save_state()
                
                logger.info(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ ETH: {quantity:.6f} @ ${current_price:.2f}, P&L: ${pnl:.4f} USDC")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ ETH: {order}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return False
    
    def format_trade_report(self, action: str, signals: Dict, result: bool) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ —Å–¥–µ–ª–∫–µ"""
        try:
            message = "<b>‚ö° ETH –°–ö–ê–õ–¨–ü–ï–† (ETHUSDC)</b>\n"
            message += "=" * 40 + "\n\n"
            
            message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"üí∞ –¶–µ–Ω–∞ ETH: ${signals['price']:.2f}\n"
            message += f"üí± –ü–∞—Ä–∞: {self.symbol}\n\n"
            
            message += "<b>üéØ –°–ò–ì–ù–ê–õ–´:</b>\n"
            message += f"üìä –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
            if 'confidence' in signals:
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals['confidence']:.1%}\n"
            else:
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: N/A (–≤—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏)\n"
            
            if 'reasons' in signals and signals['reasons']:
                message += f"üìã –ü—Ä–∏—á–∏–Ω—ã: {', '.join(signals['reasons'])}\n"
            
            message += "\n<b>üíº –†–ï–ó–£–õ–¨–¢–ê–¢:</b>\n"
            
            if result:
                if action == 'BUY':
                    message += "‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
                    message += f"üìà –ü–æ–∑–∏—Ü–∏—è: {action}\n"
                    message += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.position_quantity:.6f} ETH\n"
                    message += f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${self.entry_price:.2f} USDC\n"
                    message += f"üõ°Ô∏è –§–ò–õ–¨–¢–†: –ù–ï –ü–†–û–î–ê–ï–ú –î–ï–®–ï–í–õ–ï ${self.entry_price:.2f}!\n"
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏
                    if self.entry_time:
                        time_in_position = time.time() - self.entry_time
                        message += f"‚è∞ –í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏: {time_in_position:.0f} —Å–µ–∫\n"
                    else:
                        message += "‚è∞ –í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏: 0 —Å–µ–∫\n"
                else:
                    message += "‚úÖ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
                    message += f"üìâ –ü–æ–∑–∏—Ü–∏—è: {action}\n"
                    message += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.position_quantity:.6f} ETH\n"
                    message += f"üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${self.entry_price:.2f} USDC\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PnL
                    if self.current_position and 'entry_price' in self.current_position:
                        entry_price = self.current_position['entry_price']
                        pnl = (self.entry_price - entry_price) * self.position_quantity
                        message += f"üìà PnL: ${pnl:.4f} USDC\n"
            else:
                message += "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
                if action == 'BUY':
                    message += "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    message += "   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC\n"
                    message += "   - –û—à–∏–±–∫–∞ API\n"
                    message += "   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å\n"
                else:
                    message += "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    message += "   - –¶–µ–Ω–∞ –Ω–∏–∂–µ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (—Ñ–∏–ª—å—Ç—Ä –∑–∞—â–∏—Ç—ã)\n"
                    message += "   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å\n"
                    message += "   - –û—à–∏–±–∫–∞ API\n"
            
            message += "\n" + "=" * 40 + "\n"
            message += "<b>‚ö° ETH –°–ö–ê–õ–¨–ü–ï–†</b>"
            
            return message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á–µ—Ç–∞: {e}"
    
    def format_statistics_report(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            win_rate = (self.profitable_trades / self.total_trades * 100) if self.total_trades > 0 else 0
            
            message = "<b>üìä ETH –°–ö–ê–õ–¨–ü–ï–† - –°–¢–ê–¢–ò–°–¢–ò–ö–ê (ETHUSDC)</b>\n"
            message += "=" * 40 + "\n\n"
            
            message += f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.total_trades}\n"
            message += f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.profitable_trades}\n"
            message += f"üìä –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n"
            message += f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.total_profit:.4f} USDC\n"
            message += f"üìà –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: ${self.max_profit_trade:.4f} USDC\n"
            message += f"üìâ –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: ${self.max_loss_trade:.4f} USDC\n"
            
            if self.total_trades > 0:
                avg_profit = self.total_profit / self.total_trades
                message += f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.4f} USDC\n"
            
            message += f"\nüí± –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {self.symbol}\n"
            message += f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${self.position_size_usdc:.2f} USDC\n"
            message += f"üéØ –ú–∏–Ω. –ø—Ä–∏–±—ã–ª—å: ${self.min_profit_usdc:.3f} USDC\n"
            
            message += "\n" + "=" * 40 + "\n"
            message += "<b>üìä ETH –°–ö–ê–õ–¨–ü–ï–† (ETHUSDC)</b>"
            
            return message
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
    
    async def scalping_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        try:
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            self.check_balance_periodically()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
            if (self.last_trade_time and 
                time.time() - self.last_trade_time < self.min_trade_cooldown):
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
            if self.current_position:
                if self.check_exit_conditions():
                    result = self.execute_sell_order()
                    if result:
                        self.last_trade_time = time.time()
                        report = self.format_trade_report("EXIT", {'price': self.get_current_price() or 0}, result)
                        self.send_telegram_message(report)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            tech_analysis = self.get_technical_analysis()
            if not tech_analysis:
                logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
            signals = self.calculate_scalping_signals(tech_analysis)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            current_price = signals.get('price', 0)
            rsi = tech_analysis.get('rsi_14', 50)
            macd_hist = tech_analysis.get('macd', {}).get('histogram', 0)
            
            logger.info(f"üîç ETH –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${current_price:.2f} | RSI: {rsi:.1f} | MACD: {macd_hist:.2f} | –°–∏–≥–Ω–∞–ª: {signals['action']} ({signals['confidence']:.1%})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É - –°–ù–ò–ñ–ê–ï–ú –ü–û–†–û–ì!
            if signals['action'] == 'BUY' and signals['confidence'] > 0.3:  # –ë—ã–ª–æ 0.6
                logger.info(f"üéØ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò ETH: {signals['confidence']:.1%} | –ü—Ä–∏—á–∏–Ω—ã: {', '.join(signals['reasons'])}")
                
                result = self.execute_buy_order()
                if result:
                    self.last_trade_time = time.time()
                    report = self.format_trade_report("BUY", signals, result)
                    self.send_telegram_message(report)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {e}")
    
    async def start_scalping(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞")
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   –°–∏–º–≤–æ–ª: {self.symbol}")
        logger.info(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${self.position_size_usdc}")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${self.min_profit_usdc}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {self.scan_interval} —Å–µ–∫")
        
        self.is_running = True
        
        while self.is_running:
            try:
                await self.scalping_cycle()
                await asyncio.sleep(self.scan_interval)
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(self.scan_interval)
    
    def stop_scalping(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–ª—å–ø–∏–Ω–≥"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞")
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if self.current_position:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏...")
            self.execute_sell_order()
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫–∞–ª—å–ø–µ—Ä–∞"""
        return {
            'is_running': self.is_running,
            'current_position': self.current_position,
            'total_trades': self.total_trades,
            'profitable_trades': self.profitable_trades,
            'total_profit': self.total_profit,
            'max_profit_trade': self.max_profit_trade,
            'max_loss_trade': self.max_loss_trade,
            'scan_interval': self.scan_interval,
            'position_size_usdc': self.position_size_usdc,
            'min_profit_usdc': self.min_profit_usdc
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_eth_scalper():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å ETH —Å–∫–∞–ª—å–ø–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    scalper = ETHScalper()
    asyncio.run(scalper.start_scalping())

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    scalper = ETHScalper()
    asyncio.run(scalper.start_scalping())
