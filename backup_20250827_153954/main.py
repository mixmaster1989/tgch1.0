#!/usr/bin/env python3
"""
MEX Trading Bot - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ MEX —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import logging
from logging.handlers import RotatingFileHandler
import threading
from native_trader_bot import NativeTraderBot
from startup_dashboard import StartupDashboard
from balance_monitor import BalanceMonitor
from pnl_monitor import PnLMonitor
from auto_purchase_config import get_config
from config import PNL_MONITOR_CONFIG
from alt_monitor import AltsMonitor
# from stablecoin_balancer import StablecoinBalancer
from market_scanner import MarketScanner
from orders_reporter import OrdersReporter
from active_50_50_balancer import Active5050Balancer
from btc_scalper import BTCScalper
from eth_scalper import ETHScalper
from scalpers_reporter import ScalpersReporter
from scalper_manager import ScalperManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('bot.log', maxBytes=20 * 1024 * 1024, backupCount=5, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def start_balance_monitor():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        balance_config = config['balance_monitor']
        allocation_config = config['allocation']
        
        logger.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫:")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_config['min_balance_threshold']}")
        logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${balance_config['max_purchase_amount']}")
        logger.info(f"   BTC: {allocation_config['btc_allocation']*100}% | ETH: {allocation_config['eth_allocation']*100}%")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞
        monitor = BalanceMonitor()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        monitor.min_balance_threshold = balance_config['min_balance_threshold']
        monitor.max_purchase_amount = balance_config['max_purchase_amount']
        monitor.balance_check_interval = balance_config['balance_check_interval']
        monitor.min_purchase_interval = balance_config['min_purchase_interval']
        monitor.btc_allocation = allocation_config['btc_allocation']
        monitor.eth_allocation = allocation_config['eth_allocation']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_monitor():
            asyncio.run(monitor.start_monitoring())
        
        monitor_thread = threading.Thread(target=run_monitor, daemon=True)
        monitor_thread.start()
        
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")

def start_pnl_monitor():
    """–ó–∞–ø—É—Å–∫ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏...")
        
        # –°–æ–∑–¥–∞–µ–º PnL –º–æ–Ω–∏—Ç–æ—Ä
        pnl_monitor = PnLMonitor()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞:")
        logger.info(f"   –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏: ${pnl_monitor.profit_threshold}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {pnl_monitor.check_interval} —Å–µ–∫")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {pnl_monitor.notification_interval} —Å–µ–∫")
        logger.info(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {', '.join(pnl_monitor.trading_pairs)}")
        logger.info(f"   –ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if pnl_monitor.auto_sell_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_pnl_monitor():
            pnl_monitor.start_monitoring()
        
        pnl_thread = threading.Thread(target=run_pnl_monitor, daemon=True)
        pnl_thread.start()
        
        logger.info("‚úÖ PnL –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PnL –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")

def start_scalper_manager():
    """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        scalper_manager = ScalperManager()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        logger.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤:")
        logger.info(f"   –ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: ${scalper_manager.min_usdc_balance_after_scalper:.2f} USDC")
        logger.info(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${scalper_manager.position_size_usdc:.2f} USDC")
        logger.info(f"   –ú–∞–∫—Å–∏–º—É–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {scalper_manager.max_instances_per_symbol} –Ω–∞ —Å–∏–º–≤–æ–ª")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è: {scalper_manager.min_stuck_time/3600:.1f} —á–∞—Å–æ–≤")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {scalper_manager.scan_interval} —Å–µ–∫")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scalper_manager():
            asyncio.run(scalper_manager.run())
        
        manager_thread = threading.Thread(target=run_scalper_manager, daemon=True)
        manager_thread.start()
        
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤: {e}")

def start_market_scanner():
    """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞
        scanner = MarketScanner()
        
        logger.info("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞:")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scanner.scan_interval} —Å–µ–∫")
        logger.info(f"   –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã: {len(scanner.trading_pairs)}")
        logger.info(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏: –í–ö–õ–Æ–ß–ï–ù–´")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_scanner():
            asyncio.run(scanner.start_scanning())
        
        scanner_thread = threading.Thread(target=run_scanner, daemon=True)
        scanner_thread.start()
        
        logger.info("‚úÖ –°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞ —Ä—ã–Ω–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MEX Trading Bot...")
        logger.info("=" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–ª–∞—à–∫—É
        dashboard = StartupDashboard()
        dashboard.send_startup_notification()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        logger.info("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ...")
        dashboard.send_extended_portfolio_report()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫
        start_market_scanner()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫
        start_balance_monitor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º PnL –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–¥–∞–∂–∏
        start_pnl_monitor()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∞–ª—å—Ç–æ–≤ (–ø–æ—Ä–æ–≥ $0.15)
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∞–ª—å—Ç–æ–≤ (–ø–æ—Ä–æ–≥ $0.15)...")
            alts_monitor = AltsMonitor()
            def run_alts_monitor():
                alts_monitor.start()
            t = threading.Thread(target=run_alts_monitor, daemon=True)
            t.start()
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∞–ª—å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∞–ª—å—Ç–æ–≤: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤...")
            orders_reporter = OrdersReporter()
            def run_orders_reporter():
                orders_reporter.start()
            t = threading.Thread(target=run_orders_reporter, daemon=True)
            t.start()
            logger.info("‚úÖ –†–µ–ø–æ—Ä—Ç–µ—Ä –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤...")
            scalpers_reporter = ScalpersReporter()
            def run_scalpers_reporter():
                scalpers_reporter.start()
            t = threading.Thread(target=run_scalpers_reporter, daemon=True)
            t.start()
            logger.info("‚úÖ –†–µ–ø–æ—Ä—Ç–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ 50/50
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50...")
            active_balancer = Active5050Balancer()
            def run_active_balancer():
                asyncio.run(active_balancer.start_monitoring())
            t = threading.Thread(target=run_active_balancer, daemon=True)
            t.start()
            logger.info("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ 50/50 –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º BTC —Å–∫–∞–ª—å–ø–µ—Ä
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ BTC —Å–∫–∞–ª—å–ø–µ—Ä–∞ (BTCUSDC)...")
            btc_scalper = BTCScalper()
            def run_btc_scalper():
                asyncio.run(btc_scalper.start_scalping())
            t = threading.Thread(target=run_btc_scalper, daemon=True)
            t.start()
            logger.info("‚úÖ BTC —Å–∫–∞–ª—å–ø–µ—Ä (BTCUSDC) –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ BTC —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º ETH —Å–∫–∞–ª—å–ø–µ—Ä
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞ (ETHUSDC)...")
            eth_scalper = ETHScalper()
            def run_eth_scalper():
                asyncio.run(eth_scalper.start_scalping())
            t = threading.Thread(target=run_eth_scalper, daemon=True)
            t.start()
            logger.info("‚úÖ ETH —Å–∫–∞–ª—å–ø–µ—Ä (ETHUSDC) –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        start_scalper_manager()

        # (–û—Ç–∫–ª—é—á–µ–Ω–æ) –ó–∞–ø—É—Å–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤
        # try:
        #     logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ USDT/USDC...")
        #     stablecoin_balancer = StablecoinBalancer()
        #     def run_stablecoin_balancer():
        #         stablecoin_balancer.start_monitoring()
        #     t = threading.Thread(target=run_stablecoin_balancer, daemon=True)
        #     t.start()
        #     logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —Å—Ç–µ–π–±–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        # except Exception as e:
        #     logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ —Å—Ç–µ–π–±–ª–æ–≤: {e}")

        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã:")
        logger.info("   üîç –°–∫–∞–Ω–µ—Ä —Ä—ã–Ω–∫–∞ —Å –∞–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞–º–∏")
        logger.info("   üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫—É–ø–∫–∏ BTC/ETH")
        logger.info("   üìä PnL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–µ–π")
        logger.info("   üß© –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª—å—Ç–æ–≤ (–ø–æ—Ä–æ–≥ $0.15)")
        logger.info("   ‚öñÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ 50/50 (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫)")
        logger.info("   ‚ö° BTC —Å–∫–∞–ª—å–ø–µ—Ä BTCUSDC (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫, —Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞)")
        logger.info("   ‚ö° ETH —Å–∫–∞–ª—å–ø–µ—Ä ETHUSDC (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫, –ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞)")
        logger.info("   üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫, –∑–∞—â–∏—Ç–∞ $20 USDC)")
        logger.info("   üìä –†–µ–ø–æ—Ä—Ç–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω, ‚â§$5 –ø–æ–∑–∏—Ü–∏–∏)")
        # logger.info("   ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ USDT/USDC (–∫–∞–∂–¥—ã–π —á–∞—Å)")
        logger.info("   ü§ñ Telegram –±–æ—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –¢—Ä–µ–π–¥–µ—Ä–∞
        trader = NativeTraderBot()
        trader.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()