#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏ BTC/ETH —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è" —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–∞—Ö —Ü–µ–Ω
"""

import asyncio
import time
import logging
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from enum import Enum

from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ScalperStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∫–∞–ª—å–ø–µ—Ä–∞"""
    IDLE = "idle"           # –û–∂–∏–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
    ACTIVE = "active"       # –ê–∫—Ç–∏–≤–Ω–æ —Ç–æ—Ä–≥—É–µ—Ç
    STUCK = "stuck"         # –ó–∞—Å—Ç—Ä—è–ª (—Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞)
    PROFIT = "profit"       # –ó–∞–∫—Ä—ã–ª —Å –ø—Ä–∏–±—ã–ª—å—é
    LOSS = "loss"          # –ó–∞–∫—Ä—ã–ª —Å —É–±—ã—Ç–∫–æ–º

@dataclass
class ScalperInstance:
    """–≠–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–ª—å–ø–µ—Ä–∞"""
    id: str                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    symbol: str               # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDC/ETHUSDC)
    status: ScalperStatus     # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    entry_price: float        # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
    entry_time: datetime      # –í—Ä–µ–º—è –≤—Ö–æ–¥–∞
    position_size: float      # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ USDC
    current_quantity: float   # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
    stuck_since: Optional[datetime] = None  # –ö–æ–≥–¥–∞ –∑–∞—Å—Ç—Ä—è–ª
    profit_target: float = 0.02  # –¶–µ–ª–µ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USDC (2 —Ü–µ–Ω—Ç–∞)
    max_stuck_time: int = 86400   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è" (24 —á–∞—Å–∞)

class ScalperManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞–º–∏"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.scan_interval = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.max_instances_per_symbol = 3  # –ú–∞–∫—Å–∏–º—É–º 3 —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞ —Å–∏–º–≤–æ–ª
        self.min_stuck_time = 86400  # –ú–∏–Ω–∏–º—É–º 24 —á–∞—Å–∞ (—Å—É—Ç–∫–∏) "–∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è" –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
        
        # –ó–ê–©–ò–¢–ê –ë–ê–õ–ê–ù–°–ê USDC - –£–í–ï–õ–ò–ß–ï–ù–û –î–û $20!
        self.min_usdc_balance_after_scalper = 5.0  # –ú–∏–Ω–∏–º—É–º $5 USDC –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –¥–ª—è —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        self.position_size_usdc = 4.9  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
        self.btc_scalpers: List[ScalperInstance] = []
        self.eth_scalpers: List[ScalperInstance] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_instances_created = 0
        self.total_instances_closed = 0
        self.total_profit = 0.0
        
        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
        self.is_running = False
        
        # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state_file = 'scalper_manager_state.json'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.load_state()
    
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token or not self.chat_id:
            return
            
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
    
    def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.mex_api.get_ticker_price(symbol)
            if 'price' in ticker:
                return float(ticker['price'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return 0.0
    
    def can_create_new_scalper(self, symbol: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫–∞–ª—å–ø–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            active_scalpers = self.get_active_scalpers(symbol)
            if len(active_scalpers) >= self.max_instances_per_symbol:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –¥–ª—è {symbol}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDC
            current_usdc = self.get_usdc_balance()
            required_usdc = self.position_size_usdc
            remaining_after = current_usdc - required_usdc
            
            if remaining_after < self.min_usdc_balance_after_scalper:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ${remaining_after:.2f}, –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_scalper:.2f}"
            
            return True, "OK"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")
            return False, f"–û—à–∏–±–∫–∞: {e}"
    
    def create_scalper_instance(self, symbol: str, entry_price: float) -> Optional[ScalperInstance]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–ª—å–ø–µ—Ä–∞"""
        try:
            can_create, reason = self.can_create_new_scalper(symbol)
            if not can_create:
                logger.warning(f"‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–∫–∞–ª—å–ø–µ—Ä {symbol}: {reason}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
            instance_id = f"{symbol}_{int(time.time())}"
            instance = ScalperInstance(
                id=instance_id,
                symbol=symbol,
                status=ScalperStatus.ACTIVE,
                entry_price=entry_price,
                entry_time=datetime.now(),
                position_size=self.position_size_usdc,
                current_quantity=self.position_size_usdc / entry_price
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
            if symbol == 'BTCUSDC':
                self.btc_scalpers.append(instance)
            elif symbol == 'ETHUSDC':
                self.eth_scalpers.append(instance)
            
            self.total_instances_created += 1
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message = f"üöÄ <b>–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–∫–∞–ª—å–ø–µ—Ä</b>\n" \
                     f"–°–∏–º–≤–æ–ª: {symbol}\n" \
                     f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:.2f}\n" \
                     f"–†–∞–∑–º–µ—Ä: ${self.position_size_usdc:.2f} USDC\n" \
                     f"ID: {instance_id}"
            self.send_telegram_message(message)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–∫–∞–ª—å–ø–µ—Ä {symbol} @ ${entry_price:.2f}")
            return instance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–∞ {symbol}: {e}")
            return None
    
    def get_active_scalpers(self, symbol: str) -> List[ScalperInstance]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–∫–∞–ª—å–ø–µ—Ä–∞ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        if symbol == 'BTCUSDC':
            return [s for s in self.btc_scalpers if s.status in [ScalperStatus.ACTIVE, ScalperStatus.STUCK]]
        elif symbol == 'ETHUSDC':
            return [s for s in self.eth_scalpers if s.status in [ScalperStatus.ACTIVE, ScalperStatus.STUCK]]
        return []
    
    def update_scalper_status(self, instance: ScalperInstance, current_price: float):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫–∞–ª—å–ø–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            if instance.status == ScalperStatus.ACTIVE:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä
                if current_price < instance.entry_price:
                    if instance.stuck_since is None:
                        instance.stuck_since = datetime.now()
                        instance.status = ScalperStatus.STUCK
                        logger.info(f"‚ö†Ô∏è –°–∫–∞–ª—å–ø–µ—Ä {instance.id} –∑–∞—Å—Ç—Ä—è–ª @ ${current_price:.2f} < ${instance.entry_price:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é)
                profit = (current_price - instance.entry_price) * instance.current_quantity
                if profit >= instance.profit_target:
                    logger.info(f"üí∞ –°–∫–∞–ª—å–ø–µ—Ä {instance.id} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏ ${profit:.3f} (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)")
                    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —ç—Ç–æ –ª–æ–∂–Ω–æ–µ "–∑–∞–∫—Ä—ã—Ç–∏–µ"
            
            elif instance.status == ScalperStatus.STUCK:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–∏ —Ü–µ–Ω–∞ –∫ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞
                if current_price >= instance.entry_price:
                    instance.status = ScalperStatus.ACTIVE
                    instance.stuck_since = None
                    logger.info(f"‚úÖ –°–∫–∞–ª—å–ø–µ—Ä {instance.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω @ ${current_price:.2f}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = f"‚úÖ <b>–°–∫–∞–ª—å–ø–µ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n" \
                             f"–°–∏–º–≤–æ–ª: {instance.symbol}\n" \
                             f"–¶–µ–Ω–∞: ${current_price:.2f}\n" \
                             f"ID: {instance.id}"
                    self.send_telegram_message(message)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–ª—å–ø–µ—Ä–∞ {instance.id}: {e}")
    
    def should_create_new_scalper(self, symbol: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫–∞–ª—å–ø–µ—Ä"""
        try:
            active_scalpers = self.get_active_scalpers(symbol)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º
            if not active_scalpers:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã
            stuck_scalpers = [s for s in active_scalpers if s.status == ScalperStatus.STUCK]
            
            for stuck_scalper in stuck_scalpers:
                if stuck_scalper.stuck_since:
                    stuck_duration = (datetime.now() - stuck_scalper.stuck_since).total_seconds()
                    if stuck_duration >= self.min_stuck_time:
                        hours_stuck = stuck_duration / 3600
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫–∞–ª—å–ø–µ—Ä, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ 24+ —á–∞—Å–∞
                        if stuck_scalper.id.startswith(f"{symbol}_existing_"):
                            logger.info(f"‚è∞ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–∞–ª—å–ø–µ—Ä {stuck_scalper.id} –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ {hours_stuck:.1f} —á–∞—Å–æ–≤ (24+ —á–∞—Å–æ–≤), –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô")
                            return True
                        else:
                            logger.info(f"‚è∞ –°–∫–∞–ª—å–ø–µ—Ä {stuck_scalper.id} –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ {hours_stuck:.1f} —á–∞—Å–æ–≤ (24+ —á–∞—Å–æ–≤), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                            return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")
            return False
    
    def cleanup_closed_scalpers(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º BTC —Å–∫–∞–ª—å–ø–µ—Ä—ã
            self.btc_scalpers = [s for s in self.btc_scalpers 
                               if s.status not in [ScalperStatus.PROFIT, ScalperStatus.LOSS]]
            
            # –û—á–∏—â–∞–µ–º ETH —Å–∫–∞–ª—å–ø–µ—Ä—ã
            self.eth_scalpers = [s for s in self.eth_scalpers 
                               if s.status not in [ScalperStatus.PROFIT, ScalperStatus.LOSS]]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤: {e}")
    
    def get_manager_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            btc_active = len([s for s in self.btc_scalpers if s.status == ScalperStatus.ACTIVE])
            btc_stuck = len([s for s in self.btc_scalpers if s.status == ScalperStatus.STUCK])
            eth_active = len([s for s in self.eth_scalpers if s.status == ScalperStatus.ACTIVE])
            eth_stuck = len([s for s in self.eth_scalpers if s.status == ScalperStatus.STUCK])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã
            btc_existing = len([s for s in self.btc_scalpers if s.id.startswith('BTCUSDC_existing_')])
            eth_existing = len([s for s in self.eth_scalpers if s.id.startswith('ETHUSDC_existing_')])
            
            return {
                'btc_active': btc_active,
                'btc_stuck': btc_stuck,
                'eth_active': eth_active,
                'eth_stuck': eth_stuck,
                'btc_existing': btc_existing,
                'eth_existing': eth_existing,
                'total_created': self.total_instances_created,
                'total_profit': self.total_profit,
                'usdc_balance': self.get_usdc_balance()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return {}
    
    def get_existing_scalpers_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞–ª—å–ø–µ—Ä–∞—Ö"""
        try:
            existing_info = {
                'btc_existing': [],
                'eth_existing': []
            }
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö BTC —Å–∫–∞–ª—å–ø–µ—Ä–∞—Ö
            for scalper in self.btc_scalpers:
                if scalper.id.startswith('BTCUSDC_existing_'):
                    info = {
                        'id': scalper.id,
                        'entry_price': scalper.entry_price,
                        'entry_time': scalper.entry_time.isoformat(),
                        'position_size': scalper.position_size,
                        'current_quantity': scalper.current_quantity,
                        'status': scalper.status.value,
                        'stuck_since': scalper.stuck_since.isoformat() if scalper.stuck_since else None
                    }
                    existing_info['btc_existing'].append(info)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö ETH —Å–∫–∞–ª—å–ø–µ—Ä–∞—Ö
            for scalper in self.eth_scalpers:
                if scalper.id.startswith('ETHUSDC_existing_'):
                    info = {
                        'id': scalper.id,
                        'entry_price': scalper.entry_price,
                        'entry_time': scalper.entry_time.isoformat(),
                        'position_size': scalper.position_size,
                        'current_quantity': scalper.current_quantity,
                        'status': scalper.status.value,
                        'stuck_since': scalper.stuck_since.isoformat() if scalper.stuck_since else None
                    }
                    existing_info['eth_existing'].append(info)
            
            return existing_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞–ª—å–ø–µ—Ä–∞—Ö: {e}")
            return {'btc_existing': [], 'eth_existing': []}
    
    def save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è enum
            def serialize_scalper(scalper):
                data = asdict(scalper)
                data['status'] = scalper.status.value  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ enum, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç
                data['entry_time'] = scalper.entry_time.isoformat()
                if scalper.stuck_since:
                    data['stuck_since'] = scalper.stuck_since.isoformat()
                return data
            
            state = {
                'btc_scalpers': [serialize_scalper(s) for s in self.btc_scalpers],
                'eth_scalpers': [serialize_scalper(s) for s in self.eth_scalpers],
                'total_instances_created': self.total_instances_created,
                'total_profit': self.total_profit,
                'saved_at': datetime.now().isoformat()
            }
            
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(state, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_state(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            if not os.path.exists(self.state_file):
                logger.info("üìÅ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                self.load_existing_scalpers()
                return
            
            with open(self.state_file, 'r', encoding='utf-8') as f:
                state = json.load(f)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º BTC —Å–∫–∞–ª—å–ø–µ—Ä—ã
            self.btc_scalpers = []
            for s_data in state.get('btc_scalpers', []):
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç—É—Å–∞ enum
                status_str = s_data['status']
                if status_str.startswith('ScalperStatus.'):
                    status_str = status_str.split('.')[1].lower()
                status = ScalperStatus(status_str)
                
                instance = ScalperInstance(
                    id=s_data['id'],
                    symbol=s_data['symbol'],
                    status=status,
                    entry_price=s_data['entry_price'],
                    entry_time=datetime.fromisoformat(s_data['entry_time']),
                    position_size=s_data['position_size'],
                    current_quantity=s_data['current_quantity'],
                    stuck_since=datetime.fromisoformat(s_data['stuck_since']) if s_data.get('stuck_since') else None,
                    profit_target=s_data.get('profit_target', 0.02),
                    max_stuck_time=s_data.get('max_stuck_time', 86400)
                )
                self.btc_scalpers.append(instance)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ETH —Å–∫–∞–ª—å–ø–µ—Ä—ã
            self.eth_scalpers = []
            for s_data in state.get('eth_scalpers', []):
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç–∞—Ç—É—Å–∞ enum
                status_str = s_data['status']
                if status_str.startswith('ScalperStatus.'):
                    status_str = status_str.split('.')[1].lower()
                status = ScalperStatus(status_str)
                
                instance = ScalperInstance(
                    id=s_data['id'],
                    symbol=s_data['symbol'],
                    status=status,
                    entry_price=s_data['entry_price'],
                    entry_time=datetime.fromisoformat(s_data['entry_time']),
                    position_size=s_data['position_size'],
                    current_quantity=s_data['current_quantity'],
                    stuck_since=datetime.fromisoformat(s_data['stuck_since']) if s_data.get('stuck_since') else None,
                    profit_target=s_data.get('profit_target', 0.02),
                    max_stuck_time=s_data.get('max_stuck_time', 86400)
                )
                self.eth_scalpers.append(instance)
            
            self.total_instances_created = state.get('total_instances_created', 0)
            self.total_profit = state.get('total_profit', 0.0)
            
            logger.info(f"üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            logger.info(f"üìä BTC: {len(self.btc_scalpers)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, ETH: {len(self.eth_scalpers)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def load_existing_scalpers(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã –∏–∑ –∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            logger.info("üîç –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º BTC —Å–∫–∞–ª—å–ø–µ—Ä
            btc_state_file = 'btc_scalper_state.json'
            if os.path.exists(btc_state_file):
                with open(btc_state_file, 'r', encoding='utf-8') as f:
                    btc_state = json.load(f)
                
                if btc_state.get('current_position') and btc_state.get('entry_price'):
                    entry_time = datetime.fromtimestamp(btc_state.get('entry_time', time.time()))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Å—Ç—Ä—è–ª –ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
                    current_time = datetime.now()
                    age_hours = (current_time - entry_time).total_seconds() / 3600
                    is_stuck = age_hours >= 24  # –ï—Å–ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, —Å—á–∏—Ç–∞–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–º
                    
                    instance = ScalperInstance(
                        id=f"BTCUSDC_existing_{int(entry_time.timestamp())}",
                        symbol='BTCUSDC',
                        status=ScalperStatus.STUCK if is_stuck else ScalperStatus.ACTIVE,
                        entry_price=btc_state['entry_price'],
                        entry_time=entry_time,
                        position_size=btc_state.get('position_quantity', 0) * btc_state['entry_price'],
                        current_quantity=btc_state.get('position_quantity', 0),
                        stuck_since=entry_time if is_stuck else None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
                    )
                    self.btc_scalpers.append(instance)
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π BTC —Å–∫–∞–ª—å–ø–µ—Ä: {instance.id} @ ${instance.entry_price:.2f} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á, {'–∑–∞—Å—Ç—Ä—è–ª' if is_stuck else '–∞–∫—Ç–∏–≤–µ–Ω'})")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ETH —Å–∫–∞–ª—å–ø–µ—Ä
            eth_state_file = 'eth_scalper_state.json'
            if os.path.exists(eth_state_file):
                with open(eth_state_file, 'r', encoding='utf-8') as f:
                    eth_state = json.load(f)
                
                if eth_state.get('current_position') and eth_state.get('entry_price'):
                    entry_time = datetime.fromtimestamp(eth_state.get('entry_time', time.time()))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Å—Ç—Ä—è–ª –ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤)
                    current_time = datetime.now()
                    age_hours = (current_time - entry_time).total_seconds() / 3600
                    is_stuck = age_hours >= 24  # –ï—Å–ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, —Å—á–∏—Ç–∞–µ–º –∑–∞—Å—Ç—Ä—è–≤—à–∏–º
                    
                    instance = ScalperInstance(
                        id=f"ETHUSDC_existing_{int(entry_time.timestamp())}",
                        symbol='ETHUSDC',
                        status=ScalperStatus.STUCK if is_stuck else ScalperStatus.ACTIVE,
                        entry_price=eth_state['entry_price'],
                        entry_time=entry_time,
                        position_size=eth_state.get('position_quantity', 0) * eth_state['entry_price'],
                        current_quantity=eth_state.get('position_quantity', 0),
                        stuck_since=entry_time if is_stuck else None  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
                    )
                    self.eth_scalpers.append(instance)
                    logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ETH —Å–∫–∞–ª—å–ø–µ—Ä: {instance.id} @ ${instance.entry_price:.2f} (–≤–æ–∑—Ä–∞—Å—Ç: {age_hours:.1f}—á, {'–∑–∞—Å—Ç—Ä—è–ª' if is_stuck else '–∞–∫—Ç–∏–≤–µ–Ω'})")
            
            total_existing = len(self.btc_scalpers) + len(self.eth_scalpers)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_existing} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∫–∞–ª—å–ø–µ—Ä–∞—Ö
            if total_existing > 0:
                message = f"üìÇ <b>–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã</b>\n" \
                         f"BTC: {len(self.btc_scalpers)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤\n" \
                         f"ETH: {len(self.eth_scalpers)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤\n" \
                         f"–ú–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                self.send_telegram_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤: {e}")
    
    def check_existing_scalper_status(self, symbol: str, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ"""
        try:
            scalpers = self.btc_scalpers if symbol == 'BTCUSDC' else self.eth_scalpers
            
            for scalper in scalpers:
                if scalper.id.startswith(f"{symbol}_existing_"):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞
                    self.update_scalper_status(scalper, current_price)
                    
                    # –ï—Å–ª–∏ —Å–∫–∞–ª—å–ø–µ—Ä –∑–∞—Å—Ç—Ä—è–ª, –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ
                    if scalper.status == ScalperStatus.STUCK:
                        if scalper.stuck_since:
                            stuck_duration = (datetime.now() - scalper.stuck_since).total_seconds()
                            hours_stuck = stuck_duration / 3600
                            logger.info(f"‚ö†Ô∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–∞–ª—å–ø–µ—Ä {scalper.id} –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ {hours_stuck:.1f} —á–∞—Å–æ–≤ @ ${current_price:.2f} < ${scalper.entry_price:.2f}")
                    
                    return True  # –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–∞–ª—å–ø–µ—Ä
            
            return False  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫–∞–ª—å–ø–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")
            return False
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            message = f"üöÄ <b>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω</b>\n" \
                     f"–ó–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: ${self.min_usdc_balance_after_scalper:.2f} USDC\n" \
                     f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${self.position_size_usdc:.2f} USDC\n" \
                     f"–ú–∞–∫—Å–∏–º—É–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {self.max_instances_per_symbol} –Ω–∞ —Å–∏–º–≤–æ–ª"
            self.send_telegram_message(message)
            
            while self.is_running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
                    btc_price = self.get_current_price('BTCUSDC')
                    eth_price = self.get_current_price('ETHUSDC')
                    
                    if btc_price > 0 and eth_price > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã
                        btc_has_existing = self.check_existing_scalper_status('BTCUSDC', btc_price)
                        eth_has_existing = self.check_existing_scalper_status('ETHUSDC', eth_price)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
                        for scalper in self.btc_scalpers + self.eth_scalpers:
                            current_price = btc_price if scalper.symbol == 'BTCUSDC' else eth_price
                            self.update_scalper_status(scalper, current_price)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—Å—Ç—Ä—è–ª–∏ –Ω–∞ 24+ —á–∞—Å–∞
                        if self.should_create_new_scalper('BTCUSDC'):
                            self.create_scalper_instance('BTCUSDC', btc_price)
                        
                        if self.should_create_new_scalper('ETHUSDC'):
                            self.create_scalper_instance('ETHUSDC', eth_price)
                        
                        # –û—á–∏—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–∞–ª—å–ø–µ—Ä—ã
                        self.cleanup_closed_scalpers()
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                        if int(time.time()) % 300 < self.scan_interval:
                            self.save_state()
                    
                    # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    await asyncio.sleep(self.scan_interval)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
                    await asyncio.sleep(self.scan_interval)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        finally:
            self.is_running = False
            logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.is_running = False
        self.save_state()
        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ USDC –¥–ª—è —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤
def get_scalper_protected_balance() -> float:
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å USDC –¥–ª—è —Å–∫–∞–ª—å–ø–µ—Ä–æ–≤"""
    try:
        manager = ScalperManager()
        current_usdc = manager.get_usdc_balance()
        protected_balance = current_usdc - manager.min_usdc_balance_after_scalper
        return max(0.0, protected_balance)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0.0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–∞
def can_create_scalper(symbol: str) -> Tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–∫–∞–ª—å–ø–µ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    try:
        manager = ScalperManager()
        return manager.can_create_new_scalper(symbol)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∞–ª—å–ø–µ—Ä–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}"
