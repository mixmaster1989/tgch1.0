#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ BTC/ETH
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è USDC –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç BTC –∏ ETH
–ó–ê–©–ò–¢–ê: –ù–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDC –º–µ–Ω—å—à–µ $10!
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from decimal import Decimal

from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
from anti_hype_filter import AntiHypeFilter
from rebalancer_anti_hype_filter import RebalancerAntiHypeFilter
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BalanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ BTC/ETH –∑–∞ USDC"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.anti_hype_filter = AntiHypeFilter()
        self.rebalancer_filter = RebalancerAntiHypeFilter()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –ü–ï–†–ï–í–û–î –ù–ê USDC!
        self.min_balance_threshold = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ($10 USDC)
        self.max_purchase_amount = 100.0   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ ($100 USDC)
        self.balance_check_interval = 60   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
        
        # –ó–ê–©–ò–¢–ê –ë–ê–õ–ê–ù–°–ê USDC - –ö–†–ò–¢–ò–ß–ù–û!
        self.min_usdc_balance_after_purchase = 2.0  # –ú–∏–Ω–∏–º—É–º $2 USDC –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è BTC/ETH
        self.btc_allocation = 0.6  # 60% –Ω–∞ BTC
        self.eth_allocation = 0.4  # 40% –Ω–∞ ETH
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–∫—É–ø–æ–∫
        self.last_purchase_time = None
        self.min_purchase_interval = 300  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—É–º–º–∞—Ö
        self.last_insufficient_amount_time = None
        self.insufficient_amount_interval = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—É–º–º–∞—Ö
        
        # –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.balance_history = []
        self.max_history_size = 10
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_purchases = 0
        self.total_spent = 0.0
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ—Ç—á–µ—Ç–æ–≤ (—É–º–µ–Ω—å—à–∞–µ–º —Å–ø–∞–º –≤ 2 —Ä–∞–∑–∞)
        self.report_counter = 0
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT (–¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USDC)"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            
            return 0.0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0
    
    def ensure_usdc_for_trade(self, required_usdc: float) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –µ—Å—Ç—å USDC –¥–ª—è —Å–¥–µ–ª–∫–∏; –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∫—É–ø–∏—Ç—å –∑–∞ USDT"""
        try:
            buffer = 0.02  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏
            need = required_usdc + buffer
            usdc_free = self.get_usdc_balance()
            
            if usdc_free >= need:
                return True

            # –ü–æ–∫—É–ø–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ USDC –∑–∞ USDT
            shortfall = max(0.0, need - usdc_free)
            usdt_free = self.get_usdt_balance()
            
            if usdt_free < shortfall:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC: –Ω—É–∂–Ω–æ ${shortfall:.2f}, –µ—Å—Ç—å ${usdt_free:.2f}")
                return False

            qty = round(shortfall, 2)
            if qty < 1.0:
                qty = 1.0  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—É–º–Ω—ã–π —à–∞–≥

            # –ü–æ–∫—É–ø–∞–µ–º USDC –∑–∞ USDT —á–µ—Ä–µ–∑ —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol='USDCUSDT', 
                side='BUY', 
                quantity=qty
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT: ${qty:.2f}")
                try:
                    self.send_telegram_message(f"üí± –ö—É–ø–ª–µ–Ω USDC –∑–∞ USDT –Ω–∞ ${qty:.2f} –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫")
                except Exception:
                    pass
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å USDC: {order}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ensure_usdc_for_trade: {e}")
            return False
    
    def get_current_price(self, symbol: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å–∏–º–≤–æ–ª–∞"""
        try:
            ticker = self.mex_api.get_ticker_price(symbol)
            if 'price' in ticker:
                return float(ticker['price'])
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã {symbol}: {e}")
            return None
    
    def get_current_portfolio_allocation(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è BTC/ETH"""
        try:
            account_info = self.mex_api.get_account_info()
            btc_balance = 0.0
            eth_balance = 0.0
            
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                if asset == 'BTC':
                    btc_balance = float(balance['free']) + float(balance['locked'])
                elif asset == 'ETH':
                    eth_balance = float(balance['free']) + float(balance['locked'])
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
            btc_price = self.get_current_price('BTCUSDC')
            eth_price = self.get_current_price('ETHUSDC')
            
            if btc_price and eth_price:
                btc_value = btc_balance * btc_price
                eth_value = eth_balance * eth_price
                total_crypto = btc_value + eth_value
                
                if total_crypto > 0:
                    return {
                        'btc_value': btc_value,
                        'eth_value': eth_value,
                        'total_crypto': total_crypto,
                        'btc_percent': (btc_value / total_crypto) * 100,
                        'eth_percent': (eth_value / total_crypto) * 100
                    }
            
            return {'btc_percent': 0, 'eth_percent': 0}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return {'btc_percent': 0, 'eth_percent': 0}
    
    def needs_rebalancing(self, allocation: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞"""
        btc_percent = allocation.get('btc_percent', 0)
        eth_percent = allocation.get('eth_percent', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 60/40
        btc_deviation = abs(btc_percent - 60)
        eth_deviation = abs(eth_percent - 40)
        
        # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10% - –Ω—É–∂–Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
        return btc_deviation > 10 or eth_deviation > 10
    
    def calculate_purchase_amounts(self, available_usdc: float, currency: str = 'USDC') -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC –∏ ETH —Å —É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É, –Ω–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
            purchase_amount = self.calculate_safe_purchase_amount(available_usdc)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª—é—Ç—ã
            btc_symbol = f'BTC{currency}'
            eth_symbol = f'ETH{currency}'
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            btc_price = self.get_current_price(btc_symbol)
            eth_price = self.get_current_price(eth_symbol)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            current_allocation = self.get_current_portfolio_allocation()
            needs_rebalancing = self.needs_rebalancing(current_allocation)
            
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BTC {current_allocation.get('btc_percent', 0):.1f}%, ETH {current_allocation.get('eth_percent', 0):.1f}%")
            logger.info(f"üîÑ –ù—É–∂–Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {needs_rebalancing}")
            
            if not btc_price or not eth_price:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã BTC/ETH –≤ {currency} –ø–∞—Ä–∞—Ö")
                return {}
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            min_btc_amount = 0.0001 * btc_price  # –ú–∏–Ω–∏–º—É–º –¥–ª—è BTC
            min_eth_amount = 0.001 * eth_price   # –ú–∏–Ω–∏–º—É–º –¥–ª—è ETH
            
            logger.info(f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: ${purchase_amount:.2f}")
            logger.info(f"üìä –ú–∏–Ω–∏–º—É–º—ã: BTC ${min_btc_amount:.2f}, ETH ${min_eth_amount:.2f}")
            
            result = {}
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ - –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∞–∫—Ç–∏–≤
            if needs_rebalancing:
                btc_percent = current_allocation.get('btc_percent', 0)
                eth_percent = current_allocation.get('eth_percent', 0)
                
                if btc_percent > 60:  # BTC —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                    logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê: BTC —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ({btc_percent:.1f}%), –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ ETH")
                    if purchase_amount >= min_eth_amount:
                        btc_amount = 0
                        eth_amount = purchase_amount
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ETH: ${purchase_amount:.2f} < ${min_eth_amount:.2f}")
                        return {}
                elif eth_percent > 40:  # ETH —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                    logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê: ETH —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ({eth_percent:.1f}%), –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ BTC")
                    if purchase_amount >= min_btc_amount:
                        btc_amount = purchase_amount
                        eth_amount = 0
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è BTC: ${purchase_amount:.2f} < ${min_btc_amount:.2f}")
                        return {}
                else:
                    # –ï—Å–ª–∏ –æ–±–∞ –∞–∫—Ç–∏–≤–∞ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã - –ø–æ–∫—É–ø–∞–µ–º –æ–±–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                    logger.info(f"üîÑ –†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê: –û–±–∞ –∞–∫—Ç–∏–≤–∞ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã, –ø–æ–∫—É–ø–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
                    if purchase_amount >= (min_btc_amount + min_eth_amount):
                        btc_amount = purchase_amount * self.btc_allocation
                        eth_amount = purchase_amount * self.eth_allocation
                    elif purchase_amount >= min_btc_amount:
                        # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ BTC
                        btc_amount = purchase_amount
                        eth_amount = 0
                        logger.info("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ETH –ø—Ä–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ, –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ BTC")
                    elif purchase_amount >= min_eth_amount:
                        # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ ETH
                        btc_amount = 0
                        eth_amount = purchase_amount
                        logger.info("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è BTC –ø—Ä–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ, –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ ETH")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–µ: ${purchase_amount:.2f}")
                        return {}
            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–±–µ–∏—Ö –≤–∞–ª—é—Ç –∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
            elif purchase_amount >= (min_btc_amount + min_eth_amount):
                # –û–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                btc_amount = purchase_amount * self.btc_allocation
                eth_amount = purchase_amount * self.eth_allocation
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ —Å—É–º–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
                if btc_amount < min_btc_amount:
                    excess = min_btc_amount - btc_amount
                    btc_amount = min_btc_amount
                    eth_amount = max(eth_amount - excess, min_eth_amount)
                
                if eth_amount < min_eth_amount:
                    excess = min_eth_amount - eth_amount
                    eth_amount = min_eth_amount
                    btc_amount = max(btc_amount - excess, min_btc_amount)
                
            # –ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤
            elif purchase_amount >= min_btc_amount:
                # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ BTC
                btc_amount = purchase_amount
                eth_amount = 0
                logger.info("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è ETH, –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ BTC")
                
            elif purchase_amount >= min_eth_amount:
                # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ ETH
                btc_amount = 0
                eth_amount = purchase_amount
                logger.info("üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è BTC, –ø–æ–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ ETH")
                
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${purchase_amount:.2f}")
                return {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º BTC —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º
            if btc_amount >= min_btc_amount:
                # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                if needs_rebalancing:
                    btc_filter = self.rebalancer_filter.check_buy_permission(btc_symbol)
                    filter_type = "–†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–û–ß–ù–´–ô"
                else:
                    btc_filter = self.anti_hype_filter.check_buy_permission(btc_symbol)
                    filter_type = "–û–ë–´–ß–ù–´–ô"
                
                if not btc_filter['allowed']:
                    logger.warning(f"üö´ BTC –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {btc_filter['reason']}")
                else:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞
                    btc_amount *= btc_filter['multiplier']
                    
                    btc_quantity = btc_amount / btc_price
                    btc_quantity = round(btc_quantity, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
                    actual_btc_amount = btc_quantity * btc_price
                    
                    result[btc_symbol] = {
                        'amount': actual_btc_amount,
                        'quantity': btc_quantity,
                        'price': btc_price,
                        'currency': currency,
                        'filter_reason': btc_filter['reason'],
                        'filter_multiplier': btc_filter['multiplier']
                    }
                    
                    multiplier_text = f" (√ó{btc_filter['multiplier']})" if btc_filter['multiplier'] != 1.0 else ""
                    logger.info(f"‚úÖ BTC –æ—Ä–¥–µ—Ä [{filter_type}]{multiplier_text}: {btc_quantity:.6f} BTC –Ω–∞ ${actual_btc_amount:.2f} {currency} [{btc_filter['reason']}]")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ETH —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º
            if eth_amount >= min_eth_amount:
                # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
                if needs_rebalancing:
                    eth_filter = self.rebalancer_filter.check_buy_permission(eth_symbol)
                    filter_type = "–†–ï–ë–ê–õ–ê–ù–°–ò–†–û–í–û–ß–ù–´–ô"
                else:
                    eth_filter = self.anti_hype_filter.check_buy_permission(eth_symbol)
                    filter_type = "–û–ë–´–ß–ù–´–ô"
                
                if not eth_filter['allowed']:
                    logger.warning(f"üö´ ETH –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {eth_filter['reason']}")
                else:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞
                    eth_amount *= eth_filter['multiplier']
                    
                    eth_quantity = eth_amount / eth_price
                    eth_quantity = round(eth_quantity, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
                    actual_eth_amount = eth_quantity * eth_price
                    
                    result[eth_symbol] = {
                        'amount': actual_eth_amount,
                        'quantity': eth_quantity,
                        'price': eth_price,
                        'currency': currency,
                        'filter_reason': eth_filter['reason'],
                        'filter_multiplier': eth_filter['multiplier']
                    }
                    
                    multiplier_text = f" (√ó{eth_filter['multiplier']})" if eth_filter['multiplier'] != 1.0 else ""
                    logger.info(f"‚úÖ ETH –æ—Ä–¥–µ—Ä [{filter_type}]{multiplier_text}: {eth_quantity:.6f} ETH –Ω–∞ ${actual_eth_amount:.2f} {currency} [{eth_filter['reason']}]")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º –ø–æ–∫—É–ø–∫–∏: {e}")
            return {}
    
    def can_make_purchase(self, purchase_amount: float) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É
        –ó–ê–©–ò–¢–ê: –ù–µ–ª—å–∑—è –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ USDC –º–µ–Ω—å—à–µ $10!
        """
        try:
            current_usdc = self.get_usdc_balance()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC (–º–∏–Ω–∏–º—É–º $10)
            remaining_after_purchase = current_usdc - purchase_amount
            if remaining_after_purchase < self.min_usdc_balance_after_purchase - 0.01:  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                return False, f"–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è ${remaining_after_purchase:.2f} USDC, —á—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ ${self.min_usdc_balance_after_purchase:.2f}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
            if (self.last_purchase_time and 
                time.time() - self.last_purchase_time < self.min_purchase_interval):
                remaining_cooldown = self.min_purchase_interval - (time.time() - self.last_purchase_time)
                return False, f"–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏: –æ—Å—Ç–∞–ª–æ—Å—å {remaining_cooldown:.0f} —Å–µ–∫"
            
            return True, "OK"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}"
    
    def calculate_safe_purchase_amount(self, available_usdc: float) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º $10 USDC
        """
        try:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å
            max_safe_amount = available_usdc - self.min_usdc_balance_after_purchase
            
            if max_safe_amount <= 0:
                return 0.0
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –ø–æ–∫—É–ø–∫–∏
            safe_amount = min(max_safe_amount, self.max_purchase_amount)
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return round(safe_amount, 2)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏: {e}")
            return 0.0
    
    def get_orderbook_data(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        try:
            orderbook = self.mex_api.get_depth(symbol, limit=20)
            
            if 'bids' in orderbook and 'asks' in orderbook:
                bids = orderbook['bids'][:10]  # –¢–æ–ø-10 –ø–æ–∫—É–ø–æ–∫
                asks = orderbook['asks'][:10]  # –¢–æ–ø-10 –ø—Ä–æ–¥–∞–∂
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ª—É—á—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π
                best_bid = float(bids[0][0]) if bids else 0
                best_ask = float(asks[0][0]) if asks else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ø—Ä–µ–¥
                spread = best_ask - best_bid
                spread_percent = (spread / best_bid) * 100 if best_bid > 0 else 0
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
                bid_volume = sum(float(bid[1]) for bid in bids)
                ask_volume = sum(float(ask[1]) for ask in asks)
                
                return {
                    'bids': bids,
                    'asks': asks,
                    'best_bid': best_bid,
                    'best_ask': best_ask,
                    'spread': spread,
                    'spread_percent': spread_percent,
                    'bid_volume': bid_volume,
                    'ask_volume': ask_volume,
                    'volume_ratio': bid_volume / ask_volume if ask_volume > 0 else 1.0
                }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ {symbol}: {e}")
            return None
    
    def calculate_limit_price(self, symbol: str, side: str = 'BUY') -> Optional[float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞"""
        try:
            orderbook = self.get_orderbook_data(symbol)
            
            if not orderbook:
                return None
            
            best_bid = orderbook['best_bid']
            best_ask = orderbook['best_ask']
            spread_percent = orderbook['spread_percent']
            
            if side == 'BUY':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –Ω–∏–∂–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
                if spread_percent < 0.1:  # –°–ø—Ä–µ–¥ –º–µ–Ω—å—à–µ 0.1%
                    # –°—Ç–∞–≤–∏–º –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏ (–±—É–¥–µ–º –º–µ–π–∫–µ—Ä–æ–º)
                    return best_ask
                else:
                    # –°–ø—Ä–µ–¥ –±–æ–ª—å—à–æ–π - —Å—Ç–∞–≤–∏–º –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ
                    return best_ask * 0.9995  # –ù–∞ 0.05% –Ω–∏–∂–µ
            else:
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ - —Å—Ç–∞–≤–∏–º —á—É—Ç—å –≤—ã—à–µ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
                if spread_percent < 0.1:
                    return best_bid
                else:
                    return best_bid * 1.0005  # –ù–∞ 0.05% –≤—ã—à–µ
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω—ã {symbol}: {e}")
            return None
    
    def place_limit_order(self, symbol: str, quantity: float) -> Dict:
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞–∫–∞–Ω–∞ –∏ —Ä–µ—Ç—Ä–∞—è–º–∏"""
        max_retries = 3
        retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã
        
        for attempt in range(max_retries):
            try:
                logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {symbol} {quantity} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                limit_price = self.calculate_limit_price(symbol, 'BUY')
                
                if not limit_price:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É'}
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                orderbook = self.get_orderbook_data(symbol)
                
                logger.info(f"–°—Ç–∞–∫–∞–Ω {symbol}:")
                logger.info(f"  –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook['best_bid']:.4f}")
                logger.info(f"  –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook['best_ask']:.4f}")
                logger.info(f"  –°–ø—Ä–µ–¥: {orderbook['spread_percent']:.4f}%")
                logger.info(f"  –ù–∞—à–∞ —Ü–µ–Ω–∞: ${limit_price:.4f}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ–º –ª–∏ –º–µ–π–∫–µ—Ä–æ–º
                is_maker = limit_price < orderbook['best_ask']
                maker_status = "–ú–ï–ô–ö–ï–†" if is_maker else "–¢–ï–ô–ö–ï–†"
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {maker_status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–º–≤–æ–ª–∞
                if symbol == 'ETHUSDC' and quantity < 0.001:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH {quantity} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.001, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º")
                    quantity = 0.001
                elif symbol == 'BTCUSDC' and quantity < 0.0001:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {quantity} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.0001, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º")
                    quantity = 0.0001
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
                required_amount = quantity * limit_price
                current_balance = self.get_usdc_balance()
                
                # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if required_amount > current_balance:
                    logger.warning(f"‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: –Ω—É–∂–Ω–æ ${required_amount:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${current_balance:.2f}")
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º (0.5%)
                    safe_balance = current_balance * 0.995
                    corrected_quantity = safe_balance / limit_price
                    
                    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                    if symbol == 'ETHUSDC':
                        corrected_quantity = round(corrected_quantity, 6)
                        if corrected_quantity < 0.001:
                            logger.error(f"üö® –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH {corrected_quantity:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.001")
                            return {'success': False, 'error': f'Insufficient balance after correction: ${current_balance:.2f} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞ ETH'}
                    elif symbol == 'BTCUSDC':
                        corrected_quantity = round(corrected_quantity, 6)
                        if corrected_quantity < 0.0001:
                            logger.error(f"üö® –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC {corrected_quantity:.6f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ 0.0001")
                            return {'success': False, 'error': f'Insufficient balance after correction: ${current_balance:.2f} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞ BTC'}
                    
                    quantity = corrected_quantity
                    required_amount = quantity * limit_price
                    logger.info(f"‚úÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity:.6f}, —Å—É–º–º–∞=${required_amount:.2f}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç–æ–≤ (0.1%)
                if required_amount > current_balance * 0.999:
                    logger.error(f"üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –æ—Ä–¥–µ—Ä–∞: –Ω—É–∂–Ω–æ ${required_amount:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${current_balance:.2f}")
                    return {'success': False, 'error': f'Insufficient balance: –Ω—É–∂–Ω–æ ${required_amount:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${current_balance:.2f}'}
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
                order = self.mex_api.place_order(
                    symbol=symbol,
                    side='BUY',
                    quantity=quantity,
                    price=limit_price
                )
                
                if order and 'orderId' in order:
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
                    return {
                        'success': True,
                        'order_id': order['orderId'],
                        'symbol': symbol,
                        'quantity': quantity,
                        'order': order
                    }
                else:
                    error_msg = f"API –æ—à–∏–±–∫–∞: {order}"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {error_msg}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                    if 'Insufficient position' in str(order):
                        logger.error(f"üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è {symbol}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å!")
                        return {'success': False, 'error': 'Insufficient position - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'}
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    if attempt == max_retries - 1:
                        return {'success': False, 'error': error_msg}
                    
                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    time.sleep(retry_delay)
                    
            except Exception as e:
                error_msg = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {symbol} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {error_msg}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                if attempt == max_retries - 1:
                    return {'success': False, 'error': error_msg}
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(retry_delay)
        
        return {'success': False, 'error': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫'}
    
    async def execute_auto_purchase(self, available_usdc: float, currency: str = 'USDC') -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–æ–∫—É–ø–∫—É BTC/ETH"""
        try:
            logger.info(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ ${available_usdc:.2f} {currency}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
            purchase_plan = self.calculate_purchase_amounts(available_usdc, currency)
            
            if not purchase_plan:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å—É–º–º—ã ${available_usdc:.2f} {currency}")
                logger.warning("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                logger.warning("   - –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤")
                logger.warning("   - BTC —Ç—Ä–µ–±—É–µ—Ç >= $11.70 (0.0001 BTC)")
                logger.warning("   - ETH —Ç—Ä–µ–±—É–µ—Ç >= $4.17 (0.001 ETH)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∫—É–ø–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤
                btc_symbol = f'BTC{currency}'
                eth_symbol = f'ETH{currency}'
                
                btc_price = self.get_current_price(btc_symbol)
                eth_price = self.get_current_price(eth_symbol)
                
                if btc_price and eth_price:
                    min_btc_amount = 0.0001 * btc_price
                    min_eth_amount = 0.001 * eth_price
                    
                    # –ï—Å–ª–∏ –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫—Ç–∏–≤, –¥–µ–ª–∞–µ–º —ç—Ç–æ
                    if available_usdc >= min_btc_amount:
                        logger.info(f"‚úÖ –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å BTC –Ω–∞ ${available_usdc:.2f}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –¥–ª—è BTC
                        btc_filter = self.anti_hype_filter.check_buy_permission(btc_symbol)
                        if not btc_filter['allowed']:
                            logger.warning(f"üö´ BTC –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–Ω—Ç–∏—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–æ–º: {btc_filter['reason']}")
                            return {
                                'success': False,
                                'error': f'BTC –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {btc_filter["reason"]}',
                                'reason': 'anti_hype_blocked'
                            }
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞
                        available_usdc *= btc_filter['multiplier']
                        btc_quantity = available_usdc / btc_price
                        btc_quantity = round(btc_quantity, 6)
                        
                        purchase_plan = {
                            btc_symbol: {
                                'amount': available_usdc,
                                'quantity': btc_quantity,
                                'price': btc_price,
                                'currency': currency,
                                'filter_reason': btc_filter['reason'],
                                'filter_multiplier': btc_filter['multiplier']
                            }
                        }
                    elif available_usdc >= min_eth_amount:
                        logger.info(f"‚úÖ –ú–æ–∂–µ–º –∫—É–ø–∏—Ç—å ETH –Ω–∞ ${available_usdc:.2f}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä –¥–ª—è ETH
                        eth_filter = self.anti_hype_filter.check_buy_permission(eth_symbol)
                        if not eth_filter['allowed']:
                            logger.warning(f"üö´ ETH –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∞–Ω—Ç–∏—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–æ–º: {eth_filter['reason']}")
                            return {
                                'success': False,
                                'error': f'ETH –ø–æ–∫—É–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: {eth_filter["reason"]}',
                                'reason': 'anti_hype_blocked'
                            }
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞
                        available_usdc *= eth_filter['multiplier']
                        eth_quantity = available_usdc / eth_price
                        eth_quantity = round(eth_quantity, 6)
                        
                        purchase_plan = {
                            eth_symbol: {
                                'amount': available_usdc,
                                'quantity': eth_quantity,
                                'price': eth_price,
                                'currency': currency,
                                'filter_reason': eth_filter['reason'],
                                'filter_multiplier': eth_filter['multiplier']
                            }
                        }
                    else:
                        return {
                            'success': False, 
                            'error': f'–°—É–º–º–∞ ${available_usdc:.2f} {currency} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ú–∏–Ω–∏–º—É–º: BTC ~${min_btc_amount:.2f}, ETH ~${min_eth_amount:.2f}',
                            'reason': 'insufficient_amount'
                        }
                else:
                    return {
                        'success': False, 
                        'error': f'–°—É–º–º–∞ ${available_usdc:.2f} {currency} —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞. –ú–∏–Ω–∏–º—É–º: BTC ~$11.70, ETH ~$4.17',
                        'reason': 'insufficient_amount'
                    }
            
            results = {
                'success': True,
                'timestamp': datetime.now(),
                'available_usdc': available_usdc,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'currency': currency,
                'purchases': [],
                'total_spent': 0.0
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫–∏
            for symbol, purchase_data in purchase_plan.items():
                logger.info(f"–ü–æ–∫—É–ø–∫–∞ {symbol}: ${purchase_data['amount']:.2f} {purchase_data['currency']}")
                
                # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
                order_result = self.place_limit_order(
                    symbol=symbol,
                    quantity=purchase_data['quantity']
                )
                
                if order_result['success']:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    orderbook = self.get_orderbook_data(symbol)
                    limit_price = self.calculate_limit_price(symbol, 'BUY')
                    is_maker = limit_price < orderbook['best_ask'] if orderbook else False
                    
                    results['purchases'].append({
                        'symbol': symbol,
                        'quantity': purchase_data['quantity'],
                        'usdc_amount': purchase_data['amount'],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        'amount': purchase_data['amount'],
                        'currency': purchase_data['currency'],
                        'price': purchase_data['price'],
                        'limit_price': limit_price,
                        'order_id': order_result['order_id'],
                        'is_maker': is_maker,
                        'orderbook': orderbook,
                        'filter_reason': purchase_data.get('filter_reason', 'normal'),
                        'filter_multiplier': purchase_data.get('filter_multiplier', 1.0)
                    })
                    results['total_spent'] += purchase_data['amount']
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.total_purchases += 1
                    self.total_spent += purchase_data['amount']
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {order_result['error']}")
                    results['purchases'].append({
                        'symbol': symbol,
                        'error': order_result['error']
                    })
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                await asyncio.sleep(1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
            self.last_purchase_time = time.time()
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏: {e}")
            return {'success': False, 'error': str(e)}
    
    def format_purchase_report(self, results: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—É–ø–∫–µ"""
        try:
            if not results['success']:
                error_msg = results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                reason = results.get('reason', 'unknown')
                
                if reason == 'insufficient_amount':
                    current_time = time.time()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã –Ω–µ–¥–∞–≤–Ω–æ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (self.last_insufficient_amount_time and 
                        current_time - self.last_insufficient_amount_time < self.insufficient_amount_interval):
                        return None  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    self.last_insufficient_amount_time = current_time
                    
                    return (
                        "<b>‚ö†Ô∏è –°–£–ú–ú–ê –°–õ–ò–®–ö–û–ú –ú–ê–õ–ê –î–õ–Ø –ü–û–ö–£–ü–ö–ò</b>\n\n"
                        f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {error_msg.split('$')[1].split(' ')[0]}$\n\n"
                        "<b>üìè –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:</b>\n"
                        "üü° BTC (BTCUSDC): ~$11.70 (0.0001 BTC)\n"
                        "üîµ ETH (ETHUSDC): ~$4.17 (0.001 ETH)\n\n"
                        "<b>üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>\n"
                        "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ–π —Å—É–º–º—ã\n"
                        "‚Ä¢ –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–æ–≤\n\n"
                        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                    )
                else:
                    return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {error_msg}"
            
            message = "<b>üõí –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n"
            message += "=" * 50 + "\n\n"
            
            message += f"üìÖ –í—Ä–µ–º—è: {results['timestamp'].strftime('%d.%m.%Y %H:%M:%S')}\n"
            message += f"üí∞ –î–æ—Å—Ç—É–ø–Ω–æ USDC: ${results['available_usdc']:.2f}\n"
            message += f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${results['total_spent']:.2f}\n\n"
            
            if results['purchases']:
                message += "<b>üìã –ö–£–ü–õ–ï–ù–ù–´–ï –ê–ö–¢–ò–í–´:</b>\n"
                for purchase in results['purchases']:
                    if 'error' in purchase:
                        message += f"‚ùå {purchase['symbol']}: {purchase['error']}\n"
                    else:
                        maker_emoji = "üü¢" if purchase.get('is_maker', False) else "üü°"
                        maker_status = "–ú–ï–ô–ö–ï–†" if purchase.get('is_maker', False) else "–¢–ï–ô–ö–ï–†"
                        
                        message += f"‚úÖ {purchase['symbol']}:\n"
                        message += f"   üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {purchase['quantity']:.6f}\n"
                        message += f"   üíµ –°—É–º–º–∞: ${purchase['usdc_amount']:.2f}\n"
                        message += f"   üìà –†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞: ${purchase['price']:.4f}\n"
                        message += f"   üéØ –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞: ${purchase.get('limit_price', 0):.4f}\n"
                        message += f"   {maker_emoji} –°—Ç–∞—Ç—É—Å: {maker_status}\n"
                        message += f"   üÜî –û—Ä–¥–µ—Ä: {purchase['order_id']}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä–µ
                        filter_reason = purchase.get('filter_reason', 'normal')
                        filter_multiplier = purchase.get('filter_multiplier', 1.0)
                        if filter_reason != 'normal':
                            if filter_multiplier == 2.0:
                                message += f"   üöÄ DCA —É—Å–∏–ª–µ–Ω–∏–µ: {filter_reason} ‚Üí √ó{filter_multiplier}\n"
                            elif filter_multiplier < 1.0:
                                message += f"   üõ°Ô∏è –ê–Ω—Ç–∏-—Ö–∞–π–ø: {filter_reason} ‚Üí √ó{filter_multiplier}\n"
                            else:
                                message += f"   üìä –§–∏–ª—å—Ç—Ä: {filter_reason}\n"
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞
                        if purchase.get('orderbook'):
                            ob = purchase['orderbook']
                            message += f"   üìä –°—Ç–∞–∫–∞–Ω: ${ob['best_bid']:.4f} / ${ob['best_ask']:.4f}\n"
                            message += f"   üìè –°–ø—Ä–µ–¥: {ob['spread_percent']:.4f}%\n"
                        
                        message += "\n"
            else:
                message += "‚ùå –ü–æ–∫—É–ø–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
            try:
                from account_summary import get_account_summary
                account_info = self.mex_api.get_account_info()
                total_portfolio = 0.0
                if account_info and 'balances' in account_info:
                    for balance in account_info['balances']:
                        asset = balance['asset']
                        total = float(balance.get('free', 0)) + float(balance.get('locked', 0))
                        if total > 0:
                            if asset in ['USDT', 'USDC']:
                                total_portfolio += total
                            else:
                                try:
                                    ticker = self.mex_api.get_ticker_price(f"{asset}USDT")
                                    if ticker and 'price' in ticker:
                                        total_portfolio += total * float(ticker['price'])
                                except:
                                    pass
            except:
                total_portfolio = 0.0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            message += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
            message += f"üí∞ –û–±—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å: ${total_portfolio:.2f}\n"
            message += f"üéØ –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {self.total_purchases}\n"
            message += f"üíµ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${self.total_spent:.2f}\n"
            message += f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑: {self.min_purchase_interval // 60} –º–∏–Ω\n\n"
            
            message += "=" * 50 + "\n"
            message += "<b>ü§ñ MEXCAITRADE - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø</b>"
            
            return message
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}"
    
    async def check_balance_and_purchase(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã USDT –∏ USDC
            usdt_balance = self.get_usdt_balance()
            usdc_balance = self.get_usdc_balance()
            
            logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            logger.info(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å USDC: ${usdc_balance:.2f}")
            
            # –ü–û–ö–£–ü–ê–ï–ú –¢–û–õ–¨–ö–û USDC –ü–ê–†–´ –ù–ê –†–ï–ê–õ–¨–ù–´–ï USDC! 
            # USDT –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ USDC –ø–∞—Ä—ã
            available_for_purchase = usdc_balance  # –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ USDC!
            trading_currency = 'USDC'
            
            logger.info(f"üí± –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDC –ø–∞—Ä: ${usdc_balance:.2f} USDC")
            if usdt_balance >= self.min_balance_threshold:
                logger.info(f"‚ö†Ô∏è USDT ${usdt_balance:.2f} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è USDC –ø–∞—Ä (–Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.balance_history.append({
                'balance': available_for_purchase,
                'timestamp': datetime.now()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.balance_history) > self.max_history_size:
                self.balance_history = self.balance_history[-self.max_history_size:]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –ó–ê–©–ò–¢–û–ô –ë–ê–õ–ê–ù–°–ê USDC
            if available_for_purchase >= self.min_balance_threshold:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                safe_purchase_amount = self.calculate_safe_purchase_amount(available_for_purchase)
                
                if safe_purchase_amount > 0:
                    logger.info(f"üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${safe_purchase_amount:.2f} USDC")
                    logger.info(f"üí∞ –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è: ${available_for_purchase - safe_purchase_amount:.2f} USDC")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
                    can_purchase, reason = self.can_make_purchase(safe_purchase_amount)
                    
                    if can_purchase:
                        logger.info(f"üéØ –£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—É–º–º–∞: ${safe_purchase_amount:.2f}")
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É (–í–°–ï–ì–î–ê USDC –ø–∞—Ä—ã)
                        results = await self.execute_auto_purchase(safe_purchase_amount, 'USDC')
                        
                        if results['success']:
                            self.last_purchase_time = time.time()
                            self.total_purchases += 1
                            self.total_spent += safe_purchase_amount
                            
                            logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.total_purchases} –ø–æ–∫—É–ø–æ–∫, –ø–æ—Ç—Ä–∞—á–µ–Ω–æ ${self.total_spent:.2f} USDC")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 5)
                        self.report_counter += 1
                        if self.report_counter % 2 == 0:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –æ—Ç—á–µ—Ç
                            report = self.format_purchase_report(results)
                            if report:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç—á–µ—Ç –Ω–µ None
                                self.send_telegram_message(report)
                                logger.info("üìä –û—Ç—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                        else:
                            logger.info("üìä –û—Ç—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ø–∞–º–∞)")
                        
                        return results
                    else:
                        logger.info(f"‚è≥ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞: {reason}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        if "–∫—É–ª–¥–∞—É–Ω" in reason.lower():
                            remaining_time = self.min_purchase_interval - (time.time() - self.last_purchase_time)
                            logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏: {remaining_time:.0f} —Å–µ–∫")
                        elif "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" in reason.lower():
                            logger.info(f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏")
                        else:
                            logger.info(f"‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {reason}")
                        
                        return None
                else:
                    logger.info(f"üõ°Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (–∑–∞—â–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–∞)")
                    logger.info(f"üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: ${self.min_usdc_balance_after_purchase} USDC –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
                    return None
            else:
                logger.info(f"–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª: ${available_for_purchase:.2f} < ${self.min_balance_threshold}")
                
                # –ï—Å–ª–∏ USDC –º–∞–ª–æ, –Ω–æ –µ—Å—Ç—å USDT - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
                if usdt_balance >= 5.0:
                    logger.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${usdt_balance:.2f} USDT –≤ USDC –¥–ª—è –ø–æ–∫—É–ø–æ–∫")
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫ BTC/ETH –∑–∞ USDC")
        logger.info(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_balance_threshold} USDC")
        logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount} USDC")
        logger.info(f"   –ó–ê–©–ò–¢–ê: –ú–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_purchase} USDC –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.balance_check_interval} —Å–µ–∫")
        logger.info(f"   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: BTC {self.btc_allocation*100}% / ETH {self.eth_allocation*100}%")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            "<b>ü§ñ –ú–û–ù–ò–¢–û–† –ë–ê–õ–ê–ù–°–ê USDC –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_balance_threshold} USDC\n"
            f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount} USDC\n"
            f"üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ú–∏–Ω–∏–º—É–º ${self.min_usdc_balance_after_purchase} USDC –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n"
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.balance_check_interval} —Å–µ–∫\n"
            f"üìà BTC: {self.btc_allocation*100}% | ETH: {self.eth_allocation*100}%\n\n"
            "üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω...\n"
            "üí± –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∑–∞ USDC (—Ä—ã–Ω–æ—á–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π)"
        )
        self.send_telegram_message(startup_message)
        
        while True:
            try:
                await self.check_balance_and_purchase()
                await asyncio.sleep(self.balance_check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_balance_monitor():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞"""
    monitor = BalanceMonitor()
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    balance = monitor.get_usdt_balance()
    print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏
    if balance >= monitor.min_balance_threshold:
        purchase_plan = monitor.calculate_purchase_amounts(balance)
        print(f"–ü–ª–∞–Ω –ø–æ–∫—É–ø–∫–∏: {purchase_plan}")
    else:
        print("–ë–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor = BalanceMonitor()
    asyncio.run(monitor.start_monitoring()) 