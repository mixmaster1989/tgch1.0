#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∫—É–ø–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏–∑ —Å–∫–∞–Ω–∞ —Ä—ã–Ω–∫–∞
"""

import asyncio
import time
import logging
from datetime import datetime
from trading_engine import TradingEngine
from market_analyzer import MarketAnalyzer
from mex_api import MexAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('auto_trading.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class AutoTradingCycle:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
    
    def __init__(self, simulation_mode=True):
        self.trading_engine = TradingEngine(simulation_mode=simulation_mode)
        self.market_analyzer = MarketAnalyzer()
        self.mex_api = MexAPI()
        self.cycle_interval = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        self.is_running = False
        
    def get_market_scan_report(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç —Å–∫–∞–Ω–∞ —Ä—ã–Ω–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self.market_analyzer.get_trading_recommendations()
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = self.trading_engine.get_usdt_balance()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            buy_opportunities = [r for r in recommendations if r['action'] == 'BUY']
            neutral_opportunities = [r for r in recommendations if r['action'] == 'HOLD']
            blocked_opportunities = [r for r in recommendations if r['action'] == 'SELL']
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = {
                'timestamp': datetime.now(),
                'balance_usdt': balance,
                'total_analyzed': len(recommendations),
                'buy_opportunities': len(buy_opportunities),
                'neutral_opportunities': len(neutral_opportunities),
                'blocked_opportunities': len(blocked_opportunities),
                'errors': 0,
                'best_opportunities': buy_opportunities[:4],  # –¢–æ–ø-4
                'neutral_top3': neutral_opportunities[:3],   # –¢–æ–ø-3 –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö
                'recommendations': recommendations
            }
            
            return report
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å–∫–∞–Ω–∞: {e}")
            return {
                'timestamp': datetime.now(),
                'balance_usdt': 0,
                'total_analyzed': 0,
                'buy_opportunities': 0,
                'neutral_opportunities': 0,
                'blocked_opportunities': 0,
                'errors': 1,
                'best_opportunities': [],
                'neutral_top3': [],
                'recommendations': []
            }
    
    def format_scan_report(self, report: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç —Å–∫–∞–Ω–∞ —Ä—ã–Ω–∫–∞"""
        timestamp = report['timestamp'].strftime('%d.%m.%Y %H:%M:%S')
        
        message = f"üìä –°–ö–ê–ù –†–´–ù–ö–ê #{int(time.time()) % 1000}\n"
        message += f"‚è∞ {timestamp}\n"
        message += f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${report['balance_usdt']:.2f}\n\n"
        
        message += f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        message += f"üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {report['total_analyzed']}/20\n"
        message += f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏: {report['buy_opportunities']}\n"
        message += f"‚ö†Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {report['neutral_opportunities']}\n"
        message += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {report['blocked_opportunities']}\n"
        message += f"‚ùå –û—à–∏–±–∫–∏: {report['errors']}\n\n"
        
        if report['best_opportunities']:
            message += "üéØ –õ–£–ß–®–ò–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:\n"
            for i, opp in enumerate(report['best_opportunities'], 1):
                message += f"{i}. {opp['symbol']} ${opp['price']:.4f}\n"
                message += f"   ‚≠ê –°–∫–æ—Ä: {opp['score']} | RSI: {opp.get('rsi', 50.0):.1f}\n"
                if 'reasons' in opp and opp['reasons']:
                    message += f"   üîç {', '.join(opp['reasons'])}\n"
                message += "\n"
        
        if report['neutral_top3']:
            message += "‚öñÔ∏è –ù–ï–ô–¢–†–ê–õ–¨–ù–´–ï (—Ç–æ–ø-3):\n"
            for i, opp in enumerate(report['neutral_top3'], 1):
                message += f"{i}. {opp['symbol']} (—Å–∫–æ—Ä: {opp['score']}, RSI: {opp.get('rsi', 50.0):.1f})\n"
            message += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if report['buy_opportunities'] > 0:
            message += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! –¥–æ–ª–∂–µ–Ω –¥–æ–∫—É–ø–∞—Ç—å –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º\n"
        else:
            message += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        
        return message
    
    def execute_buy_opportunities(self, report: dict) -> list:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º"""
        results = []
        
        if not report['buy_opportunities']:
            logger.info("–ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            return results
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(report['buy_opportunities'])} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª
        try:
            trading_results = self.trading_engine.run_trading_cycle()
            
            if trading_results['buy_orders']:
                logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(trading_results['buy_orders'])} –ø–æ–∫—É–ø–æ–∫")
                results.extend(trading_results['buy_orders'])
            else:
                logger.info("–ü–æ–∫—É–ø–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
        
        return results
    
    async def run_cycle(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç —Å–∫–∞–Ω–∞ —Ä—ã–Ω–∫–∞
            report = self.get_market_scan_report()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            scan_message = self.format_scan_report(report)
            logger.info("üìä –û—Ç—á–µ—Ç —Å–∫–∞–Ω–∞ —Ä—ã–Ω–∫–∞:")
            print(scan_message)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º
            if report['buy_opportunities'] > 0:
                logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º...")
                buy_results = self.execute_buy_opportunities(report)
                
                if buy_results:
                    logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(buy_results)} –ø–æ–∫—É–ø–æ–∫")
                    for result in buy_results:
                        if result['result']['success']:
                            logger.info(f"   ‚úÖ {result['symbol']}: {result['result']['quantity']} –ø–æ ${result['result']['price']:.6f}")
                        else:
                            logger.info(f"   ‚ùå {result['symbol']}: {result['result']['error']}")
                else:
                    logger.info("‚ùå –ü–æ–∫—É–ø–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
            else:
                logger.info("‚è∏Ô∏è –ù–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            
            logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
    
    async def start_auto_trading(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        
        while self.is_running:
            try:
                await self.run_cycle()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {self.cycle_interval} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                await asyncio.sleep(self.cycle_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
                self.is_running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_auto_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.is_running = False
        logger.info("üõë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –¢–û–†–ì–û–í–õ–Ø –ü–û –°–ö–ê–ù–£ –†–´–ù–ö–ê")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    auto_trader = AutoTradingCycle(simulation_mode=True)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
        asyncio.run(auto_trader.start_auto_trading())
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        auto_trader.stop_auto_trading()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()