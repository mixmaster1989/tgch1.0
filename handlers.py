from aiogram import Dispatcher, types, Router, F
from aiogram.filters import Command
from core.generator import generate_post, generate_post_with_config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
router = Router()

@router.message(Command("generate"))
async def cmd_generate(message: types.Message):
    post = generate_post_with_config()
    await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: \n{post}")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—É—Ç–∏—Ç—å —Ç–≤–æ–π –∫–∞–Ω–∞–ª. –ù–∞–ø–∏—à–∏ /generate, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ *TGE Bot* - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞—Å–∫—Ä—É—Ç–∫–∏ Telegram-–∫–∞–Ω–∞–ª–∞

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/generate_type - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

–°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
- –°–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    """
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("generate_type"))
async def cmd_generate_type(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    
    if len(args) >= 2:
        post_type = args[0].lower()
        category = args[1].lower()
        
        valid_types = ["informational", "promotional", "educational", "entertaining"]
        valid_categories = ["tech", "business", "lifestyle", "entertainment"]
        
        if post_type not in valid_types:
            await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}")
            return
            
        if category not in valid_categories:
            await message.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(valid_categories)}")
            return
            
        post = generate_post(post_type, category)
        await message.answer(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({post_type}, {category}): \n{post}")
    else:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /generate_type [—Ç–∏–ø] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]\n\n"
                           "–¢–∏–ø—ã: informational, promotional, educational, entertaining\n"
                           "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: tech, business, lifestyle, entertainment")

def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    dp.include_router(router)