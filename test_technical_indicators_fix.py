#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import asyncio
from comprehensive_data_manager import comprehensive_data_manager

async def test_technical_indicators():
    """–¢–µ—Å—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await comprehensive_data_manager.start()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ ETHUSDT
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ETHUSDT...")
        await comprehensive_data_manager.subscribe_multiple_symbols(["ETHUSDT"])
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        await asyncio.sleep(5)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("üìä –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        await comprehensive_data_manager._load_historical_data_for_symbol("ETHUSDT")
        
        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1m (–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å)
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è 1m...")
        indicators_1m = comprehensive_data_manager.get_technical_indicators("ETHUSDT", "1m")
        
        if indicators_1m:
            print("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1m –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"   RSI: {indicators_1m.rsi_14:.2f}")
            print(f"   SMA 20: {indicators_1m.sma_20:.2f}")
            print(f"   EMA 12: {indicators_1m.ema_12:.2f}")
            print(f"   MACD: {indicators_1m.macd}")
            print(f"   Bollinger: {indicators_1m.bollinger}")
            print(f"   ATR: {indicators_1m.atr_14:.2f}")
            print(f"   Volume SMA: {indicators_1m.volume_sma:.2f}")
        else:
            print("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1m –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1h
        print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è 1h...")
        indicators_1h = comprehensive_data_manager.get_technical_indicators("ETHUSDT", "1h")
        
        if indicators_1h:
            print("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1h –ø–æ–ª—É—á–µ–Ω—ã!")
            print(f"   RSI: {indicators_1h.rsi_14:.2f}")
            print(f"   SMA 20: {indicators_1h.sma_20:.2f}")
            print(f"   EMA 12: {indicators_1h.ema_12:.2f}")
            print(f"   MACD: {indicators_1h.macd}")
            print(f"   Bollinger: {indicators_1h.bollinger}")
            print(f"   ATR: {indicators_1h.atr_14:.2f}")
            print(f"   Volume SMA: {indicators_1h.volume_sma:.2f}")
        else:
            print("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è 1h –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–≤–µ—á–µ–π
            print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
            for key, klines in comprehensive_data_manager.kline_cache.items():
                print(f"   –ö–ª—é—á {key}: {len(klines)} —Å–≤–µ—á–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∫—ç—à
            multitimeframe = comprehensive_data_manager.get_multitimeframe_data("ETHUSDT")
            if multitimeframe:
                print(f"   –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∫—ç—à: {len(multitimeframe.indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                for interval, indicators in multitimeframe.indicators.items():
                    print(f"     {interval}: RSI={indicators.rsi_14:.2f}, SMA={indicators.sma_20:.2f}")
            else:
                print("   –ú—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∫—ç—à –ø—É—Å—Ç")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await comprehensive_data_manager.stop()
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_technical_indicators()) 