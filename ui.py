import sys
import os
import json
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QPushButton, QLabel, QComboBox, QLineEdit, QTextEdit, QScrollArea,
                            QFrame, QMessageBox, QToolButton, QToolTip, QSizePolicy, QDialog, QDialogButtonBox, QWizard, QWizardPage, QFileDialog)
from PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve, QPoint
from PyQt5.QtGui import QFont, QIcon, QColor, QPalette, QPixmap
from block import Block
from code_gen import generate_code, validate_code
from constants import BLOCK_TYPES
import traceback
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(filename='error.log', level=logging.ERROR, format='%(asctime)s %(levelname)s:%(message)s')

def show_error_dialog(parent, error):
    msg = QMessageBox(parent)
    msg.setIcon(QMessageBox.Critical)
    msg.setWindowTitle("–û—à–∏–±–∫–∞")
    msg.setText("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
    msg.setDetailedText(str(error))
    msg.exec_()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def excepthook(exc_type, exc_value, exc_tb):
    tb_str = ''.join(traceback.format_exception(exc_type, exc_value, exc_tb))
    logging.error(tb_str)
    app = QApplication.instance()
    if app is not None and app.activeWindow() is not None:
        show_error_dialog(app.activeWindow(), tb_str)
    else:
        print(tb_str)

sys.excepthook = excepthook

class TemplateDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–®–∞–±–ª–æ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        self.setMinimumWidth(600)
        self.setMinimumHeight(400)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
        templates = [
            {"name": "EMA 14", "type": "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (MA)", "params": {"–¢–∏–ø": "EMA", "–î–ª–∏–Ω–∞": 14, "–ò—Å—Ç–æ—á–Ω–∏–∫": "close"}},
            {"name": "RSI 14", "type": "RSI (–∏–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)", "params": {"–î–ª–∏–Ω–∞": 14}},
            {"name": "MACD —Å—Ç–∞–Ω–¥–∞—Ä—Ç", "type": "MACD (—Å—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ)", "params": {"–ë—ã—Å—Ç—Ä–∞—è –¥–ª–∏–Ω–∞": 12, "–ú–µ–¥–ª–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞": 26, "–°–∏–≥–Ω–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞": 9}},
            {"name": "Bollinger Bands 20", "type": "Bollinger Bands (–ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)", "params": {"–î–ª–∏–Ω–∞": 20, "–ú–Ω–æ–∂–∏—Ç–µ–ª—å": 2}},
            {"name": "Stochastic 14/3", "type": "Stochastic (—Å—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä)", "params": {"–î–ª–∏–Ω–∞ %K": 14, "–î–ª–∏–Ω–∞ %D": 3}},
            {"name": "ATR 14", "type": "ATR (—Å—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)", "params": {"–î–ª–∏–Ω–∞": 14}},
            {"name": "CCI 20", "type": "CCI (–∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞)", "params": {"–î–ª–∏–Ω–∞": 20}},
            {"name": "–û–±—ä—ë–º MA 20", "type": "–û–±—ä—ë–º (–∞–Ω–∞–ª–∏–∑ –æ–±—ä—ë–º–∞)", "params": {"–î–ª–∏–Ω–∞": 20}},
            {"name": "–¢—Ä–µ–Ω–¥ MA 50", "type": "–¢—Ä–µ–Ω–¥ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)", "params": {"–î–ª–∏–Ω–∞": 50}},
            {"name": "–£—Ä–æ–≤–µ–Ω—å 100", "type": "–£—Ä–æ–≤–µ–Ω—å (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏)", "params": {"–£—Ä–æ–≤–µ–Ω—å": 100}},
            {"name": "–ê–ª–µ—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ", "type": "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ (—Å–∏–≥–Ω–∞–ª—ã)", "params": {"–õ–∏–Ω–∏—è 1": "close", "–õ–∏–Ω–∏—è 2": "ma"}},
            {"name": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è Long", "type": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è (—Ç–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)", "params": {"–¢–∏–ø —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏": "long"}},
            {"name": "–†–∏—Å–∫ 2%", "type": "–†–∏—Å–∫ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏)", "params": {"–ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∏—Å–∫–∞": 2}},
            {"name": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Blue", "type": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)", "params": {"–¶–≤–µ—Ç": "blue"}}
        ]
        for template in templates:
            btn = QPushButton(template["name"])
            btn.setFont(QFont("Arial", 12))
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #2b2b2b;
                    color: white;
                    border: 1px solid #3d3d3d;
                    border-radius: 5px;
                    padding: 10px;
                    text-align: left;
                }
                QPushButton:hover {
                    background-color: #3d3d3d;
                }
            """)
            btn.clicked.connect(lambda checked, t=template: self.select_template(t))
            layout.addWidget(btn)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        self.setLayout(layout)

    def select_template(self, template):
        self.selected_template = template
        self.accept()

class BlockSelectDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞")
        self.setMinimumWidth(500)
        self.selected_type = None
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        title = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª–æ–∫–∞")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)

        # –ö–Ω–æ–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        template_btn = QPushButton("üìö –®–∞–±–ª–æ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        template_btn.setStyleSheet("background-color: #444; color: #fff; border-radius: 5px; padding: 8px; font-size: 14px;")
        template_btn.clicked.connect(self.show_templates)
        layout.addWidget(template_btn)

        # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª–æ–∫–æ–≤
        for block_type, info in BLOCK_TYPES.items():
            card = QFrame()
            card.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
            card.setStyleSheet(f"""
                QFrame {{
                    background-color: #23272e;
                    border: 2px solid #3d3d3d;
                    border-radius: 12px;
                    margin-bottom: 10px;
                }}
                QFrame:hover {{
                    border: 2px solid #4a90e2;
                    background-color: #2c313c;
                }}
            """)
            card_layout = QHBoxLayout()
            icon = QLabel(info.get("icon", "‚ùî"))
            icon.setFont(QFont("Arial", 32))
            icon.setStyleSheet("margin-right: 18px;")
            card_layout.addWidget(icon)
            text_layout = QVBoxLayout()
            name = QLabel(block_type)
            name.setFont(QFont("Arial", 16, QFont.Bold))
            name.setStyleSheet("color: #fff;")
            desc = QLabel(info.get("description", ""))
            desc.setStyleSheet("color: #aaa; font-size: 13px;")
            desc.setWordWrap(True)
            text_layout.addWidget(name)
            text_layout.addWidget(desc)
            card_layout.addLayout(text_layout)
            card_layout.addStretch()
            card.setLayout(card_layout)
            card.mousePressEvent = lambda e, t=block_type: self.select_type(t)
            layout.addWidget(card)

        self.setLayout(layout)

    def select_type(self, block_type):
        self.selected_type = block_type
        self.accept()

    def show_templates(self):
        dialog = TemplateDialog(self)
        if dialog.exec_() == QDialog.Accepted and hasattr(dialog, 'selected_template'):
            self.selected_type = dialog.selected_template["type"]
            self.selected_params = dialog.selected_template["params"]
            self.accept()

class BlockWidget(QFrame):
    def __init__(self, block, parent=None):
        super().__init__(parent)
        self.block = block
        self.setup_ui()
        
    def setup_ui(self):
        self.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
        self.setStyleSheet("""
            QFrame {
                background-color: #2b2b2b;
                border: 2px solid #3d3d3d;
                border-radius: 10px;
                padding: 10px;
                margin: 5px;
            }
            QFrame:hover {
                border: 2px solid #4a4a4a;
            }
            QLabel {
                color: #ffffff;
                font-size: 14px;
            }
            QLineEdit, QComboBox {
                background-color: #3d3d3d;
                color: #ffffff;
                border: 1px solid #4a4a4a;
                border-radius: 5px;
                padding: 5px;
                font-size: 14px;
            }
            QLineEdit:focus, QComboBox:focus {
                border: 1px solid #5a5a5a;
            }
            QToolButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-size: 14px;
            }
            QToolButton:hover {
                color: #00ff00;
            }
        """)
        
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
        header = QHBoxLayout()
        icon_label = QLabel(BLOCK_TYPES[self.block.type]["icon"])
        icon_label.setFont(QFont("Arial", 16))
        title_label = QLabel(self.block.type)
        title_label.setFont(QFont("Arial", 14, QFont.Bold))
        description_label = QLabel(BLOCK_TYPES[self.block.type]["description"])
        description_label.setWordWrap(True)
        description_label.setStyleSheet("color: #aaaaaa; font-size: 12px;")
        
        header.addWidget(icon_label)
        header.addWidget(title_label)
        header.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QToolButton()
        delete_btn.setText("‚ùå")
        delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫")
        delete_btn.clicked.connect(self.delete_block)
        header.addWidget(delete_btn)
        
        layout.addLayout(header)
        layout.addWidget(description_label)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–∞
        for param in BLOCK_TYPES[self.block.type]["params"]:
            param_layout = QVBoxLayout()
            row = QHBoxLayout()
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            name_label = QLabel(param["name"])
            name_label.setMinimumWidth(150)
            
            # –ü–æ–¥—Å–∫–∞–∑–∫–∞
            help_btn = QToolButton()
            help_btn.setText("‚ùì")
            help_btn.setToolTip(param.get("help", ""))
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            if "values" in param:
                input_widget = QComboBox()
                input_widget.addItems(param["values"])
                if param["name"] in self.block.params:
                    input_widget.setCurrentText(self.block.params[param["name"]])
                input_widget.currentTextChanged.connect(
                    lambda text, p=param["name"]: self.update_param(p, text))
            else:
                input_widget = QLineEdit()
                if param["name"] in self.block.params:
                    input_widget.setText(str(self.block.params[param["name"]]))
                input_widget.textChanged.connect(
                    lambda text, p=param["name"]: self.update_param(p, text))
                if "placeholder" in param:
                    input_widget.setPlaceholderText(param["placeholder"])
            
            row.addWidget(name_label)
            row.addWidget(help_btn)
            row.addWidget(input_widget)
            param_layout.addLayout(row)
            
            # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä
            if "description" in param:
                desc = QLabel(param["description"])
                desc.setStyleSheet("color: #aaa; font-size: 12px;")
                param_layout.addWidget(desc)
            
            if "help" in param:
                example = QLabel("–ü—Ä–∏–º–µ—Ä: " + param["help"].split("\n")[0])
                example.setStyleSheet("color: #6cf; font-size: 12px;")
                param_layout.addWidget(example)
            
            layout.addLayout(param_layout)
        
        self.setLayout(layout)
    
    def update_param(self, name, value):
        self.block.params[name] = value
    
    def delete_block(self):
        if self.parent():
            self.parent().remove_block(self)

class WizardDialog(QWizard):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        self.setMinimumWidth(600)
        self.setMinimumHeight(400)
        self.setStyleSheet("""
            QWizard {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QWizardPage {
                background-color: #1e1e1e;
                color: #ffffff;
            }
            QLabel {
                color: #ffffff;
                font-size: 14px;
            }
            QComboBox, QLineEdit {
                background-color: #3d3d3d;
                color: #ffffff;
                border: 1px solid #4a4a4a;
                border-radius: 5px;
                padding: 5px;
                font-size: 14px;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.addPage(Step1Page())
        self.addPage(Step2Page())
        self.addPage(Step3Page())

class Step1Page(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
        layout = QVBoxLayout()
        self.combo = QComboBox()
        for block_type in BLOCK_TYPES.keys():
            self.combo.addItem(block_type)
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞:"))
        layout.addWidget(self.combo)
        self.setLayout(layout)
        self.registerField("block_type", self.combo, "currentText")

class Step2Page(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        layout = QVBoxLayout()
        self.params_layout = QVBoxLayout()
        layout.addLayout(self.params_layout)
        self.setLayout(layout)

    def initializePage(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        while self.params_layout.count():
            item = self.params_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

        block_type = self.field("block_type")
        if block_type in BLOCK_TYPES:
            for param in BLOCK_TYPES[block_type]["params"]:
                row = QHBoxLayout()
                name_label = QLabel(param["name"])
                name_label.setMinimumWidth(150)
                if "values" in param:
                    input_widget = QComboBox()
                    input_widget.addItems(param["values"])
                else:
                    input_widget = QLineEdit()
                    if "placeholder" in param:
                        input_widget.setPlaceholderText(param["placeholder"])
                row.addWidget(name_label)
                row.addWidget(input_widget)
                self.params_layout.addLayout(row)
                self.registerField(f"param_{param['name']}", input_widget)

class Step3Page(QWizardPage):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTitle("–®–∞–≥ 3: –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥")
        layout = QVBoxLayout()
        self.code_area = QTextEdit()
        self.code_area.setReadOnly(True)
        self.code_area.setFont(QFont("Consolas", 12))
        self.code_area.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 5px;
                padding: 10px;
                font-family: Consolas;
            }
        """)
        layout.addWidget(self.code_area)
        self.setLayout(layout)

    def initializePage(self):
        block_type = self.field("block_type")
        block = Block(block_type)
        for param in BLOCK_TYPES[block_type]["params"]:
            value = self.field(f"param_{param['name']}")
            block.params[param["name"]] = value
        code = generate_code([block])
        self.code_area.setText(code)

class ExampleDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        self.setMinimumWidth(800)
        self.setMinimumHeight(600)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout()
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ TradingView")
        title.setFont(QFont("Arial", 18, QFont.Bold))
        title.setStyleSheet("color: #ffffff; margin-bottom: 10px;")
        layout.addWidget(title)
        # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
        examples = [
            {
                "name": "EMA 14",
                "description": "–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/ema14.png"
            },
            {
                "name": "RSI 14",
                "description": "–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞.",
                "image": "examples/rsi14.png"
            },
            {
                "name": "MACD —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
                "description": "–°—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –∏ –º–æ–º–µ–Ω—Ç—É–º —Ä—ã–Ω–∫–∞.",
                "image": "examples/macd.png"
            },
            {
                "name": "Bollinger Bands 20",
                "description": "–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º 20. –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/bb20.png"
            },
            {
                "name": "Stochastic 14/3",
                "description": "–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏ 14 –∏ 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—É–º –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã —Ç—Ä–µ–Ω–¥–∞.",
                "image": "examples/stoch.png"
            },
            {
                "name": "ATR 14",
                "description": "–°—Ä–µ–¥–Ω–∏–π –∏—Å—Ç–∏–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞.",
                "image": "examples/atr14.png"
            },
            {
                "name": "CCI 20",
                "description": "–ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º 20. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ –º–æ–º–µ–Ω—Ç—É–º.",
                "image": "examples/cci20.png"
            },
            {
                "name": "–û–±—ä—ë–º MA 20",
                "description": "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ–±—ä—ë–º–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º 20. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ –∏ –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤.",
                "image": "examples/volma20.png"
            },
            {
                "name": "–¢—Ä–µ–Ω–¥ MA 50",
                "description": "–°–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Å –ø–µ—Ä–∏–æ–¥–æ–º 50. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∏ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/ma50.png"
            },
            {
                "name": "–£—Ä–æ–≤–µ–Ω—å 100",
                "description": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ 100. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è.",
                "image": "examples/level100.png"
            },
            {
                "name": "–ê–ª–µ—Ä—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ",
                "description": "–ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –∏ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫.",
                "image": "examples/cross.png"
            },
            {
                "name": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è Long",
                "description": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä—ã–Ω–∫–∞.",
                "image": "examples/long.png"
            },
            {
                "name": "–†–∏—Å–∫ 2%",
                "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–æ–π 2%. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.",
                "image": "examples/risk2.png"
            },
            {
                "name": "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è Blue",
                "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.",
                "image": "examples/blue.png"
            }
        ]
        for example in examples:
            card = QFrame()
            card.setFrameStyle(QFrame.StyledPanel | QFrame.Raised)
            card.setStyleSheet("""
                QFrame {
                    background-color: #23272e;
                    border: 2px solid #3d3d3d;
                    border-radius: 12px;
                    margin-bottom: 10px;
                }
                QFrame:hover {
                    border: 2px solid #4a90e2;
                    background-color: #2c313c;
                }
            """)
            card_layout = QVBoxLayout()
            name = QLabel(example["name"])
            name.setFont(QFont("Arial", 16, QFont.Bold))
            name.setStyleSheet("color: #fff;")
            desc = QLabel(example["description"])
            desc.setStyleSheet("color: #aaa; font-size: 13px;")
            desc.setWordWrap(True)
            image = QLabel()
            pixmap = QPixmap(example["image"])
            if not pixmap.isNull():
                image.setPixmap(pixmap.scaled(400, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation))
            else:
                image.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                image.setStyleSheet("color: #ff0000;")
            card_layout.addWidget(name)
            card_layout.addWidget(desc)
            card_layout.addWidget(image)
            card.setLayout(card_layout)
            layout.addWidget(card)
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        close_btn.clicked.connect(self.reject)
        layout.addWidget(close_btn)
        self.setLayout(layout)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.blocks = []
        self.setup_ui()
        
    def setup_ui(self):
        self.setWindowTitle("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ TradingView")
        self.setMinimumSize(800, 600)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ TradingView")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #ffffff; margin: 20px;")
        layout.addWidget(title)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è TradingView –±–µ–∑ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
        description.setFont(QFont("Arial", 14))
        description.setAlignment(Qt.AlignCenter)
        description.setStyleSheet("color: #aaaaaa; margin-bottom: 20px;")
        layout.addWidget(description)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –±–ª–æ–∫–æ–≤
        self.blocks_area = QScrollArea()
        self.blocks_area.setWidgetResizable(True)
        self.blocks_area.setStyleSheet("""
            QScrollArea {
                background-color: #1e1e1e;
                border: none;
            }
        """)
        
        self.blocks_widget = QWidget()
        self.blocks_layout = QVBoxLayout()
        self.blocks_widget.setLayout(self.blocks_layout)
        self.blocks_area.setWidget(self.blocks_widget)
        layout.addWidget(self.blocks_area)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
        add_block_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫")
        add_block_btn.setFont(QFont("Arial", 12))
        add_block_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        add_block_btn.clicked.connect(self.add_block)
        buttons_layout.addWidget(add_block_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        wizard_btn = QPushButton("üßô –ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä")
        wizard_btn.setFont(QFont("Arial", 12))
        wizard_btn.setStyleSheet("""
            QPushButton {
                background-color: #9C27B0;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #7B1FA2;
            }
        """)
        wizard_btn.clicked.connect(self.show_wizard)
        buttons_layout.addWidget(wizard_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞
        example_btn = QPushButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä")
        example_btn.setFont(QFont("Arial", 12))
        example_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        example_btn.clicked.connect(self.show_example)
        buttons_layout.addWidget(example_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        generate_btn = QPushButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
        generate_btn.setFont(QFont("Arial", 12))
        generate_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        generate_btn.clicked.connect(self.generate_code)
        buttons_layout.addWidget(generate_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = QPushButton("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        export_btn.setFont(QFont("Arial", 12))
        export_btn.setStyleSheet("""
            QPushButton {
                background-color: #607D8B;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #455A64;
            }
        """)
        export_btn.clicked.connect(self.export_settings)
        buttons_layout.addWidget(export_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        import_btn = QPushButton("üìÇ –ò–º–ø–æ—Ä—Ç")
        import_btn.setFont(QFont("Arial", 12))
        import_btn.setStyleSheet("""
            QPushButton {
                background-color: #607D8B;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #455A64;
            }
        """)
        import_btn.clicked.connect(self.import_settings)
        buttons_layout.addWidget(import_btn)
        
        layout.addLayout(buttons_layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–¥–∞
        self.code_area = QTextEdit()
        self.code_area.setReadOnly(True)
        self.code_area.setFont(QFont("Consolas", 12))
        self.code_area.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 5px;
                padding: 10px;
                font-family: Consolas;
            }
        """)
        layout.addWidget(self.code_area)
        
        main_widget.setLayout(layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—ë–º–Ω—É—é —Ç–µ–º—É
        self.setStyleSheet("""
            QMainWindow {
                background-color: #1e1e1e;
            }
            QWidget {
                background-color: #1e1e1e;
            }
        """)
    
    def add_block(self):
        dialog = BlockSelectDialog(self)
        if dialog.exec_() == QDialog.Accepted and dialog.selected_type:
            if hasattr(dialog, 'selected_params'):
                self.create_block(dialog.selected_type, dialog.selected_params)
            else:
                self.create_block(dialog.selected_type)
    
    def create_block(self, block_type, params=None):
        block = Block(block_type)
        if params:
            block.params.update(params)
        elif "default_values" in BLOCK_TYPES[block_type]:
            block.params.update(BLOCK_TYPES[block_type]["default_values"])
        self.blocks.append(block)
        self.update_blocks()
    
    def remove_block(self, block_widget):
        index = self.blocks_widget.layout().indexOf(block_widget)
        if index != -1:
            self.blocks.pop(index)
            self.update_blocks()
    
    def update_blocks(self):
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏
        while self.blocks_layout.count():
            item = self.blocks_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –∑–∞–Ω–æ–≤–æ
        for block in self.blocks:
            block_widget = BlockWidget(block)
            self.blocks_layout.addWidget(block_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        self.blocks_layout.addStretch()
    
    def generate_code(self):
        try:
            code = generate_code(self.blocks)
            self.code_area.setText(code)
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
            errors = validate_code(code)
            if errors:
                show_error_dialog(self, '\n'.join(errors))
        except Exception as e:
            tb_str = traceback.format_exc()
            logging.error(tb_str)
            show_error_dialog(self, tb_str)

    def show_wizard(self):
        wizard = WizardDialog(self)
        wizard.exec_()

    def show_example(self):
        dialog = ExampleDialog(self)
        dialog.exec_()

    def export_settings(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "", "JSON Files (*.json)")
        if file_name:
            settings = [{"type": block.type, "params": block.params} for block in self.blocks]
            with open(file_name, 'w') as f:
                json.dump(settings, f, indent=4)

    def import_settings(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "", "JSON Files (*.json)")
        if file_name:
            with open(file_name, 'r') as f:
                settings = json.load(f)
            self.blocks = [Block(s["type"], s["params"]) for s in settings]
            self.update_blocks()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_()) 