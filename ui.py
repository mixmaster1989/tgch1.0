"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

print('UI VERY TOP')
import sys
print('UI AFTER sys')
import os
print('UI AFTER os')
import json
print('UI AFTER json')
import logging
print('UI AFTER logging')
import traceback
print('UI AFTER traceback')
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QPushButton, QLabel, QComboBox, QLineEdit, QTextEdit, QScrollArea,
                            QFrame, QMessageBox, QToolButton, QToolTip, QSizePolicy, QDialog, 
                            QDialogButtonBox, QWizard, QWizardPage, QFileDialog, QAction, QMenu,
                            QStatusBar)
print('UI AFTER PyQt5.QtWidgets')
from PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve, QPoint, QTimer
print('UI AFTER PyQt5.QtCore')
from PyQt5.QtGui import QFont, QIcon, QColor, QPalette, QPixmap, QKeySequence
print('UI AFTER PyQt5.QtGui')
from block import Block
print('UI AFTER block')
from block_widget import BlockWidget
print('UI AFTER block_widget')
from code_gen import generate_code
print('UI AFTER code_gen')
from constants import BLOCK_TYPES
print('UI AFTER constants')
from utils import validate_code, show_info_message, backup_project
print('UI AFTER utils')
from error_handler import setup_error_handling, show_error_dialog
print('UI AFTER error_handler')
from dialogs import BlockSelectDialog, WizardDialog, ExampleDialog, HelpDialog, AboutDialog
print('UI AFTER dialogs')
from autosave import autosave
print('UI AFTER autosave')
from preview import PreviewDialog
print('UI AFTER preview')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
setup_error_handling()

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        super().__init__()
        self.blocks = []
        self.setup_ui()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autosave.start(self.get_blocks)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.check_autosave()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.status_timer = QTimer(self)
        self.status_timer.timeout.connect(self.update_status)
        self.status_timer.start(1000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ TradingView")
        self.setMinimumSize(800, 600)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é
        self.create_menu()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)
        self.statusBar.showMessage("–ì–æ—Ç–æ–≤–æ")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ TradingView")
        title.setFont(QFont("Arial", 24, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #ffffff; margin: 20px;")
        title.setProperty("heading", True)
        layout.addWidget(title)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = QLabel("–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è TradingView –±–µ–∑ –∑–Ω–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!")
        description.setFont(QFont("Arial", 14))
        description.setAlignment(Qt.AlignCenter)
        description.setStyleSheet("color: #aaaaaa; margin-bottom: 20px;")
        description.setProperty("subheading", True)
        layout.addWidget(description)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –±–ª–æ–∫–æ–≤
        self.blocks_area = QScrollArea()
        self.blocks_area.setWidgetResizable(True)
        self.blocks_area.setStyleSheet("""
            QScrollArea {
                background-color: #1e1e1e;
                border: none;
            }
        """)
        
        self.blocks_widget = QWidget()
        self.blocks_layout = QVBoxLayout()
        self.blocks_widget.setLayout(self.blocks_layout)
        self.blocks_area.setWidget(self.blocks_widget)
        layout.addWidget(self.blocks_area)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        wizard_btn = QPushButton("üßô –ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä")
        wizard_btn.setFont(QFont("Arial", 12))
        wizard_btn.setProperty("secondary", True)
        wizard_btn.clicked.connect(self.show_wizard)
        buttons_layout.addWidget(wizard_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞
        example_btn = QPushButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä")
        example_btn.setFont(QFont("Arial", 12))
        example_btn.setProperty("warning", True)
        example_btn.clicked.connect(self.show_example)
        buttons_layout.addWidget(example_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_btn = QPushButton("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_btn.setFont(QFont("Arial", 12))
        preview_btn.setProperty("warning", True)
        preview_btn.clicked.connect(self.show_preview)
        buttons_layout.addWidget(preview_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
        generate_btn = QPushButton("‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
        generate_btn.setFont(QFont("Arial", 12))
        generate_btn.setProperty("primary", True)
        generate_btn.clicked.connect(self.generate_code)
        buttons_layout.addWidget(generate_btn)
        
        layout.addLayout(buttons_layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–¥–∞
        self.code_area = QTextEdit()
        self.code_area.setReadOnly(True)
        self.code_area.setFont(QFont("Consolas", 12))
        self.code_area.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #3d3d3d;
                border-radius: 5px;
                padding: 10px;
                font-family: Consolas;
            }
        """)
        layout.addWidget(self.code_area)
        
        main_widget.setLayout(layout)
    
    def create_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        new_action = QAction("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", self)
        new_action.setShortcut(QKeySequence.New)
        new_action.triggered.connect(self.new_project)
        file_menu.addAction(new_action)
        
        open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å...", self)
        open_action.setShortcut(QKeySequence.Open)
        open_action.triggered.connect(self.import_settings)
        file_menu.addAction(open_action)
        
        save_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å...", self)
        save_action.setShortcut(QKeySequence.Save)
        save_action.triggered.connect(self.export_settings)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        backup_action = QAction("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", self)
        backup_action.triggered.connect(self.create_backup)
        file_menu.addAction(backup_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut(QKeySequence.Quit)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        edit_menu = menubar.addMenu("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        add_block_action = QAction("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫", self)
        add_block_action.setShortcut("Ctrl+B")
        add_block_action.triggered.connect(self.add_block)
        edit_menu.addAction(add_block_action)
        
        generate_code_action = QAction("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", self)
        generate_code_action.setShortcut("F5")
        generate_code_action.triggered.connect(self.generate_code)
        edit_menu.addAction(generate_code_action)
        
        edit_menu.addSeparator()
        
        copy_code_action = QAction("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", self)
        copy_code_action.setShortcut("Ctrl+Shift+C")
        copy_code_action.triggered.connect(self.copy_code)
        edit_menu.addAction(copy_code_action)
        
        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = menubar.addMenu("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        wizard_action = QAction("–ü–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä", self)
        wizard_action.triggered.connect(self.show_wizard)
        tools_menu.addAction(wizard_action)
        
        example_action = QAction("–ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤", self)
        example_action.triggered.connect(self.show_example)
        tools_menu.addAction(example_action)
        
        preview_action = QAction("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", self)
        preview_action.triggered.connect(self.show_preview)
        tools_menu.addAction(preview_action)
        
        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = menubar.addMenu("–°–ø—Ä–∞–≤–∫–∞")
        
        help_action = QAction("–°–ø—Ä–∞–≤–∫–∞", self)
        help_action.setShortcut("F1")
        help_action.triggered.connect(self.show_help)
        help_menu.addAction(help_action)
        
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def add_block(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫"""
        dialog = BlockSelectDialog(self)
        if dialog.exec_() == QDialog.Accepted and dialog.selected_type:
            if hasattr(dialog, 'selected_params'):
                self.create_block(dialog.selected_type, dialog.selected_params)
            else:
                self.create_block(dialog.selected_type)
    
    def create_block(self, block_type, params=None):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–ª–æ–∫"""
        block = Block(block_type)
        if params:
            block.params.update(params)
        elif "default_values" in BLOCK_TYPES[block_type]:
            block.params.update(BLOCK_TYPES[block_type]["default_values"])
        self.blocks.append(block)
        self.update_blocks()
        self.statusBar.showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: {block_type}")
    
    def remove_block(self, block_widget):
        """–£–¥–∞–ª—è–µ—Ç –±–ª–æ–∫"""
        index = self.blocks_layout.indexOf(block_widget)
        if index >= 0:
            block_type = self.blocks[index].block_type
            self.blocks.pop(index)
            block_widget.setParent(None)
            self.update_blocks()
            self.statusBar.showMessage(f"–£–¥–∞–ª–µ–Ω –±–ª–æ–∫: {block_type}")
    
    def duplicate_block(self, block_widget):
        """–î—É–±–ª–∏—Ä—É–µ—Ç –±–ª–æ–∫"""
        index = self.blocks_layout.indexOf(block_widget)
        if index >= 0:
            original_block = self.blocks[index]
            new_block = original_block.duplicate()
            self.blocks.insert(index + 1, new_block)
            self.update_blocks()
            self.statusBar.showMessage(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω –±–ª–æ–∫: {original_block.block_type}")
    
    def move_block(self, source_index, target_index):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –±–ª–æ–∫ —Å –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥—Ä—É–≥—É—é"""
        if 0 <= source_index < len(self.blocks) and 0 <= target_index < len(self.blocks):
            block = self.blocks.pop(source_index)
            self.blocks.insert(target_index, block)
            self.update_blocks()
            self.statusBar.showMessage(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω –±–ª–æ–∫: {block.block_type}")
    
    def update_blocks(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–ª–æ–∫–∏
        while self.blocks_layout.count():
            item = self.blocks_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏ –∑–∞–Ω–æ–≤–æ
        for block in self.blocks:
            block_widget = BlockWidget(block)
            self.blocks_layout.addWidget(block_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        self.blocks_layout.addStretch()
    
    def generate_code(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ Pine Script –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–ª–æ–∫–æ–≤"""
        try:
            if not self.blocks:
                show_info_message(self, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–ª–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞.")
                return
                
            code = generate_code(self.blocks)
            self.code_area.setText(code)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞
            errors = validate_code(code)
            if errors:
                error_text = '\n'.join(errors)
                show_error_dialog(self, error_text)
            else:
                show_info_message(self, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                self.statusBar.showMessage("–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            tb_str = traceback.format_exc()
            logging.error(tb_str)
            show_error_dialog(self, tb_str)
    
    def copy_code(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        code = self.code_area.toPlainText()
        if code:
            clipboard = QApplication.clipboard()
            clipboard.setText(code)
            self.statusBar.showMessage("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            show_info_message(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞", "–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")
        else:
            show_info_message(self, "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞", "–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥.")
    
    def show_wizard(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä"""
        wizard = WizardDialog(self)
        wizard.exec_()
    
    def show_example(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        dialog = ExampleDialog(self)
        dialog.exec_()
    
    def show_preview(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if not self.blocks:
            show_info_message(self, "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–ª–æ–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
            return
            
        dialog = PreviewDialog(self.blocks, self)
        dialog.exec_()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        dialog = HelpDialog(self)
        dialog.exec_()
    
    def show_about(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        dialog = AboutDialog(self)
        dialog.exec_()
    
    def export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        if not self.blocks:
            show_info_message(self, "–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
            
        file_name, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "", "JSON Files (*.json)")
        if file_name:
            try:
                with open(file_name, 'w', encoding='utf-8') as f:
                    json.dump([b.get_data() for b in self.blocks], f, indent=4, ensure_ascii=False)
                
                self.statusBar.showMessage(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.blocks)} –±–ª–æ–∫–æ–≤")
                show_info_message(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {file_name}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
                show_error_dialog(self, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        file_name, _ = QFileDialog.getOpenFileName(self, "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", "", "JSON Files (*.json)")
        if file_name:
            try:
                with open(file_name, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                
                self.blocks = []
                for s in settings:
                    if "block_type" in s and "params" in s:
                        block = Block(s["block_type"], s["params"])
                        self.blocks.append(block)
                
                self.update_blocks()
                self.statusBar.showMessage(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(self.blocks)} –±–ª–æ–∫–æ–≤")
                show_info_message(self, "–ò–º–ø–æ—Ä—Ç", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ {file_name}.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
                show_error_dialog(self, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    def new_project(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
        if self.blocks:
            reply = QMessageBox.question(self, "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", 
                                        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.blocks = []
                self.update_blocks()
                self.code_area.clear()
                self.statusBar.showMessage("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        backup_path = backup_project()
        if backup_path:
            self.statusBar.showMessage(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ {backup_path}")
            show_info_message(self, "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {backup_path}")
        else:
            show_error_dialog(self, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
    
    def get_blocks(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return self.blocks
    
    def check_autosave(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        blocks = autosave.load_autosave(Block)
        if blocks:
            reply = QMessageBox.question(self, "–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 
                                        "–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é?",
                                        QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
            if reply == QMessageBox.Yes:
                self.blocks = blocks
                self.update_blocks()
                self.statusBar.showMessage("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è –∏–∑ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        if not self.statusBar.currentMessage():
            self.statusBar.showMessage(f"–ë–ª–æ–∫–æ–≤: {len(self.blocks)}")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autosave.stop()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if self.blocks:
            reply = QMessageBox.question(self, "–í—ã—Ö–æ–¥", 
                                        "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?",
                                        QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Yes)
            if reply == QMessageBox.Yes:
                self.export_settings()
                event.accept()
            elif reply == QMessageBox.No:
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())