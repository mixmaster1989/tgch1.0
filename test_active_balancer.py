#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50
"""

import asyncio
import logging
from active_50_50_balancer import Active5050Balancer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_balancer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ 50/50")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫
        balancer = Active5050Balancer()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã
        logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–æ–≤...")
        stablecoins = balancer.get_stablecoin_balances()
        logger.info(f"üíµ USDT: ${stablecoins['USDT']:.2f}")
        logger.info(f"üíµ USDC: ${stablecoins['USDC']:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        logger.info("üìà –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        portfolio = balancer.get_portfolio_values()
        logger.info(f"üß© –ê–ª—å—Ç—ã: ${portfolio['alts_value']:.2f}")
        logger.info(f"üü° BTC/ETH: ${portfolio['btceth_value']:.2f}")
        logger.info(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio['total_value']:.2f}")
        
        if portfolio['total_value'] > 0:
            alts_ratio = portfolio['alts_value'] / portfolio['total_value']
            btceth_ratio = portfolio['btceth_value_usdt'] / portfolio['total_value']
            logger.info(f"üìä –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏: –ê–ª—å—Ç—ã {alts_ratio*100:.1f}% | BTC/ETH {btceth_ratio*100:.1f}%")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
        logger.info("‚öñÔ∏è –†–∞—Å—á–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...")
        balance_plan = balancer.calculate_balance_needed()
        
        if balance_plan:
            logger.info(f"üéØ –ü–ª–∞–Ω –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:")
            logger.info(f"   –î–µ–π—Å—Ç–≤–∏–µ: {balance_plan['action']}")
            logger.info(f"   –°—É–º–º–∞: ${balance_plan['amount']:.2f}")
            logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {balance_plan['reason']}")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = input("\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É? (y/n): ")
            if response.lower() == 'y':
                logger.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏...")
                result = balancer.execute_conversion(balance_plan['action'], balance_plan['amount'])
                
                if result['success']:
                    logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    logger.info(f"   –û—Ä–¥–µ—Ä ID: {result['order_id']}")
                    logger.info(f"   –¶–µ–Ω–∞: {result['price']:.6f}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {result['error']}")
            else:
                logger.info("‚è∏Ô∏è –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        else:
            logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = balancer.get_status()
        logger.info(f"\nüìä –°—Ç–∞—Ç—É—Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞:")
        logger.info(f"   –†–∞–±–æ—Ç–∞–µ—Ç: {status['is_running']}")
        logger.info(f"   –í—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ–∫: {status['total_balances']}")
        logger.info(f"   –í—Å–µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${status['total_converted']:.2f}")
        logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {status['scan_interval']} —Å–µ–∫")
        logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${status['min_balance_threshold']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_balancer())

