#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞
"""

import asyncio
from datetime import datetime
from mexc_websocket_client import MEXCWebSocketClient, StreamType

async def debug_orderbook():
    """–û—Ç–ª–∞–¥–∫–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
    try:
        print("üîç –û–¢–õ–ê–î–ö–ê ORDERBOOK")
        print("=" * 40)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
        client = MEXCWebSocketClient()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
        await client.connect()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç –æ—Ä–¥–µ—Ä–±—É–∫–∞
        print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞ ETHUSDT...")
        await client.load_order_book_snapshot("ETHUSDT")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞...")
        order_book = client.get_order_book("ETHUSDT")
        
        if order_book:
            print("‚úÖ –û—Ä–¥–µ—Ä–±—É–∫ –ø–æ–ª—É—á–µ–Ω!")
            print(f"   –°–∏–º–≤–æ–ª: {order_book.symbol}")
            print(f"   –°–Ω–∞–ø—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {order_book.snapshot_loaded}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ bids: {len(order_book.bids)}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ asks: {len(order_book.asks)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
            best_bid = order_book.get_best_bid()
            best_ask = order_book.get_best_ask()
            
            if best_bid and best_ask:
                bid_price = float(best_bid[0])
                ask_price = float(best_ask[0])
                print(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${bid_price} ({best_bid[1]})")
                print(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${ask_price} ({best_ask[1]})")
                
                spread = ask_price - bid_price
                spread_percent = (spread / bid_price) * 100
                print(f"   –°–ø—Ä–µ–¥: ${spread:.4f} ({spread_percent:.4f}%)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π
                print("\n   –¢–æ–ø-5 –ø–æ–∫—É–ø–æ–∫:")
                sorted_bids = sorted(order_book.bids.items(), key=lambda x: float(x[0]), reverse=True)
                for i, (price, qty) in enumerate(sorted_bids[:5]):
                    print(f"     {i+1}. ${float(price):.2f} - {qty}")
                
                print("\n   –¢–æ–ø-5 –ø—Ä–æ–¥–∞–∂:")
                sorted_asks = sorted(order_book.asks.items(), key=lambda x: float(x[0]))
                for i, (price, qty) in enumerate(sorted_asks[:5]):
                    print(f"     {i+1}. ${float(price):.2f} - {qty}")
            else:
                print("   ‚ùå –ù–µ—Ç –ª—É—á—à–∏—Ö —Ü–µ–Ω")
        else:
            print("   ‚ùå –û—Ä–¥–µ—Ä–±—É–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("\nüì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞...")
        
        async def orderbook_callback(order_book):
            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {order_book.symbol}")
            best_bid = order_book.get_best_bid()
            best_ask = order_book.get_best_ask()
            if best_bid and best_ask:
                bid_price = float(best_bid[0])
                ask_price = float(best_ask[0])
                spread = ask_price - bid_price
                print(f"   –°–ø—Ä–µ–¥: ${spread:.4f}")
        
        await client.subscribe(
            StreamType.DEPTH,
            "ETHUSDT",
            interval="100ms",
            callback=orderbook_callback
        )
        
        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (10 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(10)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await client.disconnect()
        print("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_orderbook()) 