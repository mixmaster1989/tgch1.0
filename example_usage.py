#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MEXC WebSocket Client
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ä–¥–µ—Ä–±—É–∫–æ–º –∏ –¥—Ä—É–≥–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
from datetime import datetime
from mexc_websocket_client import MEXCWebSocketClient, WebSocketConfig, StreamType

async def trade_callback(trade_data):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–æ–∫"""
    print(f"üí± –°–î–ï–õ–ö–ê: {trade_data['symbol']} | "
          f"–¶–µ–Ω–∞: {trade_data['price']} | "
          f"–û–±—ä–µ–º: {trade_data['quantity']} | "
          f"–¢–∏–ø: {trade_data['trade_type']}")

async def kline_callback(kline_data):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–µ–π"""
    print(f"üìä –°–í–ï–ß–ê: {kline_data['symbol']} | "
          f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {kline_data['interval']} | "
          f"–¶–µ–Ω–∞: {kline_data['close']} | "
          f"–û–±—ä–µ–º: {kline_data['volume']}")

async def orderbook_callback(order_book):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
    best_bid = order_book.get_best_bid()
    best_ask = order_book.get_best_ask()
    spread = order_book.get_spread()
    
    if best_bid and best_ask:
        print(f"üìö –û–†–î–ï–†–ë–£–ö: {order_book.symbol} | "
              f"–õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {best_bid[0]} ({best_bid[1]}) | "
              f"–õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {best_ask[0]} ({best_ask[1]}) | "
              f"–°–ø—Ä–µ–¥: {spread:.2f}")

async def book_ticker_callback(ticker_data):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—É—á—à–∏—Ö —Ü–µ–Ω"""
    print(f"üéØ BOOK TICKER: {ticker_data['symbol']} | "
          f"Bid: {ticker_data['bid_price']} ({ticker_data['bid_quantity']}) | "
          f"Ask: {ticker_data['ask_price']} ({ticker_data['ask_quantity']})")

async def limit_depth_callback(depth_data):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã"""
    print(f"üìñ LIMIT DEPTH: {depth_data['symbol']} | "
          f"Bids: {len(depth_data['bids'])} | "
          f"Asks: {len(depth_data['asks'])} | "
          f"Version: {depth_data['version']}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–ê MEXC WEB SOCKET CLIENT")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = WebSocketConfig(
        url="wss://wbs-api.mexc.com/ws",
        ping_interval=30,
        reconnect_delay=5,
        max_reconnect_attempts=10
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = MEXCWebSocketClient(config)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...")
        await client.connect()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è BTCUSDT
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞...")
        await client.load_order_book_snapshot("BTCUSDT")
        
        # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        symbol = "BTCUSDT"
        
        print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏
        await client.subscribe(
            StreamType.TRADES, 
            symbol, 
            interval="100ms",
            callback=trade_callback
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–≤–µ—á–∏
        await client.subscribe(
            StreamType.KLINES, 
            symbol, 
            interval="Min1",
            callback=kline_callback
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞ (–¥–ª—è –æ—Ä–¥–µ—Ä–±—É–∫–∞)
        await client.subscribe(
            StreamType.DEPTH, 
            symbol, 
            interval="100ms",
            callback=orderbook_callback
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
        await client.subscribe(
            StreamType.BOOK_TICKER, 
            symbol, 
            interval="100ms",
            callback=book_ticker_callback
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É
        await client.subscribe(
            StreamType.DEPTH_LIMIT, 
            symbol, 
            levels=5,
            callback=limit_depth_callback
        )
        
        print("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        print("üìä –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
        print("=" * 60)
        
        # –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        await client.listen()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
        await client.disconnect()
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ")

async def orderbook_example():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ —Å –æ—Ä–¥–µ—Ä–±—É–∫–æ–º"""
    print("\nüìö –ü–†–ò–ú–ï–† –†–ê–ë–û–¢–´ –° –û–†–î–ï–†–ë–£–ö–û–ú")
    print("=" * 60)
    
    config = WebSocketConfig()
    client = MEXCWebSocketClient(config)
    
    try:
        await client.connect()
        
        symbol = "BTCUSDT"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–∞
        await client.load_order_book_snapshot(symbol)
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞
        await client.subscribe(
            StreamType.DEPTH, 
            symbol, 
            interval="100ms"
        )
        
        print(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–±—É–∫–∞ {symbol}...")
        print("=" * 60)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        for i in range(12):  # 1 –º–∏–Ω—É—Ç–∞
            await asyncio.sleep(5)
            
            order_book = client.get_order_book(symbol)
            if order_book and order_book.snapshot_loaded:
                best_bid = order_book.get_best_bid()
                best_ask = order_book.get_best_ask()
                spread = order_book.get_spread()
                
                print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} | "
                      f"Bid: {best_bid[0] if best_bid else 'N/A'} | "
                      f"Ask: {best_ask[0] if best_ask else 'N/A'} | "
                      f"Spread: {spread:.2f if spread else 'N/A'}")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π
                print("  Top 5 Bids:")
                sorted_bids = sorted(order_book.bids.items(), key=lambda x: float(x[0]), reverse=True)[:5]
                for price, qty in sorted_bids:
                    print(f"    {price}: {qty}")
                    
                print("  Top 5 Asks:")
                sorted_asks = sorted(order_book.asks.items(), key=lambda x: float(x[0]))[:5]
                for price, qty in sorted_asks:
                    print(f"    {price}: {qty}")
                print("-" * 40)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(main())
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å –æ—Ä–¥–µ—Ä–±—É–∫–æ–º
    # asyncio.run(orderbook_example()) 