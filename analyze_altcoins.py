#!/usr/bin/env python3
"""
–ê–ù–ê–õ–ò–ó –ê–õ–¨–¢–ö–û–ò–ù–û–í!
–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ vs —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - –∫—Ç–æ –≤ –ø–ª—é—Å–µ?
"""

from mex_api import MexAPI
import json
from datetime import datetime

print("üîç –ê–ù–ê–õ–ò–ó –ê–õ–¨–¢–ö–û–ò–ù–û–í - –ö–¢–û –í –ü–õ–Æ–°–ï?")
print("=" * 50)

try:
    # –°–æ–∑–¥–∞–µ–º API –æ–±—ä–µ–∫—Ç
    api = MexAPI()
    print("‚úÖ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    print("üìä –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞...")
    account_info = api.get_account_info()
    
    if not account_info or 'balances' not in account_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        exit()
    
    balances = account_info['balances']
    
    # –ò—â–µ–º –≤—Å–µ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã (–∫—Ä–æ–º–µ USDT/USDC)
    altcoins = []
    
    for balance in balances:
        free = float(balance['free'])
        locked = float(balance['locked'])
        total = free + locked
        
        if total > 0:
            asset = balance['asset']
            if asset not in ['USDT', 'USDC']:
                altcoins.append({
                    'asset': asset,
                    'total': total
                })
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: {len(altcoins)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∞–ª—å—Ç–∫–æ–∏–Ω
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –ê–õ–¨–¢–ö–û–ò–ù–û–í:")
    print("=" * 80)
    
    profitable_coins = []
    loss_coins = []
    
    for alt in altcoins:
        asset = alt['asset']
        quantity = alt['total']
        
        print(f"\nüî∏ {asset}: {quantity}")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            symbol = f"{asset}USDT"
            ticker = api.get_ticker_price(symbol)
            
            if not ticker or 'price' not in ticker:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}")
                continue
            
            current_price = float(ticker['price'])
            current_value = quantity * current_price
            
            print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}")
            print(f"   üíµ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${current_value:.4f}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
            orders = api.get_order_history(symbol, limit=20)
            
            if not orders:
                print(f"   ‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤")
                continue
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π BUY –æ—Ä–¥–µ—Ä
            last_buy = None
            for order in orders:
                if order.get('side') == 'BUY' and order.get('status') == 'FILLED':
                    last_buy = order
                    break
            
            if not last_buy:
                print(f"   ‚ùå –ù–µ—Ç BUY –æ—Ä–¥–µ—Ä–æ–≤")
                continue
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
            buy_price = float(last_buy.get('price', 0))
            buy_quantity = float(last_buy.get('executedQty', 0))
            buy_total = float(last_buy.get('cummulativeQuoteQty', 0))
            buy_time = last_buy.get('time', 0)
            
            if buy_time:
                buy_time_str = datetime.fromtimestamp(buy_time / 1000).strftime('%Y-%m-%d %H:%M:%S')
            else:
                buy_time_str = 'N/A'
            
            print(f"   üì• –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞:")
            print(f"      üí∞ –¶–µ–Ω–∞: ${buy_price}")
            print(f"      üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {buy_quantity}")
            print(f"      üíµ –°—É–º–º–∞: ${buy_total}")
            print(f"      ‚è∞ –í—Ä–µ–º—è: {buy_time_str}")
            
            # 4. –°—á–∏—Ç–∞–µ–º PnL
            if buy_quantity > 0:
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
                ratio = quantity / buy_quantity
                adjusted_buy_cost = buy_total * ratio
                
                pnl = current_value - adjusted_buy_cost
                pnl_percent = (pnl / adjusted_buy_cost) * 100 if adjusted_buy_cost > 0 else 0
                
                print(f"   üìä PnL: ${pnl:.4f} ({pnl_percent:+.2f}%)")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Ç–æ–≥–æ–≤
                coin_data = {
                    'asset': asset,
                    'quantity': quantity,
                    'current_price': current_price,
                    'current_value': current_value,
                    'buy_price': buy_price,
                    'buy_cost': adjusted_buy_cost,
                    'pnl': pnl,
                    'pnl_percent': pnl_percent
                }
                
                if pnl > 0:
                    profitable_coins.append(coin_data)
                    print(f"   üü¢ –í –ü–õ–Æ–°–ï!")
                else:
                    loss_coins.append(coin_data)
                    print(f"   üî¥ –í –ú–ò–ù–£–°–ï!")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 50)
    
    print(f"üü¢ –í –ü–õ–Æ–°–ï: {len(profitable_coins)} –º–æ–Ω–µ—Ç")
    for coin in profitable_coins:
        print(f"   {coin['asset']}: +${coin['pnl']:.4f} ({coin['pnl_percent']:+.2f}%)")
    
    print(f"\nüî¥ –í –ú–ò–ù–£–°–ï: {len(loss_coins)} –º–æ–Ω–µ—Ç")
    for coin in loss_coins:
        print(f"   {coin['asset']}: ${coin['pnl']:.4f} ({coin['pnl_percent']:+.2f}%)")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏
    if profitable_coins:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ò–°–°–ò–ò:")
        print("=" * 60)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø—Ä–∏–±—ã–ª–∏
        profitable_coins.sort(key=lambda x: x['pnl_percent'], reverse=True)
        
        best_coin = profitable_coins[0]
        print(f"üéØ –õ—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {best_coin['asset']}")
        print(f"   üìà –ü—Ä–∏–±—ã–ª—å: +${best_coin['pnl']:.4f} ({best_coin['pnl_percent']:+.2f}%)")
        print(f"   üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${best_coin['current_value']:.4f}")
        print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {best_coin['quantity']}")
        
        print(f"\nüöÄ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å {best_coin['asset']} –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏ –º–µ–π–∫–µ—Ä–∞!")
        
except Exception as e:
    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("\nüèÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω") 