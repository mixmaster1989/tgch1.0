#!/usr/bin/env python3
"""
Perplexity Analyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ OpenRouter —Å Perplexity –º–æ–¥–µ–ª—å—é –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
"""

import asyncio
import json
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from openrouter_manager import OpenRouterManager

class PerplexityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Perplexity –º–æ–¥–µ–ª—å –≤ OpenRouter"""
    
    def __init__(self):
        self.openrouter = OpenRouterManager()
        self.perplexity_model = "perplexity/sonar-reasoning"  # Perplexity –º–æ–¥–µ–ª—å –≤ OpenRouter
        
    async def _make_request(self, query: str, focus: str = "news") -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ OpenRouter —Å Perplexity –º–æ–¥–µ–ª—å—é"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            if focus == "news":
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è {query} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.
                –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
                1. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö (–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤–∑–ª–æ–º—ã, —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)
                2. –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (ETF, –∫—Ä—É–ø–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏)
                3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
                4. –†—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö
                
                –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {{
                    "sentiment": "positive/negative/neutral",
                    "impact_score": 0.0-1.0,
                    "key_events": [
                        {{
                            "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–±—ã—Ç–∏—è",
                            "impact": "high/medium/low",
                            "sentiment": "positive/negative/neutral",
                            "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                        }}
                    ],
                    "market_outlook": "–∫—Ä–∞—Ç–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                    "confidence": 0.0-1.0
                }}
                """
            elif focus == "technical":
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã {query}:
                1. On-chain –º–µ—Ç—Ä–∏–∫–∏ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤, –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
                2. DeFi –º–µ—Ç—Ä–∏–∫–∏ (TVL, –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤)
                3. –ú–∞–π–Ω–∏–Ω–≥ –¥–∞–Ω–Ω—ã–µ (—Ö–µ—à—Ä–µ–π—Ç, —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
                4. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä—ã–Ω–∫–∞
                
                –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {{
                    "technical_score": 0.0-1.0,
                    "on_chain_metrics": {{
                        "active_addresses": "trend",
                        "large_transactions": "count",
                        "network_health": "status"
                    }},
                    "defi_metrics": {{
                        "tvl_trend": "up/down/stable",
                        "volume_trend": "up/down/stable"
                    }},
                    "analysis": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                }}
                """
            else:  # market sentiment
                prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è {query}:
                1. –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (Twitter, Reddit, Telegram)
                2. –ú–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤ –∏ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
                3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏
                4. –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
                
                –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {{
                    "social_sentiment": "positive/negative/neutral",
                    "analyst_sentiment": "positive/negative/neutral",
                    "correlation_analysis": "–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä—ã–Ω–∫–∞–º–∏",
                    "confidence": 0.0-1.0,
                    "summary": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"
                }}
                """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º golden key –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
            result = self.openrouter.request_with_golden_key(prompt, self.perplexity_model)
            
            if result['success']:
                content = result['response']
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    if '{' in content and '}' in content:
                        json_start = content.find('{')
                        json_end = content.rfind('}') + 1
                        json_str = content[json_start:json_end]
                        return json.loads(json_str)
                    else:
                        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON", "raw_response": content}
                except json.JSONDecodeError:
                    return {"error": "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", "raw_response": content}
            else:
                return {"error": f"API –æ—à–∏–±–∫–∞: {result['response']}"}
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity —á–µ—Ä–µ–∑ OpenRouter: {e}")
            return {"error": str(e)}
    
    async def analyze_coin_news(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
            base_symbol = symbol.replace('USDT', '').replace('BTC', '').replace('ETH', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            query = f"{base_symbol} cryptocurrency"
            
            result = await self._make_request(query, "news")
            
            if result and "error" not in result:
                return {
                    "symbol": symbol,
                    "news_analysis": result,
                    "timestamp": datetime.now().isoformat(),
                    "source": "perplexity_news"
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {result}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {symbol}: {e}")
            return None
    
    async def analyze_market_sentiment(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π"""
        try:
            base_symbol = symbol.replace('USDT', '').replace('BTC', '').replace('ETH', '')
            query = f"{base_symbol} market sentiment social media"
            
            result = await self._make_request(query, "sentiment")
            
            if result and "error" not in result:
                return {
                    "symbol": symbol,
                    "sentiment_analysis": result,
                    "timestamp": datetime.now().isoformat(),
                    "source": "perplexity_sentiment"
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}: {result}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è {symbol}: {e}")
            return None
    
    async def analyze_technical_factors(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        try:
            base_symbol = symbol.replace('USDT', '').replace('BTC', '').replace('ETH', '')
            query = f"{base_symbol} on-chain metrics DeFi TVL technical analysis"
            
            result = await self._make_request(query, "technical")
            
            if result and "error" not in result:
                return {
                    "symbol": symbol,
                    "technical_analysis": result,
                    "timestamp": datetime.now().isoformat(),
                    "source": "perplexity_technical"
                }
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {result}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_comprehensive_analysis(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        try:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol} —á–µ—Ä–µ–∑ Perplexity...")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞
            tasks = [
                self.analyze_coin_news(symbol),
                self.analyze_market_sentiment(symbol),
                self.analyze_technical_factors(symbol)
            ]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            news_analysis = results[0] if not isinstance(results[0], Exception) else None
            sentiment_analysis = results[1] if not isinstance(results[1], Exception) else None
            technical_analysis = results[2] if not isinstance(results[2], Exception) else None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑
            overall_sentiment = "neutral"
            overall_confidence = 0.5
            impact_score = 0.5
            
            if news_analysis and "news_analysis" in news_analysis:
                news_data = news_analysis["news_analysis"]
                if "sentiment" in news_data:
                    overall_sentiment = news_data["sentiment"]
                if "confidence" in news_data:
                    overall_confidence = news_data["confidence"]
                if "impact_score" in news_data:
                    impact_score = news_data["impact_score"]
            
            return {
                "symbol": symbol,
                "overall_sentiment": overall_sentiment,
                "overall_confidence": overall_confidence,
                "impact_score": impact_score,
                "news_analysis": news_analysis,
                "sentiment_analysis": sentiment_analysis,
                "technical_analysis": technical_analysis,
                "timestamp": datetime.now().isoformat(),
                "source": "perplexity_comprehensive"
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
            return {
                "symbol": symbol,
                "overall_sentiment": "neutral",
                "overall_confidence": 0.0,
                "impact_score": 0.5,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è OpenRouter)"""
        pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
perplexity_analyzer = PerplexityAnalyzer() 