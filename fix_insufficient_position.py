#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ "Insufficient position" - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
"""

def fix_insufficient_position():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('portfolio_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ execute_rebalance_trade
    old_method = '''    def execute_rebalance_trade(self, action: str, symbol: str, quantity: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"üîÑ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {action} {quantity:.6f} {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            side = 'SELL' if action == 'SELL' else 'BUY'
            limit_price = self.calculate_limit_price(symbol, side)
            
            if not limit_price:
                return {'success': False, 'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            orderbook = self.get_orderbook_data(symbol)
            
            logger.info(f"üìä –°—Ç–∞–∫–∞–Ω {symbol}:")
            logger.info(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook['best_bid']:.4f}")
            logger.info(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook['best_ask']:.4f}")
            logger.info(f"   –°–ø—Ä–µ–¥: {orderbook['spread_percent']:.4f}%")
            logger.info(f"   –ù–∞—à–∞ —Ü–µ–Ω–∞: ${limit_price:.4f}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side=side,
                quantity=quantity,
                price=limit_price
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': limit_price,
                    'order': order
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {order}")
                return {'success': False, 'error': f'API –æ—à–∏–±–∫–∞: {order}'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ {symbol}: {e}")
            return {'success': False, 'error': str(e)}'''
    
    new_method = '''    def execute_rebalance_trade(self, action: str, symbol: str, quantity: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            logger.info(f"üîÑ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: {action} {quantity:.6f} {symbol}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            side = 'SELL' if action == 'SELL' else 'BUY'
            limit_price = self.calculate_limit_price(symbol, side)
            
            if not limit_price:
                return {'success': False, 'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            orderbook = self.get_orderbook_data(symbol)
            
            logger.info(f"üìä –°—Ç–∞–∫–∞–Ω {symbol}:")
            logger.info(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook['best_bid']:.4f}")
            logger.info(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook['best_ask']:.4f}")
            logger.info(f"   –°–ø—Ä–µ–¥: {orderbook['spread_percent']:.4f}%")
            logger.info(f"   –ù–∞—à–∞ —Ü–µ–Ω–∞: ${limit_price:.4f}")
            
            # üî• –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
            if action == 'BUY':
                usdc_balance = self.get_usdc_balance()
                required_usdc = quantity * limit_price
                
                logger.info(f"üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π:")
                logger.info(f"   –î–æ—Å—Ç—É–ø–Ω–æ USDC: ${usdc_balance:.2f}")
                logger.info(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è USDC: ${required_usdc:.2f}")
                
                if usdc_balance < required_usdc:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}")
                    return {'success': False, 'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: –Ω—É–∂–Ω–æ ${required_usdc:.2f}, –µ—Å—Ç—å ${usdc_balance:.2f}'}
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side=side,
                quantity=quantity,
                price=limit_price
            )
            
            if order and 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω: {order}")
                
                # üî• –ù–û–í–û–ï: –ñ–¥–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è SELL)
                if action == 'SELL':
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ {order['orderId']}...")
                    import time
                    time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
                    try:
                        order_status = self.mex_api.get_order_status(symbol, order['orderId'])
                        if order_status and order_status.get('status') == 'FILLED':
                            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä {order['orderId']} –∏—Å–ø–æ–ª–Ω–µ–Ω")
                        else:
                            logger.warning(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order['orderId']} –µ—â–µ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω: {order_status}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞: {e}")
                
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'side': side,
                    'quantity': quantity,
                    'price': limit_price,
                    'order': order
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {order}")
                return {'success': False, 'error': f'API –æ—à–∏–±–∫–∞: {order}'}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ {symbol}: {e}")
            return {'success': False, 'error': str(e)}'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    content = content.replace(old_method, new_method)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('portfolio_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ portfolio_balancer.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤")

if __name__ == "__main__":
    fix_insufficient_position()
