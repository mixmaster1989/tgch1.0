#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ —á–µ—Ä–µ–∑ REST API
"""

import asyncio
import time
from comprehensive_data_manager import ComprehensiveDataManager
from advanced_correlation_analyzer import advanced_correlation_analyzer

async def test_correlation_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–†–†–ï–õ–Ø–¶–ò–ô –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    data_manager = ComprehensiveDataManager()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üì° –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await data_manager.start()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í –†–ê–°–®–ò–†–ï–ù–ù–û–ú –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ï:")
        print("-" * 40)
        
        if hasattr(advanced_correlation_analyzer, 'price_data'):
            total_points = sum(len(prices) for prices in advanced_correlation_analyzer.price_data.values())
            print(f"–í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_points}")
            
            for asset, prices in advanced_correlation_analyzer.price_data.items():
                print(f"  {asset}: {len(prices)} —Ç–æ—á–µ–∫")
                if len(prices) > 0:
                    latest_price = prices[-1]['price']
                    print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${latest_price:.4f}")
        else:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è ETH
        print("\nüîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò ETH:")
        print("-" * 40)
        
        correlation_data = data_manager.get_correlation_data('ETHUSDT')
        
        if correlation_data and 'basic_correlations' in correlation_data:
            correlations = correlation_data['basic_correlations']
            for asset, corr_info in correlations.items():
                if isinstance(corr_info, dict) and 'correlation' in corr_info:
                    corr_value = corr_info['correlation']
                    strength = corr_info.get('strength', 'unknown')
                    direction = corr_info.get('direction', 'unknown')
                    print(f"  {asset}: {corr_value:.4f} ({strength}, {direction})")
        else:
            print("‚ùå –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("\nüìà –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ô:")
        print("-" * 40)
        
        if correlation_data:
            # –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            if 'market_regime' in correlation_data:
                regime = correlation_data['market_regime']
                print(f"–†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {regime.get('regime', 'unknown')}")
                print(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC: {regime.get('btc_correlation', 0):.4f}")
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if 'volatility_analysis' in correlation_data:
                vol = correlation_data['volatility_analysis']
                print(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {vol.get('current_volatility', 0):.2%}")
                print(f"–†–∞–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {vol.get('volatility_rank', 0)}")
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if 'trading_signals' in correlation_data:
                signals = correlation_data['trading_signals']
                if signals:
                    print(f"–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: {len(signals)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                    for signal in signals[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                        print(f"  {signal.signal_type}: {signal.reason}")
                else:
                    print("–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö")
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
            if 'risk_assessment' in correlation_data:
                risks = correlation_data['risk_assessment']
                print(f"–û–±—â–∏–π —Ä–∏—Å–∫: {risks.get('overall_risk_score', 0):.3f}")
        
        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (60 —Å–µ–∫—É–Ω–¥)...")
        await asyncio.sleep(60)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        print("-" * 40)
        
        final_correlation = data_manager.get_correlation_data('ETHUSDT')
        if final_correlation and 'basic_correlations' in final_correlation:
            correlations = final_correlation['basic_correlations']
            for asset, corr_info in correlations.items():
                if isinstance(corr_info, dict) and 'correlation' in corr_info:
                    corr_value = corr_info['correlation']
                    if corr_value != 0.0:
                        print(f"‚úÖ {asset}: {corr_value:.4f} - –†–ï–ê–õ–¨–ù–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!")
                    else:
                        print(f"‚ö†Ô∏è {asset}: {corr_value:.4f} - –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await data_manager.stop()

async def test_rest_api_data_fetch():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API"""
    print("\nüîß –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ß–ï–†–ï–ó REST API")
    print("=" * 50)
    
    data_manager = ComprehensiveDataManager()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤
        print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        await data_manager._fetch_other_assets_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•:")
        print("-" * 30)
        
        if hasattr(advanced_correlation_analyzer, 'price_data'):
            for asset, prices in advanced_correlation_analyzer.price_data.items():
                if len(prices) > 0:
                    latest = prices[-1]
                    print(f"‚úÖ {asset}: ${latest['price']:.4f} (–≤—Ä–µ–º—è: {latest['timestamp']})")
                else:
                    print(f"‚ùå {asset}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        print("\n‚úÖ –¢–ï–°–¢ REST API –ó–ê–í–ï–†–®–ï–ù")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ REST API: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_rest_api_data_fetch())
    asyncio.run(test_correlation_integration())

if __name__ == "__main__":
    main() 