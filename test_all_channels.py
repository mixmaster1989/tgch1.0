#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ WebSocket MEX
"""

import asyncio
import websockets
import json

async def test_channel(channel: str):
    """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    print(f"\nüîå –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞: {channel}")
    
    try:
        websocket = await websockets.connect("wss://wbs.mexc.com/ws", timeout=10)
        
        subscription = {
            "method": "SUBSCRIPTION",
            "params": [channel]
        }
        
        await websocket.send(json.dumps(subscription))
        
        try:
            response = await asyncio.wait_for(websocket.recv(), timeout=5)
            data = json.loads(response)
            
            if 'msg' in data and 'Blocked' in data['msg']:
                print(f"  üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù: {data['msg']}")
                return False
            else:
                print(f"  ‚úÖ –†–ê–ë–û–¢–ê–ï–¢: {data}")
                return True
                
        except asyncio.TimeoutError:
            print(f"  ‚è∞ –¢–ê–ô–ú–ê–£–¢")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False
    finally:
        try:
            await websocket.close()
        except:
            pass

async def main():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    print("üîç –¢–ï–°–¢ –í–°–ï–• –ö–ê–ù–ê–õ–û–í WEB SOCKET MEX")
    print("=" * 60)
    
    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    channels = [
        # –°–ø–æ—Ç —Ä—ã–Ω–æ–∫
        "spot@public.ticker.v3.api@BTCUSDT",
        "spot@public.depth.v3.api@BTCUSDT", 
        "spot@public.kline.v3.api@BTCUSDT@1m",
        "spot@public.deals.v3.api@BTCUSDT",
        
        # –§—å—é—á–µ—Ä—Å—ã
        "contract@public.ticker.v3.api@BTC_USDT",
        "contract@public.depth.v3.api@BTC_USDT",
        "contract@public.kline.v3.api@BTC_USDT@1m",
        "contract@public.deals.v3.api@BTC_USDT",
        
        # –ë–µ–∑ –≤–µ—Ä—Å–∏–∏ API
        "spot@public.ticker.api@BTCUSDT",
        "spot@public.depth.api@BTCUSDT",
        "spot@public.kline.api@BTCUSDT@1m",
        "spot@public.deals.api@BTCUSDT",
        
        # –ë–µ–∑ .api
        "spot@public.ticker.v3@BTCUSDT",
        "spot@public.depth.v3@BTCUSDT",
        "spot@public.kline.v3@BTCUSDT@1m",
        "spot@public.deals.v3@BTCUSDT",
        
        # –°—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        "spot@public.ticker@BTCUSDT",
        "spot@public.depth@BTCUSDT", 
        "spot@public.kline@BTCUSDT@1m",
        "spot@public.deals@BTCUSDT",
        
        # –û–±—â–∏–µ –∫–∞–Ω–∞–ª—ã
        "public.ticker@BTCUSDT",
        "public.depth@BTCUSDT",
        "public.kline@BTCUSDT@1m",
        "public.deals@BTCUSDT",
        
        # –ë–µ–∑ —Å–∏–º–≤–æ–ª–∞
        "spot@public.ticker.v3.api",
        "spot@public.depth.v3.api",
        "spot@public.kline.v3.api",
        "spot@public.deals.v3.api"
    ]
    
    results = {}
    
    for channel in channels:
        success = await test_channel(channel)
        results[channel] = success
        
        if success:
            print(f"  üéâ –ù–ê–ô–î–ï–ù –†–ê–ë–û–¢–ê–Æ–©–ò–ô –ö–ê–ù–ê–õ: {channel}")
            break
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    
    working = [ch for ch, result in results.items() if result]
    blocked = [ch for ch, result in results.items() if not result]
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–∞–Ω–∞–ª—ã: {len(working)}")
    print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {len(blocked)}")
    
    if working:
        print(f"\nüéâ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ö–ê–ù–ê–õ–´:")
        for channel in working:
            print(f"  ‚úÖ {channel}")
    else:
        print(f"\n‚ùå –í–°–ï –ö–ê–ù–ê–õ–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´!")
        print(f"üîç MEX –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç WebSocket –ø–æ–¥–ø–∏—Å–∫–∏")
        print(f"üîÑ –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å REST API")

if __name__ == "__main__":
    asyncio.run(main()) 