import requests
import json
import time
from typing import Dict, List, Optional
from config import (
    OPENROUTER_API_KEY, OPENROUTER_SILVER_KEY_1, 
    OPENROUTER_SILVER_KEY_2, OPENROUTER_SILVER_KEY_3,
    GOLDEN_MODEL, SILVER_MODEL
)

class OpenRouterManager:
    def __init__(self):
        # Golden key –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π
        self.golden_key = OPENROUTER_API_KEY
        
        # Silver keys –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.silver_keys = [
            key for key in [
                OPENROUTER_SILVER_KEY_1,
                OPENROUTER_SILVER_KEY_2, 
                OPENROUTER_SILVER_KEY_3
            ] if key and key != 'your_openrouter_silver_key_1'
        ]
        
        self.base_url = "https://openrouter.ai/api/v1"
        self.current_silver_index = 0
        self.failed_keys = set()  # –ö–ª—é—á–∏ —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
        
    def _make_request(self, api_key: str, prompt: str, model: str = "anthropic/claude-3-haiku") -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API"""
        key_preview = api_key[:20] + "..." if api_key else "None"
        print(f"üîë OpenRouter –∑–∞–ø—Ä–æ—Å: –∫–ª—é—á={key_preview}, –º–æ–¥–µ–ª—å={model}, –ø—Ä–æ–º–ø—Ç={len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
        
        data = {
            'model': model,
            'messages': [{'role': 'user', 'content': prompt}],
            'temperature': 0.3
        }
        
        try:
            start_time = time.time()
            response = requests.post(
                f'{self.base_url}/chat/completions',
                headers=headers,
                json=data,
                timeout=30
            )
            duration = time.time() - start_time
            
            print(f"üì° OpenRouter –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å={response.status_code}, –≤—Ä–µ–º—è={duration:.2f}—Å")
            
            if response.status_code != 200:
                print(f"‚ùå OpenRouter –æ—à–∏–±–∫–∞: {response.text[:200]}...")
            
            return {
                'status_code': response.status_code,
                'response': response.json() if response.status_code == 200 else response.text,
                'success': response.status_code == 200
            }
            
        except Exception as e:
            print(f"üí• OpenRouter –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)[:200]}...")
            return {
                'status_code': 0,
                'response': str(e),
                'success': False
            }
    
    def _is_rate_limit_error(self, result: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞"""
        if not result['success']:
            error_text = str(result['response']).lower()
            return any(keyword in error_text for keyword in [
                'rate limit', 'daily limit', 'quota exceeded', 
                'too many requests', 'limit exceeded'
            ])
        return False
    
    def _is_key_error(self, result: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–±–ª–µ–º–æ–π —Å –∫–ª—é—á–æ–º (401, 403, etc)"""
        if not result['success']:
            error_text = str(result['response']).lower()
            return any(keyword in error_text for keyword in [
                'user not found', 'unauthorized', 'forbidden', 'invalid key',
                'authentication failed', 'api key', '401', '403'
            ])
        return False
    
    def _get_next_silver_key(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π silver –∫–ª—é—á"""
        print(f"üîÑ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ silver –∫–ª—é—á–∞: –∏–Ω–¥–µ–∫—Å={self.current_silver_index}, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ={len(self.failed_keys)}/{len(self.silver_keys)}")
        
        attempts = 0
        while attempts < len(self.silver_keys):
            key = self.silver_keys[self.current_silver_index]
            key_preview = key[:20] + "..." if key else "None"
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É
            self.current_silver_index = (self.current_silver_index + 1) % len(self.silver_keys)
            attempts += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª—é—á
            if key not in self.failed_keys:
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω silver –∫–ª—é—á: {key_preview}")
                return key
            else:
                print(f"‚ùå –ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {key_preview}")
                
        print(f"üíÄ –í—Å–µ silver –∫–ª—é—á–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return None
    
    def request_with_silver_keys(self, prompt: str, model: str = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º silver –∫–ª—é—á–µ–π —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –ª–∏–º–∏—Ç–µ"""
        print(f"üöÄ –ó–∞–ø—Ä–æ—Å —Å silver –∫–ª—é—á–∞–º–∏: –º–æ–¥–µ–ª—å={model or SILVER_MODEL}, –ø–æ–ø—ã—Ç–æ–∫={len(self.silver_keys) * 3}")
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –¥–æ 3 —Ä–∞–∑ —Å –ø–∞—É–∑–∞–º–∏
        for key_index in range(len(self.silver_keys)):
            for retry in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –∫–ª—é—á
                current_key = self.silver_keys[key_index]
                
                if current_key in self.failed_keys:
                    print(f"‚ùå –ö–ª—é—á {key_index + 1} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                    break
                
                key_preview = current_key[:20] + "..." if current_key else "None"
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry + 1}/3 –¥–ª—è –∫–ª—é—á–∞ {key_index + 1}: {key_preview}")
                
                result = self._make_request(current_key, prompt, model or SILVER_MODEL)
                
                if result['success']:
                    response_text = result['response']['choices'][0]['message']['content']
                    print(f"‚úÖ Silver –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω: –∫–ª—é—á {key_index + 1}, –æ—Ç–≤–µ—Ç {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return {
                        'success': True,
                        'response': response_text,
                        'key_used': current_key[:20] + "..."
                    }
                
                # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º
                if self._is_rate_limit_error(result) or self._is_key_error(result):
                    error_type = "–∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç" if self._is_rate_limit_error(result) else "–ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–ª—é—á–æ–º"
                    print(f"‚ö†Ô∏è –ö–ª—é—á {key_index + 1} {error_type}, –ø–æ–ø—ã—Ç–∫–∞ {retry + 1}/3")
                    
                    if retry < 2:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
                        wait_time = 1 + retry  # 1, 2, 3 —Å–µ–∫—É–Ω–¥—ã
                        print(f"‚è≥ –ñ–¥–µ–º {wait_time} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(wait_time)
                        continue
                    else:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞, –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
                        self.failed_keys.add(current_key)
                        print(f"üíÄ –ö–ª—é—á {key_index + 1} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                        break
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                    print(f"‚ùå –ö–ª—é—á {key_index + 1} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {str(result['response'])[:100]}...")
                    break
        
        print(f"üíÄ –í—Å–µ silver –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ {len(self.silver_keys) * 3} –ø–æ–ø—ã—Ç–æ–∫")
        return {
            'success': False,
            'response': '–í—Å–µ silver –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            'key_used': None
        }
    
    def request_with_golden_key(self, prompt: str, model: str = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º golden –∫–ª—é—á–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        result = self._make_request(self.golden_key, prompt, model or GOLDEN_MODEL)
        
        if result['success']:
            return {
                'success': True,
                'response': result['response']['choices'][0]['message']['content'],
                'key_used': 'GOLDEN_KEY'
            }
        else:
            return {
                'success': False,
                'response': result['response'],
                'key_used': 'GOLDEN_KEY'
            }
    
    def reset_failed_keys(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π (–≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å)"""
        self.failed_keys.clear()
        print("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö silver –∫–ª—é—á–µ–π —Å–±—Ä–æ—à–µ–Ω")
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–π"""
        return {
            'golden_key_available': bool(self.golden_key),
            'silver_keys_total': len(self.silver_keys),
            'silver_keys_failed': len(self.failed_keys),
            'silver_keys_available': len(self.silver_keys) - len(self.failed_keys),
            'current_silver_index': self.current_silver_index
        }