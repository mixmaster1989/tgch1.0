#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è BTC –∏ ETH –∑–∞ USDC
–õ–∏–º–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ 10% –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ —á–∞—Å
"""

from mex_api import MexAPI
import time
import logging
import requests
import asyncio
import threading
from datetime import datetime, timedelta
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BackgroundUSDCTrader:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.is_running = False
        self.last_trade_time = None
        self.trade_interval = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def cancel_all_usdt_orders(self):
        """–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ USDT –æ—Ä–¥–µ—Ä–∞"""
        try:
            logger.info("üîÑ –û—Ç–º–µ–Ω—è—é –≤—Å–µ USDT –æ—Ä–¥–µ—Ä–∞...")
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä–∞ –¥–ª—è USDT –ø–∞—Ä
            usdt_pairs = ['BTCUSDT', 'ETHUSDT', 'USDCUSDT']
            
            for pair in usdt_pairs:
                try:
                    open_orders = self.mex_api.get_open_orders(pair)
                    if open_orders:
                        for order in open_orders:
                            order_id = order.get('orderId')
                            if order_id:
                                result = self.mex_api.cancel_order(pair, order_id)
                                logger.info(f"–û—Ç–º–µ–Ω–µ–Ω –æ—Ä–¥–µ—Ä {order_id} –¥–ª—è {pair}: {result}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è {pair}: {e}")
            
            logger.info("‚úÖ –í—Å–µ USDT –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã USDT –æ—Ä–¥–µ—Ä–æ–≤: {e}")
    
    def get_hourly_candle(self, symbol: str):
        """–ü–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤—É—é —Å–≤–µ—á—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            klines = self.mex_api.get_klines(symbol, '60m', 1)
            
            if not klines or len(klines) == 0:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ –¥–ª—è {symbol}")
                return None
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–µ—á–∏: [timestamp, open, high, low, close, volume, ...]
            candle = klines[0]
            
            candle_data = {
                'timestamp': int(candle[0]),
                'open': float(candle[1]),
                'high': float(candle[2]),
                'low': float(candle[3]),
                'close': float(candle[4]),
                'volume': float(candle[5])
            }
            
            return candle_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–∏ {symbol}: {e}")
            return None
    
    def calculate_limit_price(self, symbol: str, candle_data: dict):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É –Ω–∞ 10% –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π"""
        try:
            min_price = candle_data['low']
            limit_price = min_price * 1.10  # 10% –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
            
            return limit_price, min_price
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω—ã: {e}")
            return None, None
    
    def get_usdc_balance(self):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
    
    def place_limit_order(self, symbol: str, usdc_amount: float, limit_price: float, candle_data: dict):
        """–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            quantity = usdc_amount / limit_price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 4 –∑–Ω–∞–∫–æ–≤
            quantity = round(quantity, 4)
            
            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side='BUY',
                quantity=quantity,
                price=limit_price
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω: {order['orderId']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                message = (
                    f"üéØ <b>–õ–ò–ú–ò–¢–ù–´–ô –û–†–î–ï–† –†–ê–ó–ú–ï–©–ï–ù</b>\n\n"
                    f"üìã <b>–î–µ—Ç–∞–ª–∏:</b>\n"
                    f"üÜî ID: <code>{order['orderId']}</code>\n"
                    f"üí± –ü–∞—Ä–∞: {symbol}\n"
                    f"üí∞ –°—É–º–º–∞: {usdc_amount} USDC\n"
                    f"üìà –¶–µ–Ω–∞: ${limit_price:.4f}\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}\n\n"
                    f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–∏:</b>\n"
                    f"üìâ –ú–∏–Ω–∏–º—É–º –∑–∞ —á–∞—Å: ${candle_data['low']:.4f}\n"
                    f"üìà –ú–∞–∫—Å–∏–º—É–º –∑–∞ —á–∞—Å: ${candle_data['high']:.4f}\n"
                    f"üìä –ó–∞–∫—Ä—ã—Ç–∏–µ: ${candle_data['close']:.4f}\n"
                    f"üìè –ü—Ä–µ–º–∏—è: +10%\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(message)
                
                return order
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def execute_trading_session(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å USDC
            usdc_balance = self.get_usdc_balance()
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDC: {usdc_balance:.2f}")
            
            if usdc_balance < 10:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC: {usdc_balance}")
                return
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞: 50% –Ω–∞ BTC, 50% –Ω–∞ ETH
            usdc_per_coin = usdc_balance * 0.45  # 45% –Ω–∞ –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É, 10% —Ä–µ–∑–µ—Ä–≤
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
            symbols = ['BTCUSDC', 'ETHUSDC']
            
            for symbol in symbols:
                logger.info(f"\n{'='*50}")
                logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {symbol}")
                logger.info(f"{'='*50}")
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—É—é —Å–≤–µ—á—É
                candle_data = self.get_hourly_candle(symbol)
                if not candle_data:
                    continue
                
                logger.info(f"üìà –°–≤–µ—á–∞ {symbol}:")
                logger.info(f"   –û—Ç–∫—Ä—ã—Ç–∏–µ: ${candle_data['open']:.4f}")
                logger.info(f"   –ú–∞–∫—Å–∏–º—É–º: ${candle_data['high']:.4f}")
                logger.info(f"   –ú–∏–Ω–∏–º—É–º: ${candle_data['low']:.4f}")
                logger.info(f"   –ó–∞–∫—Ä—ã—Ç–∏–µ: ${candle_data['close']:.4f}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç–Ω—É—é —Ü–µ–Ω—É
                limit_price, min_price = self.calculate_limit_price(symbol, candle_data)
                if not limit_price:
                    continue
                
                logger.info(f"üéØ –†–∞—Å—á–µ—Ç –ª–∏–º–∏—Ç–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}:")
                logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å: ${min_price:.4f}")
                logger.info(f"   –õ–∏–º–∏—Ç–Ω–∞—è —Ü–µ–Ω–∞ (+10%): ${limit_price:.4f}")
                logger.info(f"   –†–∞–∑–Ω–∏—Ü–∞: ${limit_price - min_price:.4f} ({((limit_price/min_price - 1) * 100):.2f}%)")
                
                # –†–∞–∑–º–µ—â–∞–µ–º –ª–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä
                order = self.place_limit_order(symbol, usdc_per_coin, limit_price, candle_data)
                if order:
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –¥–ª—è {symbol} —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –¥–ª—è {symbol}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ä–¥–µ—Ä–∞–º–∏
                time.sleep(2)
            
            self.last_trade_time = time.time()
            logger.info(f"\nüéâ –¢–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {e}")
    
    def start_background_trading(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ BTC/ETH –∑–∞ USDC...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            start_message = (
                f"ü§ñ <b>–§–û–ù–û–í–ê–Ø –¢–û–†–ì–û–í–õ–Ø –ó–ê–ü–£–©–ï–ù–ê</b>\n\n"
                f"üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>\n"
                f"üí± –ü–∞—Ä–∞: BTCUSDC / ETHUSDC\n"
                f"üí∞ –í–∞–ª—é—Ç–∞: USDC\n"
                f"üìà –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: –õ–∏–º–∏—Ç–Ω—ã–π\n"
                f"üìè –¶–µ–Ω–∞: +10% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞ —á–∞—Å\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –ö–∞–∂–¥—ã–π —á–∞—Å\n\n"
                f"üîÑ –û—Ç–º–µ–Ω—è—é —Å—Ç–∞—Ä—ã–µ USDT –æ—Ä–¥–µ—Ä–∞...\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            self.send_telegram_message(start_message)
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ USDT –æ—Ä–¥–µ—Ä–∞
            self.cancel_all_usdt_orders()
            
            self.is_running = True
            
            while self.is_running:
                try:
                    current_time = time.time()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if (self.last_trade_time is None or 
                        current_time - self.last_trade_time >= self.trade_interval):
                        
                        logger.info(f"‚è∞ –í—ã–ø–æ–ª–Ω—è—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é...")
                        self.execute_trading_session()
                    
                    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    time.sleep(300)
                    
                except KeyboardInterrupt:
                    logger.info("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
                    time.sleep(60)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            stop_message = (
                f"üõë <b>–§–û–ù–û–í–ê–Ø –¢–û–†–ì–û–í–õ–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            self.send_telegram_message(stop_message)
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏...")

def main():
    trader = BackgroundUSDCTrader()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
        trader.start_background_trading()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        trader.stop_trading()

if __name__ == "__main__":
    main() 