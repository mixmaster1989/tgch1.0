import asyncio
import random
import json
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from openrouter_manager import OpenRouterManager
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
# from trading_engine import TradingEngine

class NativeTraderBot:
    def __init__(self):
        self.openrouter = OpenRouterManager()
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.target_chat_id = int(TELEGRAM_CHAT_ID)
        self.message_history = []  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot_username = "ingenerikarbot"
        # self.trading_engine = TradingEngine(simulation_mode=True)  # –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.last_activity_time = datetime.now()
        self.activity_task = None
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
        self.trigger_words = [
            '–±–æ—Ç', '—Ç—Ä–µ–π–¥–µ—Ä', '—Ç–æ—Ä–≥–æ–≤–ª—è', '–º–µ–∫—Å', 'mex', '–æ—à–∏–±–∫–∞', '–ø–æ–º–æ—â—å', 
            '–∞–Ω–∞–ª–∏–∑', '—Ü–µ–Ω–∞', '–±–∞–ª–∞–Ω—Å', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', 'api', '–∫–ª—é—á',
            '–ª–∏–º–∏—Ç', 'openrouter', 'deepseek', '–Ω–µ–π—Ä–æ–Ω–∫–∞', '–∏–∏', 'ai',
            '—Ä—ã–Ω–æ–∫', '—Å–∏–º—É–ª—è—Ü–∏—è', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–∑–∞–ø—É—Å–∫'
        ]
        
        # –£—Ä–æ–≤–Ω–∏ –º–∞—Ç–∞
        self.swear_levels = {
            'light': ['–±–ª–∏–Ω', '—á–µ—Ä—Ç', '–∫–∞–ø–µ—Ü', '—Ñ–∏–≥–Ω—è', '—Ö—Ä–µ–Ω—å'],
            'medium': ['—Ö—Ä–µ–Ω', '–¥–µ—Ä—å–º–æ', '–≥–æ–≤–Ω–æ', '—Å—É–∫–∞', '–±–ª—è–¥—å'],
            'heavy': ['–ø–∏–∑–¥–µ—Ü', '–Ω–∞—Ö—É–π', '–µ–±–∞—Ç—å', '—Å—É–∫–∞ –±–ª—è–¥—å', '–æ—Ö—É–µ—Ç—å']
        }
        
        # –¢–∏–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.activity_types = [
            'market_analysis', 'trading_plans', 'project_status', 
            'crypto_news', 'technical_tips', 'mood_check'
        ]
        
        self.setup_handlers()
        self.setup_scheduler()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        print("ü§ñ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
    
    async def periodic_activity(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_type = random.choice(self.activity_types)
            
            if activity_type == 'market_analysis':
                await self.market_analysis_activity()
            elif activity_type == 'trading_plans':
                await self.trading_plans_activity()
            elif activity_type == 'project_status':
                await self.project_status_activity()
            elif activity_type == 'crypto_news':
                await self.crypto_news_activity()
            elif activity_type == 'technical_tips':
                await self.technical_tips_activity()
            elif activity_type == 'mood_check':
                await self.mood_check_activity()
                
            self.last_activity_time = datetime.now()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def market_analysis_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            from market_analyzer import MarketAnalyzer
            
            await self.send_message("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä—ã–Ω–æ–∫...")
            
            market_analyzer = MarketAnalyzer()
            market_data = market_analyzer.get_market_data()
            
            if market_data:
                # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ø-3
                candidates = market_analyzer.filter_trading_candidates(market_data[:20])
                
                if candidates:
                    top_candidate = candidates[0]
                    await self.send_message(
                        f"üìä –†–´–ù–û–ö –°–ï–ô–ß–ê–°:\n"
                        f"üî• –¢–æ–ø –∫–∞–Ω–¥–∏–¥–∞—Ç: {top_candidate['symbol']}\n"
                        f"üí∞ –¶–µ–Ω–∞: ${top_candidate['current_price']:.6f}\n"
                        f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {top_candidate['price_change_24h']:.2f}%\n"
                        f"‚≠ê –°–∫–æ—Ä: {top_candidate['score']}\n"
                        f"üìÑ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(top_candidate['reasons'])}"
                    )
                else:
                    await self.send_message("üò¥ –†—ã–Ω–æ–∫ —Å–ø–æ–∫–æ–π–Ω—ã–π, –∂–¥–µ–º –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
            else:
                await self.send_message("‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞")
                
        except Exception as e:
            await self.send_message(f"–ë–ª—è–¥—å, –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Å–ª–æ–º–∞–ª—Å—è: {str(e)[:50]}...")
    
    async def trading_plans_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–∞–Ω—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –æ—Ç –ò–ò
            prompt = f"""–¢—ã –¢—Ä–µ–π–¥–µ—Ä (@ingenerikarbot) - –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä.

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —á–∞—Å—ã. –ß—Ç–æ –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å –∫–æ–≥–¥–∞ –¥–æ–ø–∏—à–µ–º –ø—Ä–æ–µ–∫—Ç?

–£—á–∏—Ç—ã–≤–∞–π:
- –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}
- –ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º MEX Trading Bot
- –ù—É–∂–Ω—ã –∏–¥–µ–∏ –¥–ª—è —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª–∏
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å –º–æ–Ω–µ—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏

–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∂–∏–≤–æ–π —Ç—Ä–µ–π–¥–µ—Ä, –º–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è."""

            result = self.openrouter.request_with_silver_keys(prompt)
            
            if result['success']:
                await self.send_message(f"üìã –¢–û–†–ì–û–í–´–ô –ü–õ–ê–ù:\n{result['response']}")
            else:
                await self.send_message("–•—Ä–µ–Ω, –ò–ò –Ω–µ —Ö–æ—á–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å...")
                
        except Exception as e:
            await self.send_message(f"–ö–∞–ø–µ—Ü, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–º–∞–ª–æ—Å—å: {str(e)[:50]}...")
    
    async def project_status_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            status_messages = [
                "üöÄ MEX Bot —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ! API –∫–ª—é—á–∏ –∂–∏–≤—ã, OpenRouter –æ—Ç–≤–µ—á–∞–µ—Ç.",
                "‚ö° –ü—Ä–æ–µ–∫—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Ñ–∏—á–∏!",
                "üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞. –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç.",
                "üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ñ–¥–µ–º –∫–æ–º–∞–Ω–¥—ã!",
                "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏—è–º."
            ]
            
            await self.send_message(random.choice(status_messages))
            
        except Exception as e:
            await self.send_message(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞: –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, {self.get_swear_word()}!")
    
    async def crypto_news_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∫—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            prompt = f"""–¢—ã –¢—Ä–µ–π–¥–µ—Ä (@ingenerikarbot).

–î–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É —Å–µ–π—á–∞—Å. –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å BTC, ETH? –ï—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏?

–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –∫–∞–∫ –≤ —á–∞—Ç–µ. –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è."""

            result = self.openrouter.request_with_silver_keys(prompt)
            
            if result['success']:
                await self.send_message(f"üì∞ –ö–†–ò–ü–¢–û –ù–û–í–û–°–¢–ò:\n{result['response']}")
            else:
                await self.send_message("–ù–æ–≤–æ—Å—Ç–∏: —Ä—ã–Ω–æ–∫ –∂–∏–≤–æ–π, {self.get_swear_word()}!")
                
        except Exception as e:
            await self.send_message("–ù–æ–≤–æ—Å—Ç–∏: –≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É!")
    
    async def technical_tips_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"""
        try:
            tips = [
                "üí° –°–æ–≤–µ—Ç: –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –æ–±—ä–µ–º –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –ø–æ–∑–∏—Ü–∏—é",
                "‚ö° –¢—Ä—é–∫: –∏—Å–ø–æ–ª—å–∑—É–π RSI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏",
                "üéØ –õ–∞–π—Ñ—Ö–∞–∫: —Å—Ç–∞–≤—å —Å—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—Ö–æ–¥–µ",
                "üìä –§–∏—à–∫–∞: —Å–ª–µ–¥–∏ –∑–∞ —É—Ä–æ–≤–Ω–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                "üîç –í–∞–∂–Ω–æ: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"
            ]
            
            await self.send_message(random.choice(tips))
            
        except Exception as e:
            await self.send_message("–°–æ–≤–µ—Ç: –Ω–µ —Ç–æ—Ä–≥—É–π –Ω–∞ —ç–º–æ—Ü–∏—è—Ö!")
    
    async def mood_check_activity(self):
        """–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        try:
            moods = [
                f"üòé –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ! {self.get_swear_word().capitalize()}!",
                "ü§î –î—É–º–∞—é –æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö...",
                "üî• –í –±–æ–µ–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! –†—ã–Ω–æ–∫ –∂–¥–µ—Ç!",
                "üò¥ –ù–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞, –Ω–æ –¥–µ—Ä–∂—É—Å—å!",
                "üöÄ –≠–Ω–µ—Ä–≥–∏—è –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–±—ã–ª–∏!"
            ]
            
            await self.send_message(random.choice(moods))
            
        except Exception as e:
            await self.send_message("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –±–æ–µ–≤–æ–µ!")
    
    async def send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            await self.app.bot.send_message(
                chat_id=self.target_chat_id,
                text=text
            )
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.log_message(text, "–¢—Ä–µ–π–¥–µ—Ä", datetime.now())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def log_message(self, message_text: str, user_name: str, timestamp: datetime):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.message_history.append({
            'text': message_text,
            'user': user_name,
            'timestamp': timestamp
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        one_hour_ago = datetime.now() - timedelta(hours=1)
        self.message_history = [
            msg for msg in self.message_history 
            if msg['timestamp'] > one_hour_ago
        ]
    
    def get_recent_context(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.message_history:
            return "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        context = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:\n"
        for msg in self.message_history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            time_str = msg['timestamp'].strftime('%H:%M')
            context += f"[{time_str}] {msg['user']}: {msg['text']}\n"
        
        return context
    
    def should_respond(self, message_text: str) -> tuple[bool, str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å"""
        message_lower = message_text.lower()
        
        # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
        if f'@{self.bot_username}' in message_lower:
            return True, 'mention'
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for word in self.trigger_words:
            if word in message_lower:
                return True, 'keyword'
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ (7% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.07:
            return True, 'random'
        
        return False, 'none'
    
    def get_swear_word(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"""
        level = random.choice(['light', 'medium', 'heavy'])
        weights = {'light': 0.5, 'medium': 0.3, 'heavy': 0.2}
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –º–∞—Ç–∞
        level = random.choices(
            list(weights.keys()), 
            weights=list(weights.values())
        )[0]
        
        return random.choice(self.swear_levels[level])
    
    def create_personality_prompt(self, user_message: str, context: str, trigger_type: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞"""
        swear = self.get_swear_word()
        
        base_prompt = f"""–¢—ã –¢—Ä–µ–π–¥–µ—Ä (@ingenerikarbot) - —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ MEX Trading Bot –ø—Ä–æ–µ–∫—Ç–∞.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –û–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∑–Ω–∞–µ—à—å —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ MEX
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∂–∏–≤–æ–π, –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
- –ú–æ–∂–µ—à—å –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è (—Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ "{swear}")
- –õ–µ–∑–µ—à—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä, –¥–∞–µ—à—å —Å–æ–≤–µ—Ç—ã, –∏–Ω–æ–≥–¥–∞ –ø–æ–¥–∫–∞–ª—ã–≤–∞–µ—à—å
- –ó–Ω–∞–µ—à—å –ø—Ä–æ–µ–∫—Ç: MEX API, OpenRouter, DeepSeek, Telegram –±–æ—Ç

–ü–†–û–ï–ö–¢ MEX TRADING BOT:
- –°–ø–æ—Ç —Ç–æ—Ä–≥–æ–≤–ª—è —á–µ—Ä–µ–∑ MEX API
- –ò–ò –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenRouter (Golden key –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏, Silver keys –¥–ª—è —á–∞—Ç–∞)
- Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

–ö–û–ù–¢–ï–ö–°–¢ –ì–†–£–ü–ü–´:
{context}

–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: {user_message}

–ü–†–ò–ß–ò–ù–ê –û–¢–í–ï–¢–ê: {trigger_type}

–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∂–∏–≤–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –Ω–æ –Ω–µ –ø—Ä–∏—Ç–æ—Ä–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏ –∏ –º–∞—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é."""

        return base_prompt
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.effective_chat.id != self.target_chat_id:
            return
        
        message_text = update.message.text
        user_name = update.effective_user.first_name or "–ê–Ω–æ–Ω–∏–º"
        timestamp = datetime.now()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log_message(message_text, user_name, timestamp)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if await self.handle_trading_commands(message_text, update, context):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å
        should_respond, trigger_type = self.should_respond(message_text)
        
        if not should_respond:
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await context.bot.send_chat_action(chat_id=self.target_chat_id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            recent_context = self.get_recent_context()
            prompt = self.create_personality_prompt(message_text, recent_context, trigger_type)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            result = self.openrouter.request_with_silver_keys(prompt)
            
            if result['success']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await update.message.reply_text(result['response'])
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–π –æ—Ç–≤–µ—Ç
                self.log_message(result['response'], "–¢—Ä–µ–π–¥–µ—Ä", datetime.now())
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ò–ò, –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ
                error_responses = [
                    f"–ë–ª—è–¥—å, {self.get_swear_word()}! –ò–ò —Å–¥–æ—Ö–ª–æ: {result['response'][:50]}...",
                    f"–ü–∏–∑–¥–µ—Ü, –Ω–µ–π—Ä–æ–Ω–∫–∞ –ª–µ–≥–ª–∞! {self.get_swear_word().capitalize()}!",
                    f"–•—Ä–µ–Ω, OpenRouter –æ–ø—è—Ç—å –≥–ª—é—á–∏—Ç... {self.get_swear_word()}!"
                ]
                await update.message.reply_text(random.choice(error_responses))
                
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ
            error_msg = f"–ö–∞–ø–µ—Ü, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)[:50]}... {self.get_swear_word().capitalize()}!"
            await update.message.reply_text(error_msg)
    
    async def handle_trading_commands(self, message_text: str, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        message_lower = message_text.lower()
        
        if '—Å–∏–º—É–ª—è—Ü–∏—è' in message_lower:
            await self.run_simulation(update, context)
            return True
        
        return False
    
    async def run_simulation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–æ—Ä–≥–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è"""
        from market_analyzer import MarketAnalyzer
        
        try:
            await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")
            
            market_analyzer = MarketAnalyzer()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = market_analyzer.get_market_data()
            await update.message.reply_text(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(market_data)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            if len(market_data) == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            await update.message.reply_text("üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            candidates = market_analyzer.filter_trading_candidates(market_data[:50])
            
            if len(candidates) == 0:
                await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
                return
            
            await update.message.reply_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-3
            recommendations = []
            for i, candidate in enumerate(candidates[:3]):
                await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑ {candidate['symbol']} ({i+1}/3)...")
                
                ai_analysis = market_analyzer.analyze_with_ai(candidate)
                quantity = market_analyzer.calculate_position_size(
                    candidate['symbol'], candidate['current_price'], candidate['score']
                )
                
                recommendation = {
                    'symbol': candidate['symbol'],
                    'action': ai_analysis['recommendation'],
                    'confidence': ai_analysis['confidence'],
                    'quantity': quantity,
                    'price': candidate['current_price'],
                    'score': candidate['score'],
                    'reasons': candidate['reasons'],
                    'ai_analysis': ai_analysis['analysis'],
                    'position_size_usdt': quantity * candidate['current_price']
                }
                recommendations.append(recommendation)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await update.message.reply_text("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
            
            for i, rec in enumerate(recommendations, 1):
                action_emoji = "üü¢" if rec['action'] == 'BUY' else "üî¥" if rec['action'] == 'SELL' else "üü°"
                
                message = f"{action_emoji} {i}. {rec['symbol']}\n"
                message += f"‚öôÔ∏è –î–µ–π—Å—Ç–≤–∏–µ: {rec['action']}\n"
                message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {rec['confidence']:.1%}\n"
                message += f"üí∞ –¶–µ–Ω–∞: ${rec['price']:.6f}\n"
                message += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rec['quantity']}\n"
                message += f"üíµ –†–∞–∑–º–µ—Ä: ${rec['position_size_usdt']:.2f}\n"
                message += f"‚≠ê –°–∫–æ—Ä: {rec['score']}\n"
                message += f"üìÑ –ü—Ä–∏—á–∏–Ω—ã: {', '.join(rec['reasons'])}\n\n"
                message += f"ü§ñ –ê–Ω–∞–ª–∏–∑: {rec['ai_analysis']}"
                
                await update.message.reply_text(message)
            
            # –ò—Ç–æ–≥–æ
            total_usdt = sum(rec['position_size_usdt'] for rec in recommendations)
            buy_count = sum(1 for rec in recommendations if rec['action'] == 'BUY')
            
            summary = f"üìä –ò–¢–û–ì–û:\n"
            summary += f"üìã –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(recommendations)} –º–æ–Ω–µ—Ç\n"
            summary += f"üü¢ –ö –ø–æ–∫—É–ø–∫–µ: {buy_count}\n"
            summary += f"üí∞ –û–±—â–∏–π –æ–±—ä–µ–º: ${total_usdt:.2f}"
            
            await update.message.reply_text(summary)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–¢—Ä–µ–π–¥–µ—Ä –∑–∞—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø—É...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        async def run_with_activity():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            activity_task = asyncio.create_task(self.activity_loop())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            try:
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                await activity_task
            except KeyboardInterrupt:
                print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            finally:
                await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(run_with_activity())
    
    async def activity_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        while True:
            try:
                # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(30 * 60)  # 30 –º–∏–Ω—É—Ç
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await self.periodic_activity()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ