#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ä–¥–µ—Ä–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT –≤ USDC —Å Telegram –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏
"""

from mex_api import MexAPI
import time
import logging
import requests
from datetime import datetime
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OrderMonitor:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_order_status(self, order_id: str, symbol: str = 'USDCUSDT'):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞"""
        try:
            open_orders = self.mex_api.get_open_orders(symbol)
            
            for order in open_orders:
                if order.get('orderId') == order_id:
                    return {
                        'status': order.get('status', 'UNKNOWN'),
                        'filled': float(order.get('executedQty', 0)),
                        'total': float(order.get('origQty', 0)),
                        'price': order.get('price', 0),
                        'side': order.get('side', 'UNKNOWN'),
                        'type': order.get('type', 'UNKNOWN'),
                        'time': order.get('time', 0)
                    }
            
            # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö, –∑–Ω–∞—á–∏—Ç –æ–Ω –∏—Å–ø–æ–ª–Ω–µ–Ω
            return {'status': 'FILLED', 'filled': 0, 'total': 0}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def get_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã"""
        try:
            account_info = self.mex_api.get_account_info()
            usdt_balance = 0
            usdc_balance = 0
            
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDT':
                    usdt_balance = float(balance['free'])
                elif balance['asset'] == 'USDC':
                    usdc_balance = float(balance['free'])
            
            return usdt_balance, usdc_balance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return 0, 0
    
    def cancel_order(self, order_id: str, symbol: str = 'USDCUSDT'):
        """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä"""
        try:
            result = self.mex_api.cancel_order(symbol, order_id)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {result}")
            return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞: {e}")
            return None
    
    def monitor_order(self, order_id: str, symbol: str = 'USDCUSDT', max_wait_minutes: int = 30):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–¥–µ—Ä–∞ {order_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        start_message = (
            f"üîÑ <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –û–†–î–ï–†–ê –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞:</b>\n"
            f"üÜî ID: <code>{order_id}</code>\n"
            f"üí± –ü–∞—Ä–∞: {symbol}\n"
            f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"‚è≥ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {max_wait_minutes} –º–∏–Ω\n\n"
            f"üìä –û–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É..."
        )
        self.send_telegram_message(start_message)
        
        start_time = time.time()
        last_notification_time = 0
        notification_interval = 60  # 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
        while True:
            current_time = time.time()
            elapsed_minutes = (current_time - start_time) / 60
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            if elapsed_minutes >= max_wait_minutes:
                timeout_message = (
                    f"‚è∞ <b>–í–†–ï–ú–Ø –û–ñ–ò–î–ê–ù–ò–Ø –ò–°–¢–ï–ö–õ–û</b>\n\n"
                    f"üÜî –û—Ä–¥–µ—Ä: <code>{order_id}</code>\n"
                    f"‚è≥ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes:.1f} –º–∏–Ω\n"
                    f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_wait_minutes} –º–∏–Ω\n\n"
                    f"üîÑ –û—Ç–º–µ–Ω—è—é –æ—Ä–¥–µ—Ä..."
                )
                self.send_telegram_message(timeout_message)
                
                # –û—Ç–º–µ–Ω—è–µ–º –æ—Ä–¥–µ—Ä
                cancel_result = self.cancel_order(order_id, symbol)
                if cancel_result:
                    cancel_message = f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω"
                else:
                    cancel_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞"
                
                self.send_telegram_message(cancel_message)
                break
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
            order_status = self.get_order_status(order_id, symbol)
            
            if order_status:
                status = order_status['status']
                filled = order_status['filled']
                total = order_status['total']
                fill_percentage = (filled / total * 100) if total > 0 else 0
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                if current_time - last_notification_time >= notification_interval:
                    status_message = (
                        f"üìä <b>–°–¢–ê–¢–£–° –û–†–î–ï–†–ê</b>\n\n"
                        f"üÜî ID: <code>{order_id}</code>\n"
                        f"üìà –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                        f"‚úÖ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled:.4f} / {total:.4f}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {fill_percentage:.1f}%\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed_minutes:.1f} –º–∏–Ω\n"
                        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                    )
                    self.send_telegram_message(status_message)
                    last_notification_time = current_time
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª–Ω–µ–Ω –ª–∏ –æ—Ä–¥–µ—Ä
                if status == 'FILLED' or filled >= total:
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
                    usdt_balance, usdc_balance = self.get_balances()
                    
                    success_message = (
                        f"üéâ <b>–û–†–î–ï–† –ò–°–ü–û–õ–ù–ï–ù!</b>\n\n"
                        f"üÜî ID: <code>{order_id}</code>\n"
                        f"‚úÖ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
                        f"üí∞ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {filled:.4f} / {total:.4f}\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: 100%\n"
                        f"‚è±Ô∏è –í—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_minutes:.1f} –º–∏–Ω\n\n"
                        f"üí∞ <b>–§–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:</b>\n"
                        f"üíµ USDT: {usdt_balance:.4f}\n"
                        f"üíµ USDC: {usdc_balance:.4f}\n\n"
                        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
                    self.send_telegram_message(success_message)
                    break
            
            # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            time.sleep(10)

def main():
    # ID –æ—Ä–¥–µ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    order_id = "C02__582571019856932868067"
    symbol = "USDCUSDT"
    max_wait_minutes = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 30 –º–∏–Ω—É—Ç
    
    monitor = OrderMonitor()
    monitor.monitor_order(order_id, symbol, max_wait_minutes)

if __name__ == "__main__":
    main() 