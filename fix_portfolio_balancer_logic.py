#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ PortfolioBalancer - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å PnL –∏ USDC
"""

def fix_portfolio_balancer_logic():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('portfolio_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ calculate_rebalance_trades
    old_method = '''    def calculate_rebalance_trades(self, balances: Dict, values: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ—Ä–≥–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        try:
            target_btc_value = values['total_value'] * self.target_btc_ratio
            target_eth_value = values['total_value'] * self.target_eth_ratio
            
            btc_diff = values['btc_value'] - target_btc_value
            eth_diff = values['eth_value'] - target_eth_value
            
            trades = []
            
            # –ï—Å–ª–∏ BTC –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã - –ø—Ä–æ–¥–∞–µ–º BTC
            if btc_diff > 0:
                btc_to_sell = btc_diff / values['btc_price']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–æ—Ç—ã
                if btc_to_sell >= 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç BTC
                    btc_to_sell = round(btc_to_sell, 6)
                    trades.append({
                        'action': 'SELL',
                        'symbol': 'BTCUSDC', 
                        'quantity': btc_to_sell,
                        'value': btc_to_sell * values['btc_price']
                    })
            
            # –ï—Å–ª–∏ ETH –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã - –ø–æ–∫—É–ø–∞–µ–º ETH
            if eth_diff < 0:
                eth_to_buy = abs(eth_diff) / values['eth_price']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ª–æ—Ç—ã
                if eth_to_buy >= 0.001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç ETH
                    eth_to_buy = round(eth_to_buy, 6)
                    trades.append({
                        'action': 'BUY',
                        'symbol': 'ETHUSDC',
                        'quantity': eth_to_buy,
                        'value': eth_to_buy * values['eth_price']
                    })
            
            return {
                'trades': trades,
                'target_btc_value': target_btc_value,
                'target_eth_value': target_eth_value,
                'btc_diff': btc_diff,
                'eth_diff': eth_diff
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ä–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'trades': [], 'error': str(e)}'''
    
    new_method = '''    def calculate_rebalance_trades(self, balances: Dict, values: Dict) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–æ—Ä–≥–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º PnL –∏ USDC"""
        try:
            target_btc_value = values['total_value'] * self.target_btc_ratio
            target_eth_value = values['total_value'] * self.target_eth_ratio
            
            btc_diff = values['btc_value'] - target_btc_value
            eth_diff = values['eth_value'] - target_eth_value
            
            # –ü–æ–ª—É—á–∞–µ–º PnL –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            btc_pnl = self.get_asset_pnl('BTC', balances, values)
            eth_pnl = self.get_asset_pnl('ETH', balances, values)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π USDC
            usdc_balance = self.get_usdc_balance()
            
            trades = []
            total_usdc_needed = 0.0
            
            # üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∫—É–ø–∏—Ç—å –∑–∞ USDC
            
            # –ï—Å–ª–∏ BTC –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã - –ø—Ä–æ–¥–∞–µ–º BTC (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ)
            if btc_diff > 0:
                btc_to_sell = btc_diff / values['btc_price']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL BTC - –ø—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ
                if btc_pnl >= 0:  # BTC –≤ –ø–ª—é—Å–µ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª–µ
                    if btc_to_sell >= 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç BTC
                        btc_to_sell = round(btc_to_sell, 6)
                        trades.append({
                            'action': 'SELL',
                            'symbol': 'BTCUSDC', 
                            'quantity': btc_to_sell,
                            'value': btc_to_sell * values['btc_price'],
                            'pnl': btc_pnl,
                            'reason': f'BTC –≤ –ø–ª—é—Å–µ (PnL: ${btc_pnl:.4f})'
                        })
                else:
                    logger.warning(f"üö´ –ù–µ –ø—Ä–æ–¥–∞–µ–º BTC: PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ${btc_pnl:.4f}")
            
            # –ï—Å–ª–∏ ETH –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã - –ø–æ–∫—É–ø–∞–µ–º ETH
            if eth_diff < 0:
                eth_to_buy = abs(eth_diff) / values['eth_price']
                eth_cost = eth_to_buy * values['eth_price']
                
                if eth_to_buy >= 0.001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç ETH
                    eth_to_buy = round(eth_to_buy, 6)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ USDC
                    if usdc_balance >= eth_cost:
                        # –•–≤–∞—Ç–∞–µ—Ç USDC - –ø–æ–∫—É–ø–∞–µ–º
                        trades.append({
                            'action': 'BUY',
                            'symbol': 'ETHUSDC',
                            'quantity': eth_to_buy,
                            'value': eth_cost,
                            'funding_source': 'USDC',
                            'reason': f'–ü–æ–∫—É–ø–∫–∞ –∑–∞ USDC (–¥–æ—Å—Ç—É–ø–Ω–æ: ${usdc_balance:.2f})'
                        })
                    else:
                        # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç USDC - –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å BTC
                        usdc_shortage = eth_cost - usdc_balance
                        btc_to_sell_for_usdc = usdc_shortage / values['btc_price']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PnL BTC - –ø—Ä–æ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø–ª—é—Å–µ
                        if btc_pnl >= 0:  # BTC –≤ –ø–ª—é—Å–µ
                            if btc_to_sell_for_usdc >= 0.0001:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–æ—Ç BTC
                                btc_to_sell_for_usdc = round(btc_to_sell_for_usdc, 6)
                                trades.append({
                                    'action': 'SELL',
                                    'symbol': 'BTCUSDC',
                                    'quantity': btc_to_sell_for_usdc,
                                    'value': btc_to_sell_for_usdc * values['btc_price'],
                                    'pnl': btc_pnl,
                                    'reason': f'–ü—Ä–æ–¥–∞–∂–∞ BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH (PnL: ${btc_pnl:.4f})'
                                })
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É ETH
                                trades.append({
                                    'action': 'BUY',
                                    'symbol': 'ETHUSDC',
                                    'quantity': eth_to_buy,
                                    'value': eth_cost,
                                    'funding_source': 'BTC_SALE',
                                    'reason': f'–ü–æ–∫—É–ø–∫–∞ ETH –∑–∞ –≤—ã—Ä—É—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ BTC'
                                })
                        else:
                            logger.warning(f"üö´ –ù–µ –ø—Ä–æ–¥–∞–µ–º BTC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH: PnL –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ${btc_pnl:.4f}")
                            logger.info(f"‚è≥ –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - ETH –≤ –º–∏–Ω—É—Å–µ, BTC –≤ –º–∏–Ω—É—Å–µ")
            
            return {
                'trades': trades,
                'target_btc_value': target_btc_value,
                'target_eth_value': target_eth_value,
                'btc_diff': btc_diff,
                'eth_diff': eth_diff,
                'btc_pnl': btc_pnl,
                'eth_pnl': eth_pnl,
                'usdc_balance': usdc_balance
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—Ä–≥–æ–≤ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {e}")
            return {'trades': [], 'error': str(e)}'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    content = content.replace(old_method, new_method)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    new_methods = '''
    def get_asset_pnl(self, asset: str, balances: Dict, values: Dict) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å PnL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞"""
        try:
            if asset == 'BTC':
                quantity = balances.get('BTC', 0.0)
                current_price = values['btc_price']
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                avg_buy_price = current_price * 0.95  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                pnl = (current_price - avg_buy_price) * quantity
                return pnl
            elif asset == 'ETH':
                quantity = balances.get('ETH', 0.0)
                current_price = values['eth_price']
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç PnL (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                avg_buy_price = current_price * 0.95  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                pnl = (current_price - avg_buy_price) * quantity
                return pnl
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL –¥–ª—è {asset}: {e}")
            return 0.0
    
    def get_usdc_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDC"""
        try:
            account_info = self.mex_api.get_account_info()
            if 'balances' not in account_info:
                return 0.0
            
            for balance in account_info['balances']:
                if balance['asset'] == 'USDC':
                    return float(balance['free'])
            
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC: {e}")
            return 0.0
'''
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º
    lines = content.split('\n')
    insert_index = len(lines) - 2  # –ü–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–æ–π
    lines.insert(insert_index, new_methods)
    content = '\n'.join(lines)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('portfolio_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ portfolio_balancer.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å PnL –∏ USDC")

if __name__ == "__main__":
    fix_portfolio_balancer_logic()
