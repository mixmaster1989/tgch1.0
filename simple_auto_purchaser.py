#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö USDT
–ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenRouter API
"""

import asyncio
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from decimal import Decimal

from mex_api import MexAPI
from technical_indicators import TechnicalIndicators
from anti_hype_filter import AntiHypeFilter
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SimpleAutoPurchaser:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"""
    
    def __init__(self):
        self.mex_api = MexAPI()
        self.tech_indicators = TechnicalIndicators()
        self.anti_hype_filter = AntiHypeFilter()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_usdt_balance = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        self.max_purchase_amount = 50.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
        self.check_interval = 300  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.min_purchase_interval = 600  # –ú–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.last_purchase_time = None
        self.total_purchases = 0
        self.total_spent = 0.0
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.trading_pairs = [
            'BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT',
            'DOTUSDT', 'LINKUSDT', 'MATICUSDT', 'AVAXUSDT', 'UNIUSDT'
        ]
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_usdt_balance(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT"""
        try:
            account_info = self.mex_api.get_account_info()
            for balance in account_info.get('balances', []):
                if balance['asset'] == 'USDT':
                    return float(balance['free'])
            return 0.0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT: {e}")
            return 0.0
    
    def analyze_trading_pair(self, symbol: str) -> Optional[Dict]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            klines = self.mex_api.get_klines(symbol, '1h', 24)
            if not klines or len(klines) < 20:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if not ticker or 'price' not in ticker:
                return None
            
            current_price = float(ticker['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self.tech_indicators.calculate_all_indicators(klines, symbol)
            if not indicators:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
            filter_result = self.anti_hype_filter.check_buy_permission(symbol)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä
            score = 0
            reasons = []
            
            # RSI –∞–Ω–∞–ª–∏–∑
            rsi = indicators.get('rsi', 50)
            if rsi < 30:
                score += 3
                reasons.append("–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ")
            elif rsi < 45:
                score += 2
                reasons.append("–Ω–∏–∑–∫–∏–π_rsi")
            elif rsi > 70:
                score -= 2
                reasons.append("–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ")
            
            # –û–±—ä–µ–º –∞–Ω–∞–ª–∏–∑
            volume_ratio = indicators.get('volume_ratio', 1.0)
            if volume_ratio > 1.5:
                score += 2
                reasons.append("–≤—ã—Å–æ–∫–∏–π_–æ–±—ä–µ–º")
            elif volume_ratio > 1.2:
                score += 1
                reasons.append("–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π_–æ–±—ä–µ–º")
            
            # MACD –∞–Ω–∞–ª–∏–∑
            macd_signal = indicators.get('macd_signal', 'NEUTRAL')
            if macd_signal == 'BUY':
                score += 2
                reasons.append("macd_buy")
            elif macd_signal == 'SELL':
                score -= 1
                reasons.append("macd_sell")
            
            # Bollinger Bands –∞–Ω–∞–ª–∏–∑
            bb_position = indicators.get('bb_position', 0.5)
            if bb_position < 0.2:
                score += 2
                reasons.append("bb_–Ω–∏–∂–Ω—è—è")
            elif bb_position > 0.8:
                score -= 1
                reasons.append("bb_–≤–µ—Ä—Ö–Ω—è—è")
            
            # –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä
            if not filter_result['allowed']:
                score = -10  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É
                reasons.append(f"–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω_{filter_result['reason']}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = max(0.1, min(0.9, (score + 5) / 10))
            
            return {
                'symbol': symbol,
                'price': current_price,
                'score': score,
                'confidence': confidence,
                'reasons': reasons,
                'indicators': indicators,
                'filter_result': filter_result
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def find_best_opportunities(self) -> List[Dict]:
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
            
            opportunities = []
            
            for symbol in self.trading_pairs:
                analysis = self.analyze_trading_pair(symbol)
                if analysis and analysis['score'] > 0:  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–æ—Ä—ã
                    opportunities.append(analysis)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
            opportunities.sort(key=lambda x: x['score'], reverse=True)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç")
            return opportunities[:3]  # –¢–æ–ø-3
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
            return []
    
    def calculate_purchase_amount(self, available_usdt: float, opportunity: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–∏ –º–∞–ª–æ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ —Å—Ä–µ–¥—Å—Ç–≤
            if available_usdt < 20.0:
                # –ü—Ä–∏ –±–∞–ª–∞–Ω—Å–µ –º–µ–Ω—å—à–µ $20 –∏—Å–ø–æ–ª—å–∑—É–µ–º 60% —Å—Ä–µ–¥—Å—Ç–≤
                base_amount = available_usdt * 0.6
            else:
                # –ü—Ä–∏ –±–æ–ª—å—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                base_amount = min(available_usdt * 0.3, self.max_purchase_amount)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_multiplier = opportunity['confidence']
            adjusted_amount = base_amount * confidence_multiplier
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –º–Ω–æ–∂–∏—Ç–µ–ª—å
            filter_multiplier = opportunity['filter_result']['multiplier']
            final_amount = adjusted_amount * filter_multiplier
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
            final_amount = min(final_amount, self.max_purchase_amount)
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É $5
            if final_amount < 5.0 and available_usdt >= 5.0:
                final_amount = 5.0
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –º–µ–Ω—å—à–µ $5, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            if final_amount < 5.0:
                return 0.0
            
            return final_amount
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏: {e}")
            return 0.0
    
    def execute_purchase(self, symbol: str, usdt_amount: float, opportunity: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
        try:
            logger.info(f"üõí –ü–æ–∫—É–ø–∫–∞ {symbol} –Ω–∞ ${usdt_amount:.2f} USDT...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = self.mex_api.get_ticker_price(symbol)
            if not ticker or 'price' not in ticker:
                return {'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É'}
            
            current_price = float(ticker['price'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = usdt_amount / current_price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏–º–≤–æ–ª–∞)
            if 'BTC' in symbol:
                quantity = round(quantity, 6)  # 6 –∑–Ω–∞–∫–æ–≤ –¥–ª—è BTC
            elif 'ETH' in symbol:
                quantity = round(quantity, 5)  # 5 –∑–Ω–∞–∫–æ–≤ –¥–ª—è ETH
            else:
                quantity = round(quantity, 4)  # 4 –∑–Ω–∞–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            
            if quantity <= 0:
                return {'success': False, 'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ'}
            
            # –†–∞–∑–º–µ—â–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            order = self.mex_api.place_order(
                symbol=symbol,
                side='BUY',
                quantity=quantity,
                price=None  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            )
            
            if 'orderId' in order:
                logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: {order['orderId']}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = (
                    f"üéØ <b>–£–ú–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n"
                    f"üìà <b>{symbol}</b>\n"
                    f"üí∞ –°—É–º–º–∞: ${usdt_amount:.2f} USDT\n"
                    f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.6f}\n"
                    f"üíµ –¶–µ–Ω–∞: ${current_price:.6f}\n\n"
                    f"üéØ <b>–ê–ù–ê–õ–ò–ó:</b>\n"
                    f"‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {opportunity['confidence']:.1%}\n"
                    f"üìä –°–∫–æ—Ä: {opportunity['score']}\n"
                    f"üîç –ü—Ä–∏—á–∏–Ω—ã: {', '.join(opportunity['reasons'])}\n"
                    f"üõ°Ô∏è –§–∏–ª—å—Ç—Ä: {opportunity['filter_result']['reason']}\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(message)
                
                return {
                    'success': True,
                    'order_id': order['orderId'],
                    'symbol': symbol,
                    'quantity': quantity,
                    'price': current_price,
                    'amount': usdt_amount
                }
            else:
                error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {order}"
                logger.error(error_msg)
                return {'success': False, 'error': error_msg}
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {symbol}: {e}"
            logger.error(error_msg)
            return {'success': False, 'error': error_msg}
    
    async def smart_purchase_cycle(self):
        """–¶–∏–∫–ª —É–º–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å USDT
            usdt_balance = self.get_usdt_balance()
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: ${usdt_balance:.2f}")
            
            if usdt_balance < self.min_usdt_balance:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT: ${usdt_balance:.2f} < ${self.min_usdt_balance}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
            if self.last_purchase_time:
                time_since_last = time.time() - self.last_purchase_time
                if time_since_last < self.min_purchase_interval:
                    remaining = self.min_purchase_interval - time_since_last
                    logger.info(f"‚è∞ –ñ–¥–µ–º {remaining:.0f} —Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏")
                    return
            
            # –ò—â–µ–º –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            opportunities = self.find_best_opportunities()
            
            if not opportunities:
                logger.info("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
            best_opportunity = opportunities[0]
            symbol = best_opportunity['symbol']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
            purchase_amount = self.calculate_purchase_amount(usdt_balance, best_opportunity)
            
            if purchase_amount <= 0:
                logger.info("‚ùå –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            result = self.execute_purchase(symbol, purchase_amount, best_opportunity)
            
            if result['success']:
                self.last_purchase_time = time.time()
                self.total_purchases += 1
                self.total_spent += purchase_amount
                
                logger.info(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {symbol} –Ω–∞ ${purchase_amount:.2f}")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.total_purchases} –ø–æ–∫—É–ø–æ–∫, ${self.total_spent:.2f} –ø–æ—Ç—Ä–∞—á–µ–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {result['error']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ —É–º–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {e}")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è...")
        logger.info(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_usdt_balance}")
        logger.info(f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount}")
        logger.info(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫")
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã: {', '.join(self.trading_pairs)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        startup_message = (
            f"ü§ñ <b>–£–ü–†–û–©–ï–ù–ù–´–ô –ê–í–¢–û–ü–û–ö–£–ü–ê–¢–ï–õ–¨ –ó–ê–ü–£–©–ï–ù</b>\n\n"
            f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_usdt_balance}\n"
            f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: ${self.max_purchase_amount}\n"
            f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {self.check_interval} —Å–µ–∫\n"
            f"üéØ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ + –ê–Ω—Ç–∏-—Ö–∞–π–ø —Ñ–∏–ª—å—Ç—Ä\n"
            f"üìä –ü–∞—Ä—ã: {', '.join(self.trading_pairs)}\n\n"
            f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω..."
        )
        self.send_telegram_message(startup_message)
        
        while True:
            try:
                await self.smart_purchase_cycle()
                await asyncio.sleep(self.check_interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    purchaser = SimpleAutoPurchaser()
    await purchaser.start_monitoring()

if __name__ == "__main__":
    asyncio.run(main()) 