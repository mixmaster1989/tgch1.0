#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—É–º–º–∞—Ö
"""

import time
import logging
from datetime import datetime
from mex_api import MexAPI
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class BalanceSpamFixer:
    def __init__(self):
        self.mex_api = MexAPI()
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {'chat_id': self.chat_id, 'text': message, 'parse_mode': 'HTML'}
        try:
            response = requests.post(url, data=data)
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return None
    
    def get_balances(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã"""
        try:
            account_info = self.mex_api.get_account_info()
            balances = {}
            
            for balance in account_info.get('balances', []):
                asset = balance['asset']
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                
                if total > 0:
                    balances[asset] = {
                        'free': free,
                        'locked': locked,
                        'total': total
                    }
            
            return balances
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            return {}
    
    def analyze_balance_situation(self):
        """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Å –±–∞–ª–∞–Ω—Å–∞–º–∏"""
        balances = self.get_balances()
        
        usdt_balance = balances.get('USDT', {}).get('total', 0)
        usdc_balance = balances.get('USDC', {}).get('total', 0)
        btc_balance = balances.get('BTC', {}).get('total', 0)
        eth_balance = balances.get('ETH', {}).get('total', 0)
        
        total_stablecoins = usdt_balance + usdc_balance
        
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:")
        logger.info(f"   USDT: ${usdt_balance:.2f}")
        logger.info(f"   USDC: ${usdc_balance:.2f}")
        logger.info(f"   BTC: {btc_balance:.6f}")
        logger.info(f"   ETH: {eth_balance:.6f}")
        logger.info(f"   –í—Å–µ–≥–æ —Å—Ç–µ–π–±–ª–æ–≤: ${total_stablecoins:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
        if total_stablecoins < 20:
            logger.warning("‚ö†Ô∏è –û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å—Ç–µ–π–±–ª–æ–≤ —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return "insufficient_total"
        
        if usdc_balance < 12:
            logger.warning("‚ö†Ô∏è USDC –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC")
            return "insufficient_usdc"
        
        if usdt_balance < 5:
            logger.warning("‚ö†Ô∏è USDT –±–∞–ª–∞–Ω—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ETH")
            return "insufficient_usdt"
        
        return "ok"
    
    def send_fix_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        message = (
            "<b>üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ü–ê–ú–ê –°–û–û–ë–©–ï–ù–ò–ô</b>\n\n"
            "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º\n"
            "‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "üìä –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞:\n"
            "‚Ä¢ –ù–µ –±—É–¥–µ—Ç —Å–ø–∞–º–∏—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
            "‚Ä¢ –ë—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å –æ–¥–∏–Ω –∞–∫—Ç–∏–≤ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç –º–∏–Ω–∏–º—É–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏\n\n"
            "‚è∞ –í—Ä–µ–º—è: " + datetime.now().strftime('%H:%M:%S')
        )
        
        self.send_telegram_message(message)
    
    def run_fix(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
        logger.info("üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∞–º–æ–º...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
        situation = self.analyze_balance_situation()
        
        if situation == "ok":
            logger.info("‚úÖ –ë–∞–ª–∞–Ω—Å—ã –≤ –Ω–æ—Ä–º–µ, –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤ –ª–æ–≥–∏–∫–µ")
        else:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {situation}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        self.send_fix_notification()
        
        logger.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    fixer = BalanceSpamFixer()
    fixer.run_fix()

if __name__ == "__main__":
    main() 