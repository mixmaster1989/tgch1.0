#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö ETH –∏–∑ ComprehensiveDataManager
"""

import asyncio
import signal
import sys
from datetime import datetime
from comprehensive_data_manager import ComprehensiveDataManager

class TimeoutError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞"""
    pass

async def check_eth_comprehensive(max_iterations: int = 10, data_collection_time: int = 15, timeout: int = 60):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö ETH –∏–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    
    Args:
        max_iterations: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        data_collection_time: –í—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        timeout: –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    data_manager = None
    callback_count = 0  # –°—á–µ—Ç—á–∏–∫ callback'–æ–≤
    
    def timeout_handler():
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞"""
        print(f"\n‚è∞ –¢–ê–ô–ú–ê–£–¢: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ({timeout} —Å–µ–∫)")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ callback'–æ–≤: {callback_count}")
        # –ù–µ —Å–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –≤ finally
    
    try:
        print("üîç –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –î–ê–ù–ù–´–• ETH")
        print("=" * 60)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print(f"–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}")
        print(f"–í—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {data_collection_time} —Å–µ–∫")
        print(f"–û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç: {timeout} —Å–µ–∫")
        print()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        timer = asyncio.create_task(asyncio.sleep(timeout))
        timer.add_done_callback(lambda _: timeout_handler())
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        data_manager = ComprehensiveDataManager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await data_manager.start()
        
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ ETH
        print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ETHUSDT...")
        await data_manager.subscribe_multiple_symbols(["ETHUSDT"])
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print(f"‚è≥ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ETH ({data_collection_time} —Å–µ–∫—É–Ω–¥)...")
        print("   (Callback'—ã –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ callback'–æ–≤
        async def monitor_callbacks():
            nonlocal callback_count
            while data_manager and data_manager.is_running:
                await asyncio.sleep(1)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥—Å—á–µ—Ç–∞ callback'–æ–≤
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
        
        monitor_task = asyncio.create_task(monitor_callbacks())
        
        await asyncio.sleep(data_collection_time)
        
        # –û—Ç–º–µ–Ω—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_task.cancel()
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
        timer.cancel()
        
        print(f"\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Ä–µ–º—è: {datetime.now()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï ETH:")
        print("-" * 40)
        market_data = data_manager.get_market_data("ETHUSDT")
        if market_data:
            print(f"   –¶–µ–Ω–∞: ${market_data.price:.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {market_data.change_24h:.2f}%")
            print(f"   –û–±—ä–µ–º 24—á: {market_data.volume_24h:.2f}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º 24—á: ${market_data.high_24h:.2f}")
            print(f"   –ú–∏–Ω–∏–º—É–º 24—á: ${market_data.low_24h:.2f}")
        else:
            print("   ‚ùå –ù–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("\nüìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ETH:")
        print("-" * 40)
        indicators = data_manager.get_technical_indicators("ETHUSDT", "1m")
        if indicators:
            print(f"   RSI (14): {indicators.rsi_14:.2f}")
            print(f"   SMA (20): ${indicators.sma_20:.2f}")
            print(f"   EMA (12): ${indicators.ema_12:.2f}")
            print(f"   ATR (14): {indicators.atr_14:.4f}")
            print(f"   Volume SMA: {indicators.volume_sma:.2f}")
            
            # MACD
            if indicators.macd:
                if isinstance(indicators.macd, dict):
                    print(f"   MACD: {indicators.macd}")
                else:
                    print(f"   MACD: {indicators.macd:.4f}")
            else:
                print("   MACD: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # Bollinger Bands
            if indicators.bollinger:
                print(f"   Bollinger: {indicators.bollinger}")
            else:
                print("   Bollinger: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        else:
            print("   ‚ùå –ù–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–¥–µ—Ä–±—É–∫
        print("\nüìö ORDER BOOK ETH:")
        print("-" * 40)
        orderbook = data_manager.get_orderbook_data("ETHUSDT")
        if orderbook:
            print(f"   –°–ø—Ä–µ–¥: ${orderbook.spread:.4f} ({orderbook.spread_percent:.4f}%)")
            print(f"   Bid –æ–±—ä–µ–º: {orderbook.bid_volume:.2f}")
            print(f"   Ask –æ–±—ä–µ–º: {orderbook.ask_volume:.2f}")
            print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {orderbook.volume_ratio:.2f}")
            print(f"   –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {orderbook.liquidity_score:.2f}")
            
            if orderbook.bids and orderbook.asks:
                print(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${orderbook.bids[0][0]:.2f} ({orderbook.bids[0][1]:.4f})")
                print(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${orderbook.asks[0][0]:.2f} ({orderbook.asks[0][1]:.4f})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —É—Ä–æ–≤–Ω–µ–π
                print("\n   –¢–æ–ø-5 –ø–æ–∫—É–ø–æ–∫:")
                for i, bid in enumerate(orderbook.bids[:5]):
                    print(f"     {i+1}. ${bid[0]:.2f} - {bid[1]:.4f}")
                
                print("\n   –¢–æ–ø-5 –ø—Ä–æ–¥–∞–∂:")
                for i, ask in enumerate(orderbook.asks[:5]):
                    print(f"     {i+1}. ${ask[0]:.2f} - {ask[1]:.4f}")
        else:
            print("   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–±—É–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        print("\nüí± –ò–°–¢–û–†–ò–Ø –°–î–ï–õ–û–ö ETH:")
        print("-" * 40)
        trade_history = data_manager.get_trade_history("ETHUSDT")
        if trade_history:
            print(f"   –ü–æ–∫—É–ø–∫–∏: {trade_history.buy_volume:.4f}")
            print(f"   –ü—Ä–æ–¥–∞–∂–∏: {trade_history.sell_volume:.4f}")
            print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {trade_history.volume_ratio:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {trade_history.avg_trade_size:.4f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {len(trade_history.trades)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            if trade_history.trades:
                print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:")
                for i, trade in enumerate(trade_history.trades[-5:]):
                    side_emoji = "üü¢" if trade.get('side') == 'BUY' else "üî¥"
                    print(f"     {side_emoji} ${trade.get('price', 0):.2f} - {trade.get('quantity', 0):.4f}")
        else:
            print("   ‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        print("\nüîó –ö–û–†–†–ï–õ–Ø–¶–ò–ò ETH:")
        print("-" * 40)
        correlations = data_manager.get_correlation_data("ETHUSDT")
        if correlations:
            print(f"   BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlations.get('btc_correlation', 0):.4f}")
            print(f"   ETH –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlations.get('eth_correlation', 0):.4f}")
            print(f"   –†–∞–Ω–≥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {correlations.get('volatility_rank', 0)}")
            print(f"   –°–∏–ª–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {correlations.get('correlation_strength', 'unknown')}")
        else:
            print("   ‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        print("\nüì∞ –ù–û–í–û–°–¢–ò ETH:")
        print("-" * 40)
        news_data = data_manager.get_news_data("ETHUSDT")
        if news_data:
            print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {news_data.get('sentiment', 'unknown')}")
            print(f"   –í–ª–∏—è–Ω–∏–µ: {news_data.get('impact_score', 0):.2f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_data.get('news', []))}")
        else:
            print("   ‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã–µ
        print("\n‚è∞ –ú–£–õ–¨–¢–ò–¢–ê–ô–ú–§–†–ï–ô–ú –î–ê–ù–ù–´–ï ETH:")
        print("-" * 40)
        multitimeframe = data_manager.get_multitimeframe_data("ETHUSDT")
        if multitimeframe:
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: {list(multitimeframe.timeframes.keys())}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {list(multitimeframe.indicators.keys())}")
        else:
            print("   ‚ùå –ù–µ—Ç –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö")
        
        print("\n" + "=" * 60)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ ETH –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await data_manager.stop()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except asyncio.CancelledError:
        print("\n‚èπÔ∏è –°–∫—Ä–∏–ø—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        try:
            if data_manager:
                await data_manager.stop()
        except:
            pass

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    sys.exit(0)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
    asyncio.run(check_eth_comprehensive(
        max_iterations=5, 
        data_collection_time=15,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        timeout=90  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 90 —Å–µ–∫—É–Ω–¥
    )) 