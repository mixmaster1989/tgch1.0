import asyncio
import os
import logging
from aiogram import Bot, Dispatcher
from handlers import register_handlers, set_bot
from handlers_promotion import register_promotion_handlers
from crypto import register_crypto_handlers
from crypto.main_menu import register_crypto_menu_handlers
from aiogram.filters import Command  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Command –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
from aiogram.types import Message  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π 'types' –∏–∑ –∏–º–ø–æ—Ä—Ç–∞
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key, value in os.environ.items():
        if "TOKEN" in key:
            print(f"{key}: {value[:5]}...")
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN=your_token")

print(f"–¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {TOKEN[:5]}...")

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ handlers –∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    set_bot(bot)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_handlers(dp)
    register_promotion_handlers(dp)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    from crypto.handlers import register_crypto_handlers
    from crypto.main_menu import register_crypto_menu_handlers

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    register_crypto_handlers(dp)
    register_crypto_menu_handlers(dp)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /crypto
    @dp.message(Command("crypto"))
    async def crypto_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
        from crypto.handlers import cmd_crypto_mode
        await cmd_crypto_mode(message)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /crypto_mode
    @dp.message(Command("crypto_mode"))
    async def crypto_mode_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crypto_mode –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
        from crypto.handlers import cmd_crypto_mode
        await cmd_crypto_mode(message)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "ü™ô –ö—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—å"
    @dp.message(F.text == "ü™ô –ö—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—å")
    async def crypto_module(message: Message):
        """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
        from crypto.handlers import cmd_crypto_mode
        await cmd_crypto_mode(message)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    register_crypto_handlers(dp)
    register_crypto_menu_handlers(dp)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–º–æ–¥—É–ª—è
    from crypto.handlers import set_bot as crypto_set_bot
    from crypto.main_menu import set_bot as crypto_menu_set_bot
    from crypto.signal_dispatcher import SignalDispatcher

    crypto_set_bot(bot)
    crypto_menu_set_bot(bot)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    signal_dispatcher = SignalDispatcher()
    signal_dispatcher.set_bot(bot)
    await signal_dispatcher.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    from crypto.data_sources.crypto_data_manager import get_data_manager
    data_manager = get_data_manager()
    await data_manager.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    from crypto.notification.alert_service import AlertService
    alert_service = AlertService()
    alert_service.set_bot(bot)
    asyncio.create_task(alert_service.start_monitoring())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger = logging.getLogger(__name__)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", exc_info=True)
