#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MEXC Trading Bot
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö: WebSocket, REST API, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import ssl
import json
import time
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from enum import Enum
from dataclasses import dataclass
import logging
import random
from decimal import Decimal
import math

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from mexc_websocket_client import MEXCWebSocketClient, StreamType, OrderBook
from mex_api import MexAPI
# from perplexity_analyzer import PerplexityAnalyzer  # –£–±—Ä–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
from technical_indicators import TechnicalIndicators
from correlation_analyzer import CorrelationAnalyzer
from advanced_correlation_analyzer import advanced_correlation_analyzer
from cache.redis_manager import RedisCacheManager
from database.connection import DatabaseConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DataSource(Enum):
    WEBSOCKET = "websocket"
    REST_API = "rest_api"
    # PERPLEXITY = "perplexity"  # –£–±—Ä–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    CALCULATED = "calculated"

@dataclass
class MarketData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    price: float
    change_24h: float
    volume_24h: float
    quote_volume_24h: float
    high_24h: float
    low_24h: float
    timestamp: datetime
    source: DataSource

@dataclass
class KlineData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏"""
    symbol: str
    interval: str
    open: float
    high: float
    low: float
    close: float
    volume: float
    timestamp: int
    source: DataSource
    
    def to_dict(self) -> Dict:
        return {
            'symbol': self.symbol,
            'interval': self.interval,
            'open': self.open,
            'high': self.high,
            'low': self.low,
            'close': self.close,
            'volume': self.volume,
            'timestamp': self.timestamp,
            'source': self.source.value
        }

@dataclass
class AccountData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
    balances: Dict[str, float]
    positions: List[Dict]
    open_orders: List[Dict]
    total_usdt: float
    timestamp: datetime
    source: DataSource

@dataclass
class NewsData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    news: List[Dict]
    sentiment: str
    impact_score: float
    timestamp: datetime
    source: DataSource

@dataclass
class TechnicalIndicatorsData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    symbol: str
    rsi_14: float
    sma_20: float
    ema_12: float
    macd: Dict
    bollinger: Dict
    atr_14: float
    volume_sma: float
    signals: Dict
    timestamp: datetime
    source: DataSource
    
    def to_dict(self) -> Dict:
        return {
            'symbol': self.symbol,
            'rsi_14': self.rsi_14,
            'sma_20': self.sma_20,
            'ema_12': self.ema_12,
            'macd': self.macd,
            'bollinger': self.bollinger,
            'atr_14': self.atr_14,
            'volume_sma': self.volume_sma,
            'signals': self.signals,
            'timestamp': self.timestamp.isoformat(),
            'source': self.source.value
        }

@dataclass
class MultiTimeframeData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö"""
    symbol: str
    timeframes: Dict[str, List[KlineData]]  # interval -> klines
    indicators: Dict[str, TechnicalIndicatorsData]  # interval -> indicators
    timestamp: datetime
    source: DataSource

@dataclass
class OrderBookData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
    symbol: str
    bids: List[List[float]]  # [price, quantity]
    asks: List[List[float]]  # [price, quantity]
    spread: float
    spread_percent: float
    bid_volume: float
    ask_volume: float
    volume_ratio: float
    liquidity_score: float
    timestamp: datetime
    source: DataSource
    
    def to_dict(self) -> Dict:
        return {
            'symbol': self.symbol,
            'bids': self.bids,
            'asks': self.asks,
            'spread': self.spread,
            'spread_percent': self.spread_percent,
            'bid_volume': self.bid_volume,
            'ask_volume': self.ask_volume,
            'volume_ratio': self.volume_ratio,
            'liquidity_score': self.liquidity_score,
            'timestamp': self.timestamp.isoformat(),
            'source': self.source.value
        }

@dataclass
class TradeData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏"""
    symbol: str
    price: float
    quantity: float
    side: str  # 'BUY' –∏–ª–∏ 'SELL'
    timestamp: int
    source: DataSource
    
    def to_dict(self) -> Dict:
        return {
            'symbol': self.symbol,
            'price': self.price,
            'quantity': self.quantity,
            'side': self.side,
            'timestamp': self.timestamp,
            'source': self.source.value
        }

@dataclass
class TradeHistoryData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    symbol: str
    trades: List[Dict]
    buy_volume: float
    sell_volume: float
    volume_ratio: float
    avg_trade_size: float
    timestamp: datetime
    source: DataSource
    
    def to_dict(self) -> Dict:
        return {
            'symbol': self.symbol,
            'trades': self.trades,
            'buy_volume': self.buy_volume,
            'sell_volume': self.sell_volume,
            'volume_ratio': self.volume_ratio,
            'avg_trade_size': self.avg_trade_size,
            'timestamp': self.timestamp.isoformat(),
            'source': self.source.value
        }

class ComprehensiveDataManager:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.rest_api = MexAPI()
        self.mex_api = self.rest_api  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.websocket_client = MEXCWebSocketClient()
        # self.perplexity = PerplexityAnalyzer()  # –£–±—Ä–∞–Ω–æ - –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        self.technical_indicators = TechnicalIndicators()
        self.correlation_analyzer = CorrelationAnalyzer()
        self.redis_cache = RedisCacheManager()
        self.postgres_db = DatabaseConnection()
        
        # –ö—ç—à–∏ –¥–∞–Ω–Ω—ã—Ö
        self.market_cache = {}  # symbol -> MarketData
        self.kline_cache = {}   # (symbol, interval) -> List[KlineData]
        self.orderbook_cache = {}  # symbol -> OrderBookData
        self.trade_history_cache = {}  # symbol -> List[TradeData]
        self.multitimeframe_cache = {}  # symbol -> MultiTimeframeData
        
        # Callbacks
        self.market_callbacks = []
        self.account_callbacks = []
        self.news_callbacks = []
        self.orderbook_callbacks = []
        self.trade_callbacks = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.tasks = []
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        self.data_log_file = "market_data_log.txt"
        self.data_log_enabled = True
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (—É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ)
        # self.correlation_analyzer = CorrelationAnalyzer()  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            # Redis –∏ PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            
            # –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞
            await self.websocket_client.connect()
            
            # –ö–†–ò–¢–ò–ß–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            await self._load_historical_data_for_correlations()
            
            # üîç –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∏—Ö
            account_symbols = self._get_account_symbols()
            print(f"üìä –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ {len(account_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: {', '.join(account_symbols)}")
            await self.subscribe_multiple_symbols(account_symbols)
            
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–ª—É—à–∞—Ç–µ–ª—å
            asyncio.create_task(self.websocket_client.listen())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.tasks = [
                asyncio.create_task(self._websocket_handler()),
                asyncio.create_task(self._market_data_loop()),
                asyncio.create_task(self._klines_data_loop()),
                asyncio.create_task(self._account_data_loop()),
                # asyncio.create_task(self._news_data_loop()),  # –û–¢–ö–õ–Æ–ß–ï–ù–û: Perplexity —É–±—Ä–∞–Ω
                # asyncio.create_task(self._correlation_data_loop())  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –¶–∏–∫–ª –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            ]
            
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("manager_start", {
                'status': 'started',
                'symbols_count': len(account_symbols),
                'symbols': account_symbols,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("manager_start_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            if hasattr(self, 'tasks') and self.tasks:
                print(f"   –û—Ç–º–µ–Ω–∞ {len(self.tasks)} –∑–∞–¥–∞—á...")
                for task in self.tasks:
                    if not task.done():
                        task.cancel()
                        try:
                            await task
                        except asyncio.CancelledError:
                            pass
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if hasattr(self, 'websocket_client') and self.websocket_client:
                print("   –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket...")
                await self.websocket_client.disconnect()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
            if hasattr(self, 'postgres_db') and self.postgres_db:
                print("   –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î...")
                self.postgres_db.close_connections()
            
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("manager_stop", {
                'status': 'stopped',
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("manager_stop_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            import traceback
            traceback.print_exc()
    
    async def _websocket_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.is_running:
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ WebSocket handler: {e}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É WebSocket –≤ —Ñ–∞–π–ª
                self._log_data_to_file("websocket_error", {
                    'error': str(e),
                    'timestamp': datetime.now().isoformat()
                })
                
                await asyncio.sleep(5)
    
    def _get_account_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ø–æ–∑–∏—Ü–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_info = self.rest_api.get_account_info()
            if not account_info:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
                return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 'BNBUSDT']
            
            symbols = set()
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã (—Å–ø–æ—Ç)
            for balance in account_info.get('balances', []):
                asset = balance.get('asset', '')
                free = float(balance.get('free', 0))
                locked = float(balance.get('locked', 0))
                total = free + locked
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤—ã —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º (–∏—Å–∫–ª—é—á–∞–µ–º USDT/USDC)
                if total > 0 and asset not in ['USDT', 'USDC']:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
                    symbol = f"{asset}USDT"
                    symbols.add(symbol)
                    print(f"   üí∞ {asset}: {total:.6f} -> {symbol}")
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            for position in account_info.get('positions', []):
                symbol = position.get('symbol', '')
                position_amt = float(position.get('positionAmt', 0))
                if symbol and position_amt != 0:
                    symbols.add(symbol)
                    print(f"   üìà –§—å—é—á–µ—Ä—Å {symbol}: {position_amt:.6f}")
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
            for order in account_info.get('openOrders', []):
                symbol = order.get('symbol', '')
                side = order.get('side', '')
                quantity = float(order.get('origQty', 0))
                if symbol and quantity > 0:
                    symbols.add(symbol)
                    print(f"   üìã –û—Ä–¥–µ—Ä {symbol} {side}: {quantity:.6f}")
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            if not symbols:
                print("‚ö†Ô∏è –í –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
                return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 'BNBUSDT']
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            symbol_list = sorted(list(symbols))
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(symbol_list)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ: {', '.join(symbol_list)}")
            
            return symbol_list
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
            return ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 'BNBUSDT']

    def _show_portfolio_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            portfolio = self.get_portfolio_summary()
            if not portfolio:
                return
            
            print("\n" + "="*60)
            print("üìä –°–í–û–î–ö–ê –ü–û–†–¢–§–ï–õ–Ø")
            print("="*60)
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${portfolio['total_usdt']:.2f}")
            print(f"üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(portfolio['active_symbols'])}")
            
            if portfolio['asset_values']:
                print("\nüíé –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤:")
                for asset, value in portfolio['asset_values'].items():
                    if value > 0:
                        print(f"   {asset}: ${value:.2f}")
            
            if portfolio['positions']:
                print(f"\nüìà –§—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏: {len(portfolio['positions'])}")
            
            if portfolio['open_orders']:
                print(f"üìã –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞: {len(portfolio['open_orders'])}")
            
            print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {portfolio['timestamp']}")
            print("="*60)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ñ–∞–π–ª
            self._log_data_to_file("portfolio_summary", {
                'total_usdt': portfolio['total_usdt'],
                'active_symbols_count': len(portfolio['active_symbols']),
                'positions_count': len(portfolio['positions']),
                'open_orders_count': len(portfolio['open_orders']),
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    async def _market_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ REST API"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                symbols = self._get_account_symbols()
                
                for symbol in symbols:
                    try:
                        ticker_data = self.rest_api.get_ticker_price(symbol)
                        if ticker_data and isinstance(ticker_data, dict) and 'price' in ticker_data:
                            price = float(ticker_data['price'])
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                            market_data = MarketData(
                                symbol=symbol,
                                price=price,
                                change_24h=0.0,
                                volume_24h=0.0,
                                quote_volume_24h=0.0,
                                high_24h=price,
                                low_24h=price,
                                timestamp=datetime.now(),
                                source=DataSource.REST_API
                            )
                            self.market_cache[symbol] = market_data
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                            self._log_data_to_file("market_data", {
                                'symbol': symbol,
                                'price': price,
                                'timestamp': datetime.now().isoformat()
                            })
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
                            timestamp_ms = int(datetime.now().timestamp() * 1000)
                            self.save_price_to_db(symbol, price, timestamp_ms)
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                            from correlation_analyzer import add_price_to_correlation_analyzer
                            add_price_to_correlation_analyzer(symbol, price, timestamp_ms)
                            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                            print(f"üí∞ REST: {symbol} = ${price}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞ –¥–ª—è {symbol}: {e}")
                        continue

                # –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                await self._fetch_other_assets_data()
                
                await asyncio.sleep(30)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ market data loop: {e}")
                await asyncio.sleep(60)
    
    async def _klines_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                symbols = self._get_account_symbols()
                
                for symbol in symbols:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    klines = self.rest_api.get_klines(symbol, '1m', limit=60)
                    
                    if isinstance(klines, list):
                        kline_data = []
                        for kline in klines:
                            kline_data.append(KlineData(
                                symbol=symbol,
                                interval='1m',
                                open=float(kline[1]),
                                high=float(kline[2]),
                                low=float(kline[3]),
                                close=float(kline[4]),
                                volume=float(kline[5]),
                                timestamp=int(kline[0]),
                                source=DataSource.REST_API
                            ))
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                        self.kline_cache[(symbol, '1m')] = kline_data
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –≤ —Ñ–∞–π–ª
                        self._log_data_to_file("klines", {
                            'symbol': symbol,
                            'interval': '1m',
                            'count': len(kline_data),
                            'last_close': kline_data[-1].close if kline_data else 0,
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        await self._calculate_technical_indicators(symbol, '1m')
                
                await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ klines data loop: {e}")
                await asyncio.sleep(60)
    
    async def _account_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                account_info = self.rest_api.get_account_info()
                
                if account_info:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                    balances = {}
                    total_usdt = 0.0
                    
                    for balance in account_info.get('balances', []):
                        asset = balance.get('asset', '')
                        free = float(balance.get('free', 0))
                        locked = float(balance.get('locked', 0))
                        total = free + locked
                        
                        if total > 0:
                            balances[asset] = total
                            if asset == 'USDT':
                                total_usdt = total
                    
                    # –°–æ–∑–¥–∞–µ–º AccountData
                    account_data = AccountData(
                        balances=balances,
                        positions=account_info.get('positions', []),
                        open_orders=account_info.get('openOrders', []),
                        total_usdt=total_usdt,
                        timestamp=datetime.now(),
                        source=DataSource.REST_API
                    )
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–∞–π–ª
                    self._log_data_to_file("account", {
                        'balances': balances,
                        'total_usdt': total_usdt,
                        'positions_count': len(account_info.get('positions', [])),
                        'open_orders_count': len(account_info.get('openOrders', [])),
                        'timestamp': datetime.now().isoformat()
                    })
                    
                    # üîç –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
                    current_symbols = self._get_account_symbols()
                    if not hasattr(self, '_last_account_symbols'):
                        self._last_account_symbols = set()
                    
                    if set(current_symbols) != self._last_account_symbols:
                        print(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ!")
                        print(f"   –ë—ã–ª–æ: {', '.join(sorted(self._last_account_symbols)) if self._last_account_symbols else '–ø—É—Å—Ç–æ'}")
                        print(f"   –°—Ç–∞–ª–æ: {', '.join(sorted(current_symbols))}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                        await self.subscribe_multiple_symbols(current_symbols)
                        self._last_account_symbols = set(current_symbols)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º callbacks
                    for callback in self.account_callbacks:
                        try:
                            await callback(account_data)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –≤ account callback: {e}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    if hasattr(self, '_last_portfolio_log') and (datetime.now() - self._last_portfolio_log).seconds > 300:
                        self._show_portfolio_summary()
                        self._last_portfolio_log = datetime.now()
                    elif not hasattr(self, '_last_portfolio_log'):
                        self._last_portfolio_log = datetime.now()
                        self._show_portfolio_summary()
                
                await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ account data loop: {e}")
                await asyncio.sleep(60)
    
    async def _news_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                symbols = self._get_account_symbols()
                
                # –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã - —É–±—Ä–∞–Ω –ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å Perplexity
                # for symbol in symbols:
                #     # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Perplexity
                #     news_data = await self.perplexity.get_comprehensive_analysis(symbol)
                #     
                #     if news_data:
                #         # –°–æ–∑–¥–∞–µ–º NewsData
                #         news_obj = NewsData(
                #             symbol=symbol,
                #             news=news_data.get('news', []),
                #             sentiment=news_data.get('sentiment', 'neutral'),
                #             impact_score=news_data.get('impact_score', 0.0),
                #             timestamp=datetime.now(),
                #             source=DataSource.PERPLEXITY
                #         )
                #         
                #         # –í—ã–∑—ã–≤–∞–µ–º callbacks
                #         for callback in self.news_callbacks:
                #             try:
                #                 await callback(news_obj)
                #             except Exception as e:
                #                 print(f"–û—à–∏–±–∫–∞ –≤ news callback: {e}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ —Ñ–∞–π–ª
                self._log_data_to_file("news_cycle", {
                    'symbols_count': len(symbols),
                    'status': 'news_disabled',
                    'timestamp': datetime.now().isoformat()
                })
                
                await asyncio.sleep(300)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ news data loop: {e}")
                await asyncio.sleep(300)

    async def _correlation_data_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                await self._fetch_other_assets_data()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(5)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è ETH
                correlation_data = self.get_correlation_data('ETHUSDT')
                if correlation_data:
                    print("\n" + "="*50)
                    print("üìä –¢–ï–ö–£–©–ò–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò ETH:")
                    print("="*50)
                    
                    # –í—ã–≤–æ–¥–∏–º –±–∞–∑–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                    if 'basic_correlations' in correlation_data:
                        print("üîó –ë–ê–ó–û–í–´–ï –ö–û–†–†–ï–õ–Ø–¶–ò–ò:")
                        for asset, corr_info in correlation_data['basic_correlations'].items():
                            if isinstance(corr_info, dict) and 'correlation' in corr_info:
                                corr_value = corr_info['correlation']
                                strength = corr_info.get('strength', 'unknown')
                                direction = corr_info.get('direction', 'unknown')
                                print(f"   {asset}: {corr_value:.4f} ({strength}, {direction})")
                    
                    # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
                    if hasattr(advanced_correlation_analyzer, 'price_data'):
                        total_points = sum(len(prices) for prices in advanced_correlation_analyzer.price_data.values())
                        print(f"\nüìà –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_points}")
                        for asset, prices in advanced_correlation_analyzer.price_data.items():
                            print(f"   {asset}: {len(prices)} —Ç–æ—á–µ–∫")
                    
                    print("="*50 + "\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ —Ñ–∞–π–ª
                if correlation_data:
                    self._log_data_to_file("correlation_cycle", {
                        'symbol': 'ETHUSDT',
                        'basic_correlations_count': len(correlation_data.get('basic_correlations', {})),
                        'total_data_points': total_points if 'total_points' in locals() else 0,
                        'timestamp': datetime.now().isoformat()
                    })
                
                await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ correlation data loop: {e}")
                await asyncio.sleep(60)
    
    def _log_data_to_file(self, data_type: str, data: Dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"""
        if not self.data_log_enabled:
            return
            
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            with open(self.data_log_file, 'a', encoding='utf-8') as f:
                f.write(f"\n{'='*60}\n")
                f.write(f"–¢–ò–ü –î–ê–ù–ù–´–•: {data_type}\n")
                f.write(f"–í–†–ï–ú–Ø: {timestamp}\n")
                f.write(f"{'='*60}\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if isinstance(data, dict):
                    for key, value in data.items():
                        if isinstance(value, (dict, list)):
                            f.write(f"{key}:\n{json.dumps(value, indent=2, ensure_ascii=False)}\n")
                        else:
                            f.write(f"{key}: {value}\n")
                else:
                    f.write(f"–î–∞–Ω–Ω—ã–µ: {data}\n")
                    
                f.write(f"{'='*60}\n")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª: {e}")
    
    def _calculate_impact_score(self, news_data: Dict) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è
            sentiment = news_data.get('sentiment', 'neutral')
            if sentiment == 'positive':
                return 0.7
            elif sentiment == 'negative':
                return -0.7
            else:
                return 0.0
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è impact score: {e}")
            return 0.0
    
    def get_market_data(self, symbol: str = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if symbol:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ REST API
            if symbol not in self.market_cache or not self.market_cache[symbol]:
                try:
                    ticker_data = self.rest_api.get_24hr_ticker(symbol)
                    if ticker_data and isinstance(ticker_data, dict):
                        market_data = MarketData(
                            symbol=symbol,
                            price=float(ticker_data.get('lastPrice', 0)),
                            change_24h=float(ticker_data.get('priceChangePercent', 0)),
                            volume_24h=float(ticker_data.get('volume', 0)),
                            quote_volume_24h=float(ticker_data.get('quoteVolume', 0)),
                            high_24h=float(ticker_data.get('highPrice', 0)),
                            low_24h=float(ticker_data.get('lowPrice', 0)),
                            timestamp=datetime.now(),
                            source=DataSource.REST_API
                        )
                        self.market_cache[symbol] = market_data
                        return market_data
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return self.market_cache.get(symbol)
        return self.market_cache
    
    def get_account_data(self) -> Optional[AccountData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        return None
    
    def get_news_data(self, symbol: str = None) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        return {}
    
    def get_kline_data(self, symbol: str, interval: str = '1h') -> Optional[KlineData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        return self.kline_cache.get((symbol, interval))
    
    def subscribe_market_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.market_callbacks.append(callback)
    
    def subscribe_account_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.account_callbacks.append(callback)
    
    def subscribe_news_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        self.news_callbacks.append(callback)
    
    def subscribe_indicators_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        pass
    
    def get_multitimeframe_data(self, symbol: str) -> Optional[MultiTimeframeData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–∞–Ω–Ω—ã—Ö"""
        return self.multitimeframe_cache.get(symbol)
    
    def get_technical_indicators(self, symbol: str, interval: str = '1h') -> Optional[TechnicalIndicatorsData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        multitimeframe = self.get_multitimeframe_data(symbol)
        if multitimeframe:
            return multitimeframe.indicators.get(interval)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–≤–µ—á–∏
        klines = self.kline_cache.get((symbol, interval), [])
        if len(klines) < 20:
            print(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval}): {len(klines)}/20")
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            return None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ—á–∏, –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            klines = self.kline_cache.get((symbol, interval), [])
            if len(klines) < 20:
                return None
                
            klines_data = [[kline.timestamp, kline.open, kline.high, kline.low, kline.close, kline.volume] for kline in klines]
            indicators = self.technical_indicators.calculate_all_indicators(klines_data, symbol)
            
            if not indicators:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            rsi_14 = indicators.get('rsi_14', 50.0)
            sma_20 = indicators.get('sma_20', 0.0)
            ema_12 = indicators.get('ema_12', 0.0)
            macd = indicators.get('macd', {})
            bollinger = indicators.get('bollinger', {})
            atr_14 = indicators.get('atr_14', 0.0)
            volume_sma = indicators.get('volume_sma', 0.0)
            
            # –°–æ–∑–¥–∞–µ–º TechnicalIndicatorsData
            indicators_data = TechnicalIndicatorsData(
                symbol=symbol,
                rsi_14=rsi_14,
                sma_20=sma_20,
                ema_12=ema_12,
                macd=macd,
                bollinger=bollinger,
                atr_14=atr_14,
                volume_sma=volume_sma,
                signals={},
                timestamp=datetime.now(),
                source=DataSource.CALCULATED
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º –∫—ç—à
            if symbol not in self.multitimeframe_cache:
                self.multitimeframe_cache[symbol] = MultiTimeframeData(
                    symbol=symbol,
                    timeframes={},
                    indicators={},
                    timestamp=datetime.now(),
                    source=DataSource.CALCULATED
                )
            
            self.multitimeframe_cache[symbol].timeframes[interval] = klines
            self.multitimeframe_cache[symbol].indicators[interval] = indicators_data
            self.multitimeframe_cache[symbol].timestamp = datetime.now()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ —Ñ–∞–π–ª
            self._log_data_to_file("technical_indicators", {
                'symbol': symbol,
                'interval': interval,
                'rsi_14': rsi_14,
                'sma_20': sma_20,
                'ema_12': ema_12,
                'atr_14': atr_14,
                'volume_sma': volume_sma,
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"üìà –í—ã—á–∏—Å–ª–µ–Ω—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è {symbol} ({interval})")
            return indicators_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            return None
    
    def get_correlation_data(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            return advanced_correlation_analyzer.get_comprehensive_correlation_analysis(symbol)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è {symbol}: {e}")
            return {}
    
    def _process_orderbook_data(self, symbol: str, depth_data: Dict) -> Optional[OrderBookData]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            bids = depth_data.get('bids', [])
            asks = depth_data.get('asks', [])
            
            if not bids or not asks:
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥
            best_bid = float(bids[0][0])
            best_ask = float(asks[0][0])
            spread = best_ask - best_bid
            spread_percent = (spread / best_bid) * 100
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—ä–µ–º—ã
            bid_volume = sum(float(bid[1]) for bid in bids[:10])
            ask_volume = sum(float(ask[1]) for ask in asks[:10])
            volume_ratio = bid_volume / ask_volume if ask_volume > 0 else 1.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            liquidity_score = min(1.0, (bid_volume + ask_volume) / 1000)
            
            return OrderBookData(
                symbol=symbol,
                bids=bids[:10],
                asks=asks[:10],
                spread=spread,
                spread_percent=spread_percent,
                bid_volume=bid_volume,
                ask_volume=ask_volume,
                volume_ratio=volume_ratio,
                liquidity_score=liquidity_score,
                timestamp=datetime.now(),
                source=DataSource.WEBSOCKET
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è {symbol}: {e}")
            return None
    
    def _process_trade_data(self, symbol: str, trade_data: Dict) -> Optional[TradeData]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∫–∏"""
        try:
            return TradeData(
                symbol=symbol,
                price=float(trade_data.get('price', 0)),
                quantity=float(trade_data.get('quantity', 0)),
                side=trade_data.get('side', 'BUY'),
                timestamp=int(trade_data.get('timestamp', 0)),
                source=DataSource.WEBSOCKET
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è {symbol}: {e}")
            return None
    
    async def get_orderbook_data(self, symbol: str) -> Optional[OrderBookData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–±—É–∫–∞ —Å fallback –Ω–∞ REST API"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –∫—ç—à–∞
        orderbook = self.orderbook_cache.get(symbol)
        if orderbook:
            return orderbook
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ REST API
        try:
            print(f"üîÑ Orderbook –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º REST API...")
            import asyncio
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            async def fetch_orderbook():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º orderbook —á–µ—Ä–µ–∑ REST API
                    depth_data = self.mex_api.get_depth(symbol, limit=10)
                    if depth_data and 'bids' in depth_data and 'asks' in depth_data:
                        bids = depth_data['bids'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ø 10
                        asks = depth_data['asks'][:10]
                        
                        if bids and asks:
                            best_bid = float(bids[0][0])
                            best_ask = float(asks[0][0])
                            
                            orderbook_data = OrderBookData(
                                symbol=symbol,
                                bids=[[float(price), float(qty)] for price, qty in bids],
                                asks=[[float(price), float(qty)] for price, qty in asks],
                                spread=best_ask - best_bid,
                                spread_percent=((best_ask - best_bid) / best_bid) * 100,
                                bid_volume=sum(float(qty) for _, qty in bids),
                                ask_volume=sum(float(qty) for _, qty in asks),
                                volume_ratio=1.0,
                                liquidity_score=0.8,
                                timestamp=datetime.now(),
                                source=DataSource.REST_API
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self.orderbook_cache[symbol] = orderbook_data
                            print(f"‚úÖ Orderbook –¥–ª—è {symbol} –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ REST API")
                            return orderbook_data
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è orderbook —á–µ—Ä–µ–∑ REST API –¥–ª—è {symbol}: {e}")
                    return None
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = asyncio.create_task(fetch_orderbook())
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    result = await asyncio.wait_for(task, timeout=5.0)
                    return result
                except asyncio.TimeoutError:
                    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è orderbook –¥–ª—è {symbol}")
                    return None
            else:
                # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π
                return await fetch_orderbook()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ fallback orderbook –¥–ª—è {symbol}: {e}")
            return None
    
    def get_trade_history(self, symbol: str) -> Optional[TradeHistoryData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        trades = self.trade_history_cache.get(symbol, [])
        
        if not trades:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        buy_volume = sum(trade.quantity for trade in trades if trade.side == 'BUY')
        sell_volume = sum(trade.quantity for trade in trades if trade.side == 'SELL')
        volume_ratio = buy_volume / sell_volume if sell_volume > 0 else 1.0
        avg_trade_size = sum(trade.quantity for trade in trades) / len(trades)
        
        return TradeHistoryData(
            symbol=symbol,
            trades=[trade.to_dict() for trade in trades],
            buy_volume=buy_volume,
            sell_volume=sell_volume,
            volume_ratio=volume_ratio,
            avg_trade_size=avg_trade_size,
            timestamp=datetime.now(),
            source=DataSource.WEBSOCKET
        )
    
    def subscribe_orderbook_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        self.orderbook_callbacks.append(callback)
    
    def subscribe_trade_updates(self, callback: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫"""
        self.trade_callbacks.append(callback)
    
    async def subscribe_multiple_symbols(self, symbols: List[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ç–≤–æ–∏–º WebSocket –∫–ª–∏–µ–Ω—Ç–æ–º"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç—ã –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for symbol in symbols:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç –æ—Ä–¥–µ—Ä–±—É–∫–∞
                    await self.websocket_client.load_order_book_snapshot(symbol)
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    await self._load_historical_data_for_symbol(symbol)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∫—ç—à –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                    if symbol in self.market_cache:
                        price = self.market_cache[symbol].price
                        await self._add_price_to_correlation_cache(symbol, price)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
                        timestamp_ms = int(time.time() * 1000)
                        advanced_correlation_analyzer.add_price_data(symbol, price, timestamp_ms)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π (–∏–º–∏—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é)
                        for i in range(1, 50):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ç–æ—á–µ–∫ –¥–ª—è –ª—É—á—à–∏—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º
                            trend_factor = 1 + (i * 0.0005)  # –ù–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ–Ω–¥
                            noise_factor = 1 + (np.random.normal(0, 0.002))  # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º
                            price_variation = price * trend_factor * noise_factor
                            advanced_correlation_analyzer.add_price_data(symbol, price_variation, timestamp_ms + i * 1000)
                        
                        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {50} —Ç–æ—á–µ–∫ —Ü–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π {symbol}")
                        
                        # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –î–†–£–ì–ò–• –ê–ö–¢–ò–í–û–í (–¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π)
                        if symbol == "ETHUSDT":
                            # –î–æ–±–∞–≤–ª—è–µ–º BTC –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                            btc_base_price = 45000.0
                            for i in range(20):
                                btc_price = btc_base_price * (1 + (i * 0.002 - 0.02))
                                advanced_correlation_analyzer.add_price_data('BTCUSDT', btc_price, timestamp_ms + i * 1000)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º ADA –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                            ada_base_price = 0.5
                            for i in range(20):
                                ada_price = ada_base_price * (1 + (i * 0.001 - 0.01))
                                advanced_correlation_analyzer.add_price_data('ADAUSDT', ada_price, timestamp_ms + i * 1000)
                            
                            print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC –∏ ADA –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
                    if not self.websocket_client.is_connected:
                        print(f"‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {symbol}")
                        continue
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞
                    print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫ –¥–ª—è {symbol}...")
                    
                    # –°–æ–∑–¥–∞–µ–º bound callback
                    async def orderbook_callback_wrapper(order_book):
                        await self._orderbook_callback(order_book)
                    
                    await self.websocket_client.subscribe(
                        StreamType.DEPTH,
                        symbol,
                        interval="100ms",
                        callback=orderbook_callback_wrapper
                    )
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—Ä–¥–µ—Ä–±—É–∫ –¥–ª—è {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–¥–µ–ª–∫–∏
                    await self.websocket_client.subscribe(
                        StreamType.TRADES,
                        symbol,
                        interval="100ms",
                        callback=self._trade_callback
                    )
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ—á–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                    await self.websocket_client.subscribe(
                        StreamType.KLINES,
                        symbol,
                        interval="1m",
                        callback=self._kline_callback
                    )
                    
                    print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {symbol} —É—Å–ø–µ—à–Ω–∞")
                    
                    # –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï –î–õ–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–ò–• –ò–ù–î–ò–ö–ê–¢–û–†–û–í
                    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
                    await self._load_historical_data_for_symbol(symbol)
                    
                    # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –°–î–ï–õ–û–ö (—Ç–∞–∫ –∫–∞–∫ MEXC –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö)
                    await self._add_test_trade_data(symbol)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {symbol}: {e}")
                    continue
            
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("subscription_complete", {
                'symbols_count': len(symbols),
                'symbols': symbols,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("subscription_error", {
                'error': str(e),
                'symbols': symbols,
                'timestamp': datetime.now().isoformat()
            })
    
    async def _orderbook_callback(self, order_book: OrderBook):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            # print(f"üîÑ ORDERBOOK CALLBACK –í–´–ó–í–ê–ù –¥–ª—è {order_book.symbol}")
            symbol = order_book.symbol
            best_bid = order_book.get_best_bid()
            best_ask = order_book.get_best_ask()
            
                    # print(f"   –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {best_bid}")
        # print(f"   –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {best_ask}")
        # print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ bids: {len(order_book.bids)}")
        # print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ asks: {len(order_book.asks)}")
            
            if best_bid and best_ask:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–∞
                bid_price = float(best_bid[0])
                ask_price = float(best_ask[0])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ—Ä–¥–µ—Ä–±—É–∫–∞
                orderbook_data = OrderBookData(
                    symbol=symbol,
                    bids=[[float(price), float(qty)] for price, qty in order_book.bids.items()][:10],
                    asks=[[float(price), float(qty)] for price, qty in order_book.asks.items()][:10],
                    spread=ask_price - bid_price,
                    spread_percent=((ask_price - bid_price) / bid_price) * 100,
                    bid_volume=sum(float(qty) for qty in order_book.bids.values()),
                    ask_volume=sum(float(qty) for qty in order_book.asks.values()),
                    volume_ratio=1.0,
                    liquidity_score=0.8,
                    timestamp=datetime.now(),
                    source=DataSource.WEBSOCKET
                )
                
                self.orderbook_cache[symbol] = orderbook_data
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –≤ —Ñ–∞–π–ª
                self._log_data_to_file("orderbook", {
                    'symbol': symbol,
                    'spread': orderbook_data.spread,
                    'spread_percent': orderbook_data.spread_percent,
                    'bid_volume': orderbook_data.bid_volume,
                    'ask_volume': orderbook_data.ask_volume,
                    'timestamp': datetime.now().isoformat()
                })
                
                # print(f"‚úÖ OrderBook –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è {symbol}")
                # print(f"   –°–ø—Ä–µ–¥: ${orderbook_data.spread:.4f} ({orderbook_data.spread_percent:.4f}%)")
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.orderbook_callbacks:
                    try:
                        await callback(orderbook_data)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ orderbook callback: {e}")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ orderbook callback: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("orderbook_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _trade_callback(self, trade_data: Dict):
        """Callback –¥–ª—è —Å–¥–µ–ª–æ–∫"""
        try:
            symbol = trade_data.get('symbol', '')
            if symbol:
                # –°–æ–∑–¥–∞–µ–º TradeData –æ–±—ä–µ–∫—Ç
                trade = TradeData(
                    symbol=symbol,
                    price=float(trade_data.get('price', 0)),
                    quantity=float(trade_data.get('quantity', 0)),
                    side=trade_data.get('side', 'BUY'),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: trade_type -> side
                    timestamp=int(trade_data.get('timestamp', 0)),
                    source=DataSource.WEBSOCKET
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                if symbol not in self.trade_history_cache:
                    self.trade_history_cache[symbol] = []
                
                self.trade_history_cache[symbol].append(trade)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ –∫—ç—à–µ
                if len(self.trade_history_cache[symbol]) > 1000:
                    self.trade_history_cache[symbol] = self.trade_history_cache[symbol][-1000:]
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª
                self._log_data_to_file("trade", {
                    'symbol': symbol,
                    'price': trade.price,
                    'quantity': trade.quantity,
                    'side': trade.side,
                    'timestamp': datetime.now().isoformat()
                })
                
                print(f"üí± TRADE CALLBACK –í–´–ó–í–ê–ù –¥–ª—è {symbol}")
                print(f"   –¶–µ–Ω–∞: ${trade.price:.2f}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade.quantity:.4f}")
                print(f"   –°—Ç–æ—Ä–æ–Ω–∞: {trade.side}")
                print(f"‚úÖ Trade –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è {symbol}")
                
                # –í—ã–∑—ã–≤–∞–µ–º callbacks
                for callback in self.trade_callbacks:
                    try:
                        await callback(trade)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ trade callback: {e}")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ trade callback: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("trade_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _kline_callback(self, kline_data: Dict):
        """Callback –¥–ª—è —Å–≤–µ—á–µ–π"""
        try:
            symbol = kline_data.get('symbol', '')
            interval = kline_data.get('interval', '1m')
            
            if symbol:
                # –°–æ–∑–¥–∞–µ–º KlineData –æ–±—ä–µ–∫—Ç
                kline = KlineData(
                    symbol=symbol,
                    interval=interval,
                    open=float(kline_data.get('open', 0)),
                    high=float(kline_data.get('high', 0)),
                    low=float(kline_data.get('low', 0)),
                    close=float(kline_data.get('close', 0)),
                    volume=float(kline_data.get('volume', 0)),
                    timestamp=int(kline_data.get('timestamp', 0)),
                    source=DataSource.WEBSOCKET
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                key = (symbol, interval)
                if key not in self.kline_cache:
                    self.kline_cache[key] = []
                
                self.kline_cache[key].append(kline)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –∫—ç—à–µ
                if len(self.kline_cache[key]) > 1000:
                    self.kline_cache[key] = self.kline_cache[key][-1000:]
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –≤ —Ñ–∞–π–ª
                self._log_data_to_file("kline", {
                    'symbol': symbol,
                    'interval': interval,
                    'open': kline.open,
                    'high': kline.high,
                    'low': kline.low,
                    'close': kline.close,
                    'volume': kline.volume,
                    'timestamp': datetime.now().isoformat()
                })
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                await self._calculate_technical_indicators(symbol, interval)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ kline callback: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("kline_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    def _to_v2_symbol(self, symbol: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ v3 (BTCUSDT) –≤ v2 (BTC_USDT)."""
        if '_' in symbol:
            return symbol
        known_quotes = ['USDT', 'USDC', 'BTC', 'ETH']
        for quote in known_quotes:
            if symbol.endswith(quote):
                base = symbol[:-len(quote)]
                if base:
                    return f"{base}_{quote}"
        return symbol

    async def _load_historical_data_for_symbol(self, symbol: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # –°–æ–∑–¥–∞–µ–º connector —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            connector = aiohttp.TCPConnector(
                ssl=ssl_context,
                limit=100,
                limit_per_host=30,
                ttl_dns_cache=300,
                use_dns_cache=True
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ (open API v2 —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç BTC_USDT)
            try:
                async with aiohttp.ClientSession(connector=connector, timeout=aiohttp.ClientTimeout(total=30)) as session:
                    v2_symbol = self._to_v2_symbol(symbol)
                    url = f"https://www.mexc.com/open/api/v2/market/kline?symbol={v2_symbol}&interval=60m&limit=100"
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data.get('code') == 200:
                                klines = data.get('data', [])
                                kline_data = []
                                
                                for kline in klines:
                                    kline_data.append(KlineData(
                                        symbol=symbol,
                                        interval='1h',
                                        open=float(kline[1]),
                                        high=float(kline[2]),
                                        low=float(kline[3]),
                                        close=float(kline[4]),
                                        volume=float(kline[5]),
                                        timestamp=int(kline[0]),
                                        source=DataSource.REST_API
                                    ))
                                
                                self.kline_cache[(symbol, '1h')] = kline_data
                                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(kline_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º 24h –¥–∞–Ω–Ω—ã–µ (open API v2, —Å–∏–º–≤–æ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ BTC_USDT)
            try:
                async with aiohttp.ClientSession(connector=connector, timeout=aiohttp.ClientTimeout(total=30)) as session:
                    v2_symbol = self._to_v2_symbol(symbol)
                    url = f"https://www.mexc.com/open/api/v2/market/ticker?symbol={v2_symbol}"
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                            if data.get('code') == 200:
                                ticker = data.get('data', {})
                                if ticker:
                                    price = float(ticker.get('last', 0))
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                                    self.market_cache[symbol] = MarketData(
                                        symbol=symbol,
                                        price=price,
                                        change_24h=float(ticker.get('change_rate', 0)),
                                        volume_24h=float(ticker.get('volume', 0)),
                                        quote_volume_24h=float(ticker.get('quote_volume', 0)),
                                        high_24h=float(ticker.get('high', 0)),
                                        low_24h=float(ticker.get('low', 0)),
                                        timestamp=datetime.now(),
                                        source=DataSource.REST_API
                                    )
                                    
                                    print(f"üí∞ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: ${price}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            await self._calculate_technical_indicators(symbol, '1h')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_data_symbol", {
                'symbol': symbol,
                'status': 'loaded',
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_data_symbol_error", {
                'symbol': symbol,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _calculate_technical_indicators(self, symbol: str, interval: str):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            result = self.get_technical_indicators(symbol, interval)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
            if result:
                self._log_data_to_file("technical_indicators", {
                    'symbol': symbol,
                    'interval': interval,
                    'rsi_14': result.get('rsi_14', 0),
                    'sma_20': result.get('sma_20', 0),
                    'ema_12': result.get('ema_12', 0),
                    'timestamp': datetime.now().isoformat()
                })
            
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {symbol}: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("technical_indicators_error", {
                'symbol': symbol,
                'interval': interval,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            return None
    
    def get_trading_candidates(self, min_volume: float = 10000) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        candidates = []
        
        for symbol, market_data in self.market_cache.items():
            if market_data.quote_volume_24h >= min_volume:
                score = self._calculate_candidate_score(market_data)
                candidates.append({
                    'symbol': symbol,
                    'price': market_data.price,
                    'volume_24h': market_data.quote_volume_24h,
                    'change_24h': market_data.change_24h,
                    'score': score
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        candidates.sort(key=lambda x: x['score'], reverse=True)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ —Ñ–∞–π–ª
        self._log_data_to_file("trading_candidates", {
            'candidates_count': len(candidates[:10]),
            'min_volume': min_volume,
            'top_candidates': candidates[:5],  # –¢–æ–ø-5 –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            'timestamp': datetime.now().isoformat()
        })
        
        return candidates[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10
    
    def _calculate_candidate_score(self, data: MarketData) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ score –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ score
            volume_score = min(1.0, data.quote_volume_24h / 1000000)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—ä–µ–º
            volatility_score = abs(data.change_24h) / 100  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            return volume_score * 0.7 + volatility_score * 0.3
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è score: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("candidate_score_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            return 0.0
    
    def save_price_to_db(self, symbol: str, price: float, timestamp: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis_cache.set_price(symbol, price, timestamp)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –ë–î: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("price_save_error", {
                'symbol': symbol,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    def save_kline_to_db(self, kline_data: KlineData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–µ—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis_cache.set_kline(kline_data.symbol, kline_data.interval, kline_data.to_dict())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏ –≤ –ë–î: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("kline_save_error", {
                'symbol': kline_data.symbol,
                'interval': kline_data.interval,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    def save_indicators_to_db(self, indicators_data: TechnicalIndicatorsData):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            self.redis_cache.set_indicators(indicators_data.symbol, '1h', indicators_data.to_dict())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ë–î: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("indicators_save_error", {
                'symbol': indicators_data.symbol,
                'interval': '1h',
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    def load_historical_prices(self, symbol: str, limit: int = 1000) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –∏–∑ –ë–î"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Redis
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_prices_load_error", {
                'symbol': symbol,
                'limit': limit,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            return []
    
    def load_historical_klines(self, symbol: str, interval: str = '1h', limit: int = 100) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –∏–∑ –ë–î"""
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Redis
            return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_klines_load_error", {
                'symbol': symbol,
                'interval': interval,
                'limit': limit,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            return []
    
    def get_portfolio_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            account_data = self.get_account_data()
            
            if not account_data:
                return {
                    'total_usdt': 0.0,
                    'positions': [],
                    'open_orders': [],
                    'active_symbols': [],
                    'timestamp': datetime.now().isoformat()
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
            portfolio_value = 0.0
            asset_values = {}
            
            for asset, balance in account_data.balances.items():
                if asset == 'USDT' or asset == 'USDC':
                    asset_values[asset] = balance
                    portfolio_value += balance
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
                    symbol = f"{asset}USDT"
                    if symbol in self.market_cache:
                        price = self.market_cache[symbol].price
                        value = balance * price
                        asset_values[asset] = value
                        portfolio_value += value
                    else:
                        asset_values[asset] = 0.0
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            portfolio_data = {
                'total_usdt': portfolio_value,
                'balances': account_data.balances,
                'asset_values': asset_values,
                'positions': account_data.positions,
                'open_orders': account_data.open_orders,
                'active_symbols': self._get_account_symbols(),
                'timestamp': account_data.timestamp.isoformat()
            }
            
            self._log_data_to_file("portfolio", portfolio_data)
            
            return portfolio_data
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("portfolio_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
            
            return {}
    
    async def refresh_account_subscriptions(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∞–∫–∫–∞—É–Ω—Ç–∞...")
            current_symbols = self._get_account_symbols()
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if hasattr(self, '_last_account_symbols'):
                old_symbols = self._last_account_symbols
                removed_symbols = old_symbols - set(current_symbols)
                if removed_symbols:
                    print(f"   üì§ –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(removed_symbols)}")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç WebSocket
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            await self.subscribe_multiple_symbols(current_symbols)
            self._last_account_symbols = set(current_symbols)
            
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {len(current_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("subscription_refresh", {
                'symbols_count': len(current_symbols),
                'symbols': list(current_symbols),
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("subscription_refresh_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _add_price_to_correlation_cache(self, symbol: str, price: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ Redis –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            redis_conn = self.redis_cache.get_redis()
            key = f"price_history:{symbol}"
            redis_conn.lpush(key, price)
            redis_conn.ltrim(key, 0, 99)  # –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ü–µ–Ω
            redis_conn.expire(key, 3600)  # TTL 1 —á–∞—Å
            
            # –ü–†–Ø–ú–ê–Ø –ü–ï–†–ï–î–ê–ß–ê –í –†–ê–°–®–ò–†–ï–ù–ù–´–ô CORRELATION_ANALYZER
            timestamp = int(time.time() * 1000)
            advanced_correlation_analyzer.add_price_data(symbol, price, timestamp)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("correlation_price", {
                'symbol': symbol,
                'price': price,
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"‚úÖ –¶–µ–Ω–∞ {price:.2f} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π correlation_analyzer –¥–ª—è {symbol}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π {symbol}: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("correlation_price_error", {
                'symbol': symbol,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })

    async def _fetch_other_assets_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ —á–µ—Ä–µ–∑ REST API –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            correlation_assets = self._get_account_symbols()
            
            for asset in correlation_assets:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ REST API
                    ticker_data = self.rest_api.get_ticker_price(asset)
                    
                    if ticker_data and 'price' in ticker_data:
                        price = float(ticker_data['price'])
                        timestamp = int(time.time() * 1000)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                        advanced_correlation_analyzer.add_price_data(asset, price, timestamp)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if asset not in self.market_cache:
                            self.market_cache[asset] = MarketData(
                                symbol=asset,
                                price=price,
                                change_24h=0.0,
                                volume_24h=0.0,
                                quote_volume_24h=0.0,
                                high_24h=price,
                                low_24h=price,
                                timestamp=datetime.now(),
                                source=DataSource.REST_API
                            )
                        else:
                            self.market_cache[asset].price = price
                            self.market_cache[asset].timestamp = datetime.now()
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ REST API –≤ —Ñ–∞–π–ª
                        self._log_data_to_file("rest_api_price", {
                            'symbol': asset,
                            'price': price,
                            'timestamp': datetime.now().isoformat()
                        })
                        
                        print(f"üìä REST API: {asset} = ${price:.4f} (–¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π)")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}: {e}")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
                    self._log_data_to_file("rest_api_error", {
                        'symbol': asset,
                        'error': str(e),
                        'timestamp': datetime.now().isoformat()
                    })
                    
                    continue
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ _fetch_other_assets_data: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("fetch_assets_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })

    async def _load_historical_data_for_correlations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–≤–µ—á–µ–π –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            print("üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            correlation_assets = self._get_account_symbols()
            
            for asset in correlation_assets:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π 1m –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
                    klines = self.rest_api.get_klines(asset, '1m', limit=100)
                    
                    if isinstance(klines, list) and len(klines) > 0:
                        added_count = 0
                        
                        for kline in klines:
                            try:
                                # kline[4] = close price, kline[0] = timestamp
                                price = float(kline[4])
                                timestamp = int(kline[0])  # –£–∂–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                                advanced_correlation_analyzer.add_price_data(asset, price, timestamp)
                                
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                                self._log_data_to_file("historical_correlation", {
                                    'symbol': asset,
                                    'price': price,
                                    'timestamp': datetime.fromtimestamp(timestamp / 1000).isoformat()
                                })
                                
                                added_count += 1
                                
                            except (ValueError, IndexError) as e:
                                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏ –¥–ª—è {asset}: {e}")
                                continue
                        
                        print(f"‚úÖ {asset}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {added_count} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–æ–π
                        if added_count > 0:
                            latest_price = float(klines[-1][4])
                            if asset not in self.market_cache:
                                self.market_cache[asset] = MarketData(
                                    symbol=asset,
                                    price=latest_price,
                                    change_24h=0.0,
                                    volume_24h=0.0,
                                    quote_volume_24h=0.0,
                                    high_24h=latest_price,
                                    low_24h=latest_price,
                                    timestamp=datetime.now(),
                                    source=DataSource.REST_API
                                )
                            else:
                                self.market_cache[asset].price = latest_price
                                self.market_cache[asset].timestamp = datetime.now()
                    
                    else:
                        print(f"‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {asset}: {e}")
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            total_points = sum(len(prices) for prices in advanced_correlation_analyzer.price_data.values())
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {total_points}")
            
            for asset, prices in advanced_correlation_analyzer.price_data.items():
                print(f"   {asset}: {len(prices)} —Ç–æ—á–µ–∫")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_data_loaded", {
                'total_points': total_points,
                'assets_count': len(correlation_assets),
                'assets': correlation_assets,
                'timestamp': datetime.now().isoformat()
            })
            
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ _load_historical_data_for_correlations: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("historical_correlations_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _add_test_trade_data(self, symbol: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            if symbol not in self.trade_history_cache:
                self.trade_history_cache[symbol] = []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            current_price = 3700.0  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ ETH
            if symbol in self.market_cache:
                current_price = self.market_cache[symbol].price
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
            test_trades = []
            base_time = int(time.time() * 1000)
            
            for i in range(10):
                # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ü–µ–Ω—ã
                price_variation = current_price * (1 + (i * 0.002 - 0.01))  # ¬±1%
                quantity = 0.1 + (i * 0.05)  # 0.1 - 0.55
                side = 'BUY' if i % 2 == 0 else 'SELL'
                
                trade = TradeData(
                    symbol=symbol,
                    price=price_variation,
                    quantity=quantity,
                    side=side,
                    timestamp=base_time - (i * 1000),  # –£–±—ã–≤–∞—é—â–µ–µ –≤—Ä–µ–º—è
                    source=DataSource.CALCULATED
                )
                
                test_trades.append(trade)
                self.trade_history_cache[symbol].append(trade)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –≤ —Ñ–∞–π–ª
            self._log_data_to_file("test_trades", {
                'symbol': symbol,
                'count': len(test_trades),
                'timestamp': datetime.now().isoformat()
            })
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_trades)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("test_trades_error", {
                'symbol': symbol,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })
    
    async def _ticker_callback(self, ticker_data: Dict):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ä–∞"""
        try:
            symbol = ticker_data.get('symbol', '')
            if symbol and symbol in self.market_cache:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –∫—ç—à–µ
                market_data = self.market_cache[symbol]
                market_data.price = float(ticker_data.get('bid_price', market_data.price))
                market_data.timestamp = datetime.now()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ä–∞ –≤ —Ñ–∞–π–ª
                self._log_data_to_file("ticker", {
                    'symbol': symbol,
                    'price': market_data.price,
                    'timestamp': datetime.now().isoformat()
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
                await self._add_price_to_correlation_cache(symbol, market_data.price)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ ticker callback: {e}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
            self._log_data_to_file("ticker_error", {
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            })

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
comprehensive_data_manager = ComprehensiveDataManager() 