"""
–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ë–î –∏ –≤–µ—Ä—Å–∏—è–º–∏
"""

import os
import json
from datetime import datetime
from typing import List, Dict, Any
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.connection import get_db_connection
from database.models import DatabaseModels

class DatabaseMigrations:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –ë–î"""
    
    def __init__(self):
        self.db = get_db_connection()
        self.models = DatabaseModels()
        self.migrations_table = "schema_migrations"
        
    def create_migrations_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""
        with self.db.get_cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id SERIAL PRIMARY KEY,
                    version VARCHAR(50) UNIQUE NOT NULL,
                    name VARCHAR(255) NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
    
    def get_applied_migrations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        with self.db.get_cursor() as cursor:
            cursor.execute("SELECT version FROM schema_migrations ORDER BY applied_at")
            return [row[0] for row in cursor.fetchall()]
    
    def mark_migration_applied(self, version: str, name: str):
        """–û—Ç–º–µ—Ç–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–π"""
        with self.db.get_cursor() as cursor:
            cursor.execute(
                "INSERT INTO schema_migrations (version, name) VALUES (%s, %s)",
                (version, name)
            )
    
    def run_migrations(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
        print("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
        self.create_migrations_table()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        applied = self.get_applied_migrations()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        migrations = [
            {
                'version': '001',
                'name': 'Initial schema',
                'up': self._migration_001_initial_schema
            },
            {
                'version': '002', 
                'name': 'Add indexes for performance',
                'up': self._migration_002_add_indexes
            },
            {
                'version': '003',
                'name': 'Add partitioning for prices table',
                'up': self._migration_003_add_partitioning
            },
            {
                'version': '004',
                'name': 'Add Order Book and Trade tables',
                'up': self._migration_004_add_orderbook_tables
            }
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        for migration in migrations:
            if migration['version'] not in applied:
                print(f"üì¶ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {migration['name']}")
                try:
                    migration['up']()
                    self.mark_migration_applied(migration['version'], migration['name'])
                    print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['version']}: {e}")
                    raise
            else:
                print(f"‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è {migration['version']} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
        
        print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    def _migration_001_initial_schema(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è 001: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ö–µ–º—ã"""
        self.models.create_tables()
    
    def _migration_002_add_indexes(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è 002: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        with self.db.get_cursor() as cursor:
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_prices_timestamp 
                ON prices(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_klines_timestamp 
                ON klines(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_indicators_timestamp 
                ON technical_indicators(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_correlations_timestamp 
                ON correlations(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_market_data_timestamp 
                ON market_data(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_account_data_timestamp 
                ON account_data(timestamp);
                
                CREATE INDEX IF NOT EXISTS idx_news_data_timestamp 
                ON news_data(timestamp);
            """)
    
    def _migration_003_add_partitioning(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è 003: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü"""
        with self.db.get_cursor() as cursor:
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ü–µ–Ω –ø–æ –¥–Ω—è–º
            cursor.execute("""
                -- –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ü–µ–Ω
                CREATE TABLE IF NOT EXISTS prices_partitioned (
                    id SERIAL,
                    symbol VARCHAR(20) NOT NULL,
                    price DECIMAL(20,8) NOT NULL,
                    timestamp BIGINT NOT NULL,
                    source VARCHAR(20) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                ) PARTITION BY RANGE (timestamp);
                
                -- –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Ç–∏—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –¥–Ω–µ–π
                DO $$
                DECLARE
                    i INTEGER;
                    start_time BIGINT;
                    end_time BIGINT;
                BEGIN
                    FOR i IN 0..29 LOOP
                        start_time := EXTRACT(EPOCH FROM (CURRENT_DATE - i)) * 1000;
                        end_time := EXTRACT(EPOCH FROM (CURRENT_DATE - i + 1)) * 1000;
                        
                        EXECUTE format('
                            CREATE TABLE IF NOT EXISTS prices_%s 
                            PARTITION OF prices_partitioned 
                            FOR VALUES FROM (%s) TO (%s)
                        ', 
                        to_char(CURRENT_DATE - i, 'YYYYMMDD'),
                        start_time,
                        end_time
                        );
                    END LOOP;
                END $$;
            """)
    
    def _migration_004_add_orderbook_tables(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è 004: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è Order Book –∏ Trade –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏
        self.models._create_orderbook_table()
        self.models._create_trades_table()
        self.models._create_trade_history_table()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã Order Book –∏ Trade –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã")
    
    def rollback_migration(self, version: str):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print(f"üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ {version}...")
        
        if version == '004':
            self._rollback_004()
        elif version == '003':
            self._rollback_003()
        elif version == '002':
            self._rollback_002()
        elif version == '001':
            self._rollback_001()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: {version}")
            return
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        with self.db.get_cursor() as cursor:
            cursor.execute("DELETE FROM schema_migrations WHERE version = %s", (version,))
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {version} –æ—Ç–∫–∞—á–µ–Ω–∞")
    
    def _rollback_001(self):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 001"""
        self.models.drop_all_tables()
    
    def _rollback_002(self):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 002"""
        with self.db.get_cursor() as cursor:
            indexes = [
                'idx_prices_timestamp', 'idx_klines_timestamp', 'idx_indicators_timestamp',
                'idx_correlations_timestamp', 'idx_market_data_timestamp',
                'idx_account_data_timestamp', 'idx_news_data_timestamp'
            ]
            for index in indexes:
                cursor.execute(f"DROP INDEX IF EXISTS {index}")
    
    def _rollback_003(self):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 003"""
        with self.db.get_cursor() as cursor:
            cursor.execute("DROP TABLE IF EXISTS prices_partitioned CASCADE")
    
    def _rollback_004(self):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ 004"""
        with self.db.get_cursor() as cursor:
            cursor.execute("DROP TABLE IF EXISTS orderbook_data CASCADE")
            cursor.execute("DROP TABLE IF EXISTS trades_data CASCADE")
            cursor.execute("DROP TABLE IF EXISTS trade_history_data CASCADE")
    
    def get_migration_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π"""
        with self.db.get_cursor() as cursor:
            cursor.execute("""
                SELECT version, name, applied_at 
                FROM schema_migrations 
                ORDER BY applied_at
            """)
            migrations = cursor.fetchall()
        
        return {
            'total_migrations': len(migrations),
            'migrations': [
                {
                    'version': row[0],
                    'name': row[1],
                    'applied_at': row[2].isoformat() if row[2] else None
                }
                for row in migrations
            ]
        }
    
    def reset_database(self):
        """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!)"""
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
        confirm = input("–í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        
        if confirm == 'YES':
            with self.db.get_cursor() as cursor:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("""
                    DROP SCHEMA public CASCADE;
                    CREATE SCHEMA public;
                    GRANT ALL ON SCHEMA public TO postgres;
                    GRANT ALL ON SCHEMA public TO public;
                """)
            print("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞")
        else:
            print("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
db_migrations = DatabaseMigrations()


def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π"""
    db_migrations.run_migrations()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    run_migrations()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    status = db_migrations.get_migration_status()
    print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
    print(f"–í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {status['total_migrations']}")
    for migration in status['migrations']:
        print(f"  {migration['version']}: {migration['name']} ({migration['applied_at']})") 