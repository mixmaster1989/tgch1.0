#!/usr/bin/env python3
"""
–£–õ–¨–¢–†–ê-–ü–†–û–°–¢–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT
–¢–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python!
"""

import json
import time
import hmac
import hashlib
import urllib.parse
from urllib.request import Request, urlopen

# –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env"""
    env_vars = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
    except:
        pass
    return env_vars

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
env = load_env()
API_KEY = env.get('MEX_API_KEY', '')
SECRET_KEY = env.get('MEX_SECRET_KEY', '')

def get_signature(query_string):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API"""
    return hmac.new(
        SECRET_KEY.encode('utf-8'),
        query_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

def make_request(endpoint, params=None, method='GET'):
    """–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API"""
    base_url = "https://api.mexc.com"
    url = base_url + endpoint
    
    headers = {
        'X-MEXC-APIKEY': API_KEY,
        'Content-Type': 'application/json'
    }
    
    if method == 'POST':
        # –î–ª—è POST –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–¥—É—Ç –≤ body, –∞ –Ω–µ –≤ URL
        data = json.dumps(params).encode('utf-8')
        req = Request(url, data=data, headers=headers)
    else:
        # –î–ª—è GET –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–¥—É—Ç –≤ URL
        if params:
            query_string = urllib.parse.urlencode(params)
            url += "?" + query_string
        req = Request(url, headers=headers)
    
    try:
        with urlopen(req) as response:
            return json.loads(response.read().decode())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def get_luma_balance():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å LUMA"""
    timestamp = int(time.time() * 1000)
    params = {
        'timestamp': timestamp,
        'recvWindow': 5000
    }
    
    signature = get_signature(urllib.parse.urlencode(params))
    params['signature'] = signature
    
    result = make_request('/api/v3/account', params)
    
    if result and 'balances' in result:
        for balance in result['balances']:
            if balance['asset'] == 'LUMA':
                free = float(balance['free'])
                locked = float(balance['locked'])
                total = free + locked
                return free, locked, total
    
    return 0, 0, 0

def sell_luma(quantity):
    """–ü—Ä–æ–¥–∞—Ç—å LUMA –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ"""
    timestamp = int(time.time() * 1000)
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ (–∫–∞–∫ –≤ –æ—Ç–ª–∞–¥–∫–µ)
    quantity = round(quantity, 2)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    params_for_signature = {
        'symbol': 'LUMAUSDT',
        'side': 'SELL',
        'type': 'MARKET',
        'quantity': str(quantity),
        'timestamp': timestamp,
        'recvWindow': 5000
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = get_signature(urllib.parse.urlencode(params_for_signature))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    params_for_signature['signature'] = signature
    
    result = make_request('/api/v3/order', params_for_signature, 'POST')
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üö® –£–õ–¨–¢–†–ê-–ü–†–û–°–¢–ê–Ø –ü–†–û–î–ê–ñ–ê LUMAUSDT")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    if not API_KEY or not SECRET_KEY:
        print("‚ùå API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ MEXC_API_KEY –∏ MEXC_SECRET_KEY")
        return
    
    print("‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å LUMA...")
    free, locked, total = get_luma_balance()
    
    if total <= 0:
        print("‚ùå LUMA –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–ª–∞–Ω—Å–µ")
        return
    
    print(f"üí∞ –ù–∞–π–¥–µ–Ω LUMA:")
    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {free}")
    print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {locked}")
    print(f"   –í—Å–µ–≥–æ: {total}")
    
    # –ü—Ä–æ–¥–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π LUMA
    if free > 0:
        print(f"\nüî• –ü—Ä–æ–¥–∞–µ–º {free} LUMA...")
        
        confirm = input("–ü–†–û–î–ê–¢–¨? (yes/no): ")
        if confirm.lower() != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        result = sell_luma(free)
        
        if result and 'orderId' in result:
            print(f"‚úÖ LUMA –ü–†–û–î–ê–ù!")
            print(f"üÜî –û—Ä–¥–µ—Ä: {result['orderId']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {free}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result}")
    else:
        print("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ LUMA –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

if __name__ == "__main__":
    main() 