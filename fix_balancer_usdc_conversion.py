#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ USDT ‚Üí USDC
"""

def fix_balancer_usdc_conversion():
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open('active_50_50_balancer.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ buy_btceth_with_usdc
    old_method = '''    async def buy_btceth_with_usdc(self, amount: float) -> bool:
        """–ö—É–ø–∏—Ç—å BTC/ETH –∑–∞ USDC"""
        try:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É BTC –∏ ETH
            btc_amount = amount * 0.6  # 60% –Ω–∞ BTC
            eth_amount = amount * 0.4  # 40% –Ω–∞ ETH
            
            success_count = 0
            
            # –ü–æ–∫—É–ø–∞–µ–º BTC
            if btc_amount >= 5.0:
                btc_order = self.mex_api.place_order(
                    symbol='BTCUSDC',
                    side='BUY',
                    quantity=btc_amount
                )
                if btc_order and 'orderId' in btc_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω BTC –Ω–∞ ${btc_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC")
            
            # –ü–æ–∫—É–ø–∞–µ–º ETH
            if eth_amount >= 5.0:
                eth_order = self.mex_api.place_order(
                    symbol='ETHUSDC',
                    side='BUY',
                    quantity=eth_amount
                )
                if eth_order and 'orderId' in eth_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω ETH –Ω–∞ ${eth_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ ETH")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC/ETH: {e}")
            return False'''
    
    new_method = '''    async def buy_btceth_with_usdc(self, amount: float) -> bool:
        """–ö—É–ø–∏—Ç—å BTC/ETH –∑–∞ USDC"""
        try:
            # üî• –ù–û–í–û–ï: –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC/ETH –Ω–∞ ${amount:.2f}")
            
            if not self.ensure_usdc_for_trade(amount):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–µ—Å–ø–µ—á–∏—Ç—å USDC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC/ETH")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                error_message = (
                    f"‚ùå <b>–û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò USDT ‚Üí USDC</b>\\n\\n"
                    f"üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount:.2f} USDC\\n"
                    f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT ‚Üí USDC\\n"
                    f"üìä –¶–µ–ª—å: –ü–æ–∫—É–ø–∫–∞ BTC/ETH –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏\\n\\n"
                    f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
                )
                self.send_telegram_message(error_message)
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            success_message = (
                f"‚úÖ <b>USDC –ü–û–î–ì–û–¢–û–í–õ–ï–ù –î–õ–Ø –ü–û–ö–£–ü–ö–ò BTC/ETH</b>\\n\\n"
                f"üí∞ –°—É–º–º–∞: ${amount:.2f} USDC\\n"
                f"üîÑ –î–µ–π—Å—Ç–≤–∏–µ: USDT ‚Üí USDC (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\\n"
                f"üìä –¶–µ–ª—å: –ü–æ–∫—É–ø–∫–∞ BTC/ETH –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏\\n\\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            self.send_telegram_message(success_message)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–∂–¥—É BTC –∏ ETH
            btc_amount = amount * 0.6  # 60% –Ω–∞ BTC
            eth_amount = amount * 0.4  # 40% –Ω–∞ ETH
            
            success_count = 0
            
            # –ü–æ–∫—É–ø–∞–µ–º BTC
            if btc_amount >= 5.0:
                btc_order = self.mex_api.place_order(
                    symbol='BTCUSDC',
                    side='BUY',
                    quantity=btc_amount
                )
                if btc_order and 'orderId' in btc_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω BTC –Ω–∞ ${btc_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC")
            
            # –ü–æ–∫—É–ø–∞–µ–º ETH
            if eth_amount >= 5.0:
                eth_order = self.mex_api.place_order(
                    symbol='ETHUSDC',
                    side='BUY',
                    quantity=eth_amount
                )
                if eth_order and 'orderId' in eth_order:
                    logger.info(f"‚úÖ –ö—É–ø–ª–µ–Ω ETH –Ω–∞ ${eth_amount:.2f} USDC")
                    success_count += 1
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ ETH")
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ BTC/ETH: {e}")
            return False'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    content = content.replace(old_method, new_method)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    with open('active_50_50_balancer.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ active_50_50_balancer.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è USDT ‚Üí USDC")

if __name__ == "__main__":
    fix_balancer_usdc_conversion()
