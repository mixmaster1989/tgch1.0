#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã ETH –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import json
from datetime import datetime
from mex_api import MexAPI
from technical_indicators import TechnicalIndicators

def check_eth_analysis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã ETH –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    try:
        print("üîç –ê–ù–ê–õ–ò–ó ETHUSDT")
        print("=" * 50)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        api = MexAPI()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã ETH...")
        ticker = api.get_ticker_price("ETHUSDT")
        current_price = float(ticker['price'])
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ETH: ${current_price:.2f}")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("üìà –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        klines = api.get_klines("ETHUSDT", interval='1m', limit=100)
        
        if not klines or 'code' in klines:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
            if 'msg' in klines:
                print(f"   –û—à–∏–±–∫–∞: {klines['msg']}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if isinstance(klines, dict) and 'data' in klines:
            klines_data = klines['data']
        else:
            klines_data = klines
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        closes = []
        highs = []
        lows = []
        volumes = []
        
        for k in klines_data:
            if len(k) >= 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                closes.append(float(k[4]))  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                highs.append(float(k[2]))   # –ú–∞–∫—Å–∏–º—É–º
                lows.append(float(k[3]))    # –ú–∏–Ω–∏–º—É–º
                volumes.append(float(k[5])) # –û–±—ä–µ–º
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(closes)} —Å–≤–µ—á–µ–π")
        print()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        print("üî¢ –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        indicators = TechnicalIndicators()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        klines_formatted = []
        for i in range(len(closes)):
            klines_formatted.append([
                int(datetime.now().timestamp() * 1000) - (len(closes) - i) * 60000,  # timestamp
                closes[i],  # open (–∏—Å–ø–æ–ª—å–∑—É–µ–º close –∫–∞–∫ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ)
                highs[i],   # high
                lows[i],    # low
                closes[i],  # close
                volumes[i]  # volume
            ])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        all_indicators = indicators.calculate_all_indicators(klines_formatted, "ETHUSDT")
        
        if all_indicators:
            rsi_14 = all_indicators.get('rsi_14', 50)
            macd_histogram = all_indicators.get('macd', {}).get('histogram', 0)
            sma_20 = all_indicators.get('sma_20', current_price)
            ema_12 = all_indicators.get('ema_12', current_price)
            
            print(f"üìä RSI (14): {rsi_14:.2f}")
            print(f"üìà MACD Histogram: {macd_histogram:.4f}")
            print(f"üìä SMA (20): ${sma_20:.2f}")
            print(f"üìä EMA (12): ${ema_12:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
            rsi_14 = 50
            macd_histogram = 0
            sma_20 = current_price
            ema_12 = current_price
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        print("üéØ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í:")
        print("-" * 30)
        
        buy_signals = 0
        sell_signals = 0
        
        # RSI —Å–∏–≥–Ω–∞–ª—ã
        if rsi_14 < 30:
            print("üü¢ RSI: –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            buy_signals += 1
        elif rsi_14 > 70:
            print("üî¥ RSI: –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏ (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
            sell_signals += 1
        else:
            print(f"üü° RSI: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ({rsi_14:.1f})")
        
        # MACD —Å–∏–≥–Ω–∞–ª—ã
        if macd_histogram > 0:
            print("üü¢ MACD: –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª")
            buy_signals += 1
        elif macd_histogram < 0:
            print("üî¥ MACD: –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª")
            sell_signals += 1
        else:
            print("üü° MACD: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
        
        # –¶–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ SMA
        if current_price > sma_20:
            print("üü¢ –¶–µ–Ω–∞ –≤—ã—à–µ SMA(20) - –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥")
            buy_signals += 0.5
        else:
            print("üî¥ –¶–µ–Ω–∞ –Ω–∏–∂–µ SMA(20) - –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥")
            sell_signals += 0.5
        
        print()
        print(f"üìä –ò–¢–û–ì–û –°–ò–ì–ù–ê–õ–û–í:")
        print(f"   –ü–æ–∫—É–ø–∫–∞: {buy_signals}")
        print(f"   –ü—Ä–æ–¥–∞–∂–∞: {sell_signals}")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        if buy_signals >= 2:
            print("üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–û–ö–£–ü–ö–ê!")
            print(f"   –¶–µ–Ω–∞: ${current_price:.2f}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0.001 ETH")
            print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: ${current_price * 0.001:.2f}")
        elif sell_signals >= 2:
            print("üìâ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ü–†–û–î–ê–ñ–ê!")
        else:
            print("‚è∏Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–î–ï–†–ñ–ê–ù–ò–ï")
            print(f"   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        print()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_eth_analysis() 