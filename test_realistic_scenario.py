#!/usr/bin/env python3
"""
–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã PnL –º–æ–Ω–∏—Ç–æ—Ä–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–∏–≤–æ–¥–∏–ª –∫ –ø—Ä–æ–¥–∞–∂–µ ETH –¥–µ—à–µ–≤–ª–µ –ø–æ–∫—É–ø–∫–∏
"""

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RealisticPnLScenario:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã PnL"""
    
    def __init__(self):
        self.profit_threshold = 0.40  # –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ $0.40
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤ ETH (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö)
        self.eth_order_history = [
            # –ü–æ–∫—É–ø–∫–∏ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ —Ä–∞–∑–Ω—ã–º —Ü–µ–Ω–∞–º
            {'side': 'BUY', 'quantity': 0.05, 'price': 4200.0, 'time': 1000, 'note': '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞'},
            {'side': 'BUY', 'quantity': 0.03, 'price': 4210.0, 'time': 2000, 'note': '–í—Ç–æ—Ä–∞—è –ø–æ–∫—É–ø–∫–∞'},
            {'side': 'BUY', 'quantity': 0.02, 'price': 4220.0, 'time': 3000, 'note': '–¢—Ä–µ—Ç—å—è –ø–æ–∫—É–ø–∫–∞'},
            {'side': 'BUY', 'quantity': 0.04, 'price': 4230.0, 'time': 4000, 'note': '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–∫—É–ø–∫–∞'},
            {'side': 'BUY', 'quantity': 0.01, 'price': 4240.0, 'time': 5000, 'note': '–ü—è—Ç–∞—è –ø–æ–∫—É–ø–∫–∞'},
            
            # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —Ü–µ–Ω–∞–º (–ø—Ä–∏–±—ã–ª—å–Ω—ã–µ)
            {'side': 'SELL', 'quantity': 0.08, 'price': 4250.0, 'time': 6000, 'note': '–ü–µ—Ä–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞'},
            {'side': 'SELL', 'quantity': 0.05, 'price': 4240.0, 'time': 7000, 'note': '–í—Ç–æ—Ä–∞—è –ø—Ä–æ–¥–∞–∂–∞'},
            {'side': 'SELL', 'quantity': 0.02, 'price': 4230.0, 'time': 8000, 'note': '–¢—Ä–µ—Ç—å—è –ø—Ä–æ–¥–∞–∂–∞'},
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (–æ—Å—Ç–∞—Ç–æ–∫)
            {'side': 'BUY', 'quantity': 0.00242, 'price': 4200.0, 'time': 9000, 'note': '–û—Å—Ç–∞—Ç–æ–∫'},
        ]
        
        # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å ETH
        self.current_eth_balance = 0.00242
        
    def show_order_history(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤"""
        logger.info("üìã –ò–°–¢–û–†–ò–Ø –û–†–î–ï–†–û–í ETH:")
        logger.info("=" * 80)
        
        total_bought = 0
        total_sold = 0
        total_buy_cost = 0
        total_sell_revenue = 0
        
        for i, order in enumerate(self.eth_order_history, 1):
            side_emoji = "üü¢" if order['side'] == 'BUY' else "üî¥"
            side_text = "–ü–û–ö–£–ü–ö–ê" if order['side'] == 'BUY' else "–ü–†–û–î–ê–ñ–ê"
            
            if order['side'] == 'BUY':
                total_bought += order['quantity']
                total_buy_cost += order['quantity'] * order['price']
            else:
                total_sold += order['quantity']
                total_sell_revenue += order['quantity'] * order['price']
            
            logger.info(
                f"{i:2d}. {side_emoji} {side_text}: {order['quantity']:.6f} ETH @ ${order['price']:.2f} "
                f"(${order['quantity'] * order['price']:.2f}) - {order['note']}"
            )
        
        logger.info("=" * 80)
        logger.info(f"üìä –ò–¢–û–ì–û –ü–û–ö–£–ü–û–ö: {total_bought:.6f} ETH –Ω–∞ ${total_buy_cost:.2f}")
        logger.info(f"üìä –ò–¢–û–ì–û –ü–†–û–î–ê–ñ: {total_sold:.6f} ETH –Ω–∞ ${total_sell_revenue:.2f}")
        logger.info(f"üìä –û–°–¢–ê–¢–û–ö: {total_bought - total_sold:.6f} ETH")
        logger.info(f"üìä –¢–ï–ö–£–©–ò–ô –ë–ê–õ–ê–ù–°: {self.current_eth_balance:.6f} ETH")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂
        if total_sold > 0:
            avg_buy_price = total_buy_cost / total_bought
            avg_sell_price = total_sell_revenue / total_sold
            realized_profit = (avg_sell_price - avg_buy_price) * total_sold
            
            logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${avg_buy_price:.4f}")
            logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: ${avg_sell_price:.4f}")
            logger.info(f"üìà –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${realized_profit:.4f}")
        
        logger.info("=" * 80)
    
    def demonstrate_old_method_problem(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        logger.info("‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê:")
        logger.info("=" * 80)
        
        # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: —É—á–∏—Ç—ã–≤–∞–µ—Ç –í–°–ï –ø–æ–∫—É–ø–∫–∏
        buy_orders = [order for order in self.eth_order_history if order['side'] == 'BUY']
        total_buy_cost = sum(order['quantity'] * order['price'] for order in buy_orders)
        total_buy_quantity = sum(order['quantity'] for order in buy_orders)
        old_avg_buy_price = total_buy_cost / total_buy_quantity
        
        logger.info(f"üî¥ –°–¢–ê–†–´–ô –ú–ï–¢–û–î (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π):")
        logger.info(f"   - –£—á–∏—Ç—ã–≤–∞–µ—Ç –í–°–ï –ø–æ–∫—É–ø–∫–∏: {total_buy_quantity:.6f} ETH")
        logger.info(f"   - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_buy_cost:.2f}")
        logger.info(f"   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${old_avg_buy_price:.4f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–∞—Ö
        test_prices = [4200, 4250, 4300]
        
        for price in test_prices:
            current_value = self.current_eth_balance * price
            cost_basis = self.current_eth_balance * old_avg_buy_price
            pnl = current_value - cost_basis
            
            logger.info(f"   üìä –ü—Ä–∏ —Ü–µ–Ω–µ ${price}: PnL = ${pnl:.4f}")
            
            if pnl > self.profit_threshold:
                logger.info(f"   ‚ö†Ô∏è  –õ–û–ñ–ù–´–ô –°–ò–ì–ù–ê–õ! –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ —É–±—ã—Ç–∫–µ!")
        
        logger.info("=" * 80)
    
    def demonstrate_new_method_solution(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º"""
        logger.info("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–®–ï–ù–ò–Ø –ù–û–í–´–ú –ú–ï–¢–û–î–û–ú:")
        logger.info("=" * 80)
        
        # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–æ–Ω–µ—Ç—ã
        buy_orders = [order for order in self.eth_order_history if order['side'] == 'BUY']
        sell_orders = [order for order in self.eth_order_history if order['side'] == 'SELL']
        
        total_bought = sum(order['quantity'] for order in buy_orders)
        total_sold = sum(order['quantity'] for order in sell_orders)
        remaining_quantity = total_bought - total_sold
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–æ–Ω–µ—Ç
        total_buy_cost = sum(order['quantity'] * order['price'] for order in buy_orders)
        new_avg_buy_price = total_buy_cost / total_bought
        
        logger.info(f"üü¢ –ù–û–í–´–ô –ú–ï–¢–û–î (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π FIFO):")
        logger.info(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {total_bought:.6f} ETH")
        logger.info(f"   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {total_sold:.6f} ETH")
        logger.info(f"   - –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–æ–Ω–µ—Ç—ã: {remaining_quantity:.6f} ETH")
        logger.info(f"   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${new_avg_buy_price:.4f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ü–µ–Ω–∞—Ö
        test_prices = [4200, 4250, 4300]
        
        for price in test_prices:
            current_value = self.current_eth_balance * price
            cost_basis = self.current_eth_balance * new_avg_buy_price
            pnl = current_value - cost_basis
            
            logger.info(f"   üìä –ü—Ä–∏ —Ü–µ–Ω–µ ${price}: PnL = ${pnl:.4f}")
            
            if pnl > self.profit_threshold:
                logger.info(f"   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ! –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–∏–±—ã–ª–∏!")
            else:
                logger.info(f"   üìà PnL –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, –ø—Ä–æ–¥–∞–∂–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        logger.info("=" * 80)
    
    def show_critical_issue(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        logger.info("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –°–¢–ê–†–û–ì–û –ú–ï–¢–û–î–ê:")
        logger.info("=" * 80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –º–æ–≥ –ø—Ä–æ–¥–∞—Ç—å ETH –¥–µ—à–µ–≤–ª–µ –ø–æ–∫—É–ø–∫–∏
        buy_orders = [order for order in self.eth_order_history if order['side'] == 'BUY']
        total_buy_cost = sum(order['quantity'] * order['price'] for order in buy_orders)
        total_buy_quantity = sum(order['quantity'] for order in buy_orders)
        old_avg_buy_price = total_buy_cost / total_buy_quantity
        
        logger.info(f"üî¥ –°–¢–ê–†–´–ô –ú–ï–¢–û–î:")
        logger.info(f"   - –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${old_avg_buy_price:.4f}")
        logger.info(f"   - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {self.current_eth_balance:.6f} ETH")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –ø—Ä–∏ –∫–∞–∫–æ–π —Ü–µ–Ω–µ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–∞–≤–∞–ª –±—ã –ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        false_signal_price = old_avg_buy_price + (self.profit_threshold / self.current_eth_balance)
        
        logger.info(f"   - –õ–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–∏ —Ü–µ–Ω–µ: ${false_signal_price:.4f}")
        logger.info(f"   - –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ –í–´–®–ï —Å—Ä–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
        logger.info(f"\nüìä –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:")
        logger.info(f"   - –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å ETH —É–∂–µ –ø—Ä–æ–¥–∞–Ω–∞ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã–º —Ü–µ–Ω–∞–º")
        logger.info(f"   - –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–æ–π –æ—Å—Ç–∞—Ç–æ–∫: {self.current_eth_balance:.6f} ETH")
        logger.info(f"   - –≠—Ç–æ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ü–µ–Ω–∏–≤–∞—Ç—å—Å—è –ø–æ –µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        
        logger.info("=" * 80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üö® –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–ë–õ–ï–ú–´ PnL –ú–û–ù–ò–¢–û–†–ê")
    logger.info("=" * 80)
    
    scenario = RealisticPnLScenario()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–æ–≤
    scenario.show_order_history()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞
    scenario.demonstrate_old_method_problem()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –Ω–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
    scenario.demonstrate_new_method_solution()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É
    scenario.show_critical_issue()
    
    logger.info("=" * 80)
    logger.info("üí° –í–´–í–û–î:")
    logger.info("   –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –º–æ–≥ –ø—Ä–∏–≤–æ–¥–∏—Ç—å –∫ –ø—Ä–æ–¥–∞–∂–µ ETH –ø–æ —Ü–µ–Ω–∞–º")
    logger.info("   –Ω–∏–∂–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ —É–±—ã—Ç–∫–∞–º!")
    logger.info("   –ù–æ–≤—ã–π FIFO –º–µ—Ç–æ–¥ —Ä–µ—à–∞–µ—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É.")

if __name__ == "__main__":
    main() 